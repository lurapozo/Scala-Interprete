Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ARROBA
    BACKTICK
    CATCH
    CLASS
    DO
    EXTENDS
    FINAL
    FINALLY
    FOR_SOME
    HASHTAG
    IMPLICIT
    LAZY
    LIBRERIA_IO
    MACRO
    MAYOR_IGUAL
    MENOR_IGUAL
    NULL
    OVERRIDE
    PACKAGE
    PRIVATE
    PROTECTED
    REVERSE
    SEALED
    SUPER
    THIS
    THROW
    TRAIT
    TRY
    TYPE
    WITH
    YIELD

Grammar

Rule 0     S' -> inicio
Rule 1     inicio -> OBJECT VARIABLE LLAVE_I cuerpo LLAVE_D
Rule 2     inicio -> IMPORT io inicio
Rule 3     inicio -> cuerpo
Rule 4     io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE
Rule 5     cuerpo -> funcion
Rule 6     cuerpo -> funcall
Rule 7     cuerpo -> impresion
Rule 8     cuerpo -> entrada
Rule 9     cuerpo -> asignacion
Rule 10    cuerpo -> while
Rule 11    cuerpo -> for
Rule 12    cuerpo -> match
Rule 13    cuerpo -> if
Rule 14    cuerpo -> funcion cuerpo
Rule 15    cuerpo -> asignacion cuerpo
Rule 16    cuerpo -> while cuerpo
Rule 17    cuerpo -> for cuerpo
Rule 18    cuerpo -> if cuerpo
Rule 19    cuerpo -> match cuerpo
Rule 20    contenido -> asignacion
Rule 21    contenido -> reasignacion
Rule 22    contenido -> funcall
Rule 23    contenido -> impresion
Rule 24    contenido -> entrada
Rule 25    contenido -> while
Rule 26    contenido -> for
Rule 27    contenido -> match
Rule 28    contenido -> if
Rule 29    contenido -> aritmetica
Rule 30    contenido -> asignacion contenido
Rule 31    contenido -> reasignacion contenido
Rule 32    contenido -> funcall contenido
Rule 33    contenido -> impresion contenido
Rule 34    contenido -> entrada contenido
Rule 35    contenido -> while contenido
Rule 36    contenido -> for contenido
Rule 37    contenido -> if contenido
Rule 38    contenido -> match contenido
Rule 39    contenido -> aritmetica contenido
Rule 40    contenidoLine -> asignacion
Rule 41    contenidoLine -> reasignacion
Rule 42    contenidoLine -> funcall
Rule 43    contenidoLine -> impresion
Rule 44    contenidoLine -> entrada
Rule 45    asignacion -> VAR VARIABLE IGUAL VARIABLE
Rule 46    asignacion -> VAL VARIABLE IGUAL VARIABLE
Rule 47    asignacion -> VAR VARIABLE IGUAL aritmetica
Rule 48    asignacion -> VAL VARIABLE IGUAL aritmetica
Rule 49    asignacion -> VAR VARIABLE IGUAL returnfun
Rule 50    asignacion -> VAL VARIABLE IGUAL returnfun
Rule 51    asignacion -> asignacionLong
Rule 52    asignacion -> asignacionInt
Rule 53    asignacion -> asignacionFloat
Rule 54    asignacion -> asignacionDouble
Rule 55    asignacion -> asignacionString
Rule 56    asignacion -> asignacionChar
Rule 57    asignacion -> asignacionBoolean
Rule 58    asignacion -> array
Rule 59    asignacion -> list
Rule 60    asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
Rule 61    asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
Rule 62    asignacionInt -> VAR VARIABLE IGUAL INT
Rule 63    asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
Rule 64    asignacionInt -> VAL VARIABLE IGUAL INT
Rule 65    asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
Rule 66    asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
Rule 67    asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
Rule 68    asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
Rule 69    asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
Rule 70    asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
Rule 71    asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
Rule 72    asignacionString -> VAR VARIABLE IGUAL STRING
Rule 73    asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
Rule 74    asignacionString -> VAL VARIABLE IGUAL STRING
Rule 75    asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
Rule 76    asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
Rule 77    asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
Rule 78    asignacionChar -> VAR VARIABLE IGUAL CHAR
Rule 79    asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
Rule 80    asignacionChar -> VAL VARIABLE IGUAL CHAR
Rule 81    asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
Rule 82    asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
Rule 83    asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
Rule 84    asignacionBoolean -> VAR VARIABLE IGUAL booleanos
Rule 85    asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
Rule 86    asignacionBoolean -> VAL VARIABLE IGUAL booleanos
Rule 87    asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
Rule 88    asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
Rule 89    asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
Rule 90    reasignacion -> VARIABLE IGUAL valor
Rule 91    reasignacion -> VARIABLE IGUAL returnfun
Rule 92    reasignacion -> VARIABLE IGUAL aritmetica
Rule 93    reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor
Rule 94    tipo -> CHARCLASS
Rule 95    tipo -> STRINGCLASS
Rule 96    tipo -> BOOLCLASS
Rule 97    tipo -> INTCLASS
Rule 98    tipo -> LONGCLASS
Rule 99    tipo -> DOUBLECLASS
Rule 100   tipo -> FLOATCLASS
Rule 101   tipo -> ARRAYCLASS CORCHETE_I tipo CORCHETE_D
Rule 102   tipo -> LISTCLASS CORCHETE_I tipo CORCHETE_D
Rule 103   valor -> STRING
Rule 104   valor -> CHAR
Rule 105   valor -> VARIABLE
Rule 106   valor -> numeros
Rule 107   valor -> booleanos
Rule 108   valor -> VARIABLE PAR_I VARIABLE PAR_D
Rule 109   valor -> VARIABLE PAR_I INT PAR_D
Rule 110   booleanos -> TRUE
Rule 111   booleanos -> FLASE
Rule 112   numeros -> INT
Rule 113   numeros -> LONG
Rule 114   numeros -> FLOAT
Rule 115   numeros -> DOUBLE
Rule 116   funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
Rule 117   funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
Rule 118   declaracion -> VARIABLE DOBLE_PUNTO tipo
Rule 119   declaracion -> VARIABLE DOBLE_PUNTO tipo IGUAL valor
Rule 120   parametro -> parametros
Rule 121   parametro -> PAR_I PAR_D
Rule 122   parametros -> PAR_I declaracion PAR_D
Rule 123   parametros -> PAR_I declaracion PAR_D parametros
Rule 124   funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
Rule 125   funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
Rule 126   funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
Rule 127   funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
Rule 128   funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
Rule 129   funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
Rule 130   funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
Rule 131   funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
Rule 132   funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
Rule 133   funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
Rule 134   funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
Rule 135   dectipo -> DOBLE_PUNTO tipo
Rule 136   dectipoTupla -> DOBLE_PUNTO PAR_I tipos PAR_D
Rule 137   tipos -> tipo
Rule 138   tipos -> tipo tiposentry
Rule 139   tiposentry -> COMA tipo
Rule 140   tiposentry -> COMA tipo tiposentry
Rule 141   impresion -> PRINTLN PAR_I valorI PAR_D
Rule 142   impresion -> PRINT PAR_I valorI PAR_D
Rule 143   valorI -> valor MAS valorI
Rule 144   valorI -> valor
Rule 145   entrada -> READLINE PAR_I PAR_D
Rule 146   funcall -> VARIABLE varparen
Rule 147   varparen -> PAR_I valores PAR_D
Rule 148   varparen -> PAR_I PAR_D
Rule 149   varparen -> varparen PAR_I valores PAR_D
Rule 150   varparen -> varparen PAR_I PAR_D
Rule 151   returnfun -> returnCastable
Rule 152   returnfun -> castingcall
Rule 153   returnCastable -> entrada
Rule 154   returnCastable -> funcall
Rule 155   castingcall -> returnCastable PUNTO castingfun
Rule 156   castingcall -> VARIABLE PUNTO castingfun
Rule 157   castingfun -> TO_INT
Rule 158   castingfun -> TO_DOUBLE
Rule 159   castingfun -> TO_FLOAT
Rule 160   castingfun -> TO_LONG
Rule 161   array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
Rule 162   array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
Rule 163   array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
Rule 164   array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
Rule 165   array -> arrayInt
Rule 166   array -> arrayDouble
Rule 167   list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
Rule 168   list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
Rule 169   list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
Rule 170   valores -> valor
Rule 171   valores -> valor COMA valores
Rule 172   tuple -> PAR_I valores PAR_D
Rule 173   asignacion -> VAR VARIABLE IGUAL tuple
Rule 174   asignacion -> VAL VARIABLE IGUAL tuple
Rule 175   while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
Rule 176   for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
Rule 177   for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
Rule 178   for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
Rule 179   for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
Rule 180   for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
Rule 181   for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
Rule 182   match -> VARIABLE MATCH LLAVE_I cases LLAVE_D
Rule 183   cases -> casesInt
Rule 184   cases -> casesLgn
Rule 185   cases -> casesFlt
Rule 186   cases -> casesDob
Rule 187   cases -> casesStr
Rule 188   cases -> casesChar
Rule 189   cases -> casesBool
Rule 190   caseInt -> CASE INT FUNCION_FLECHA codeBlock
Rule 191   casesInt -> caseInt
Rule 192   casesInt -> caseInt casesInt
Rule 193   casesInt -> caseInt defcase
Rule 194   caseLgn -> CASE LONG FUNCION_FLECHA codeBlock
Rule 195   casesLgn -> caseLgn
Rule 196   casesLgn -> caseLgn casesLgn
Rule 197   casesLgn -> caseLgn defcase
Rule 198   caseFlt -> CASE FLOAT FUNCION_FLECHA codeBlock
Rule 199   casesFlt -> caseFlt
Rule 200   casesFlt -> caseFlt casesFlt
Rule 201   casesFlt -> caseFlt defcase
Rule 202   caseDob -> CASE DOUBLE FUNCION_FLECHA codeBlock
Rule 203   casesDob -> caseDob
Rule 204   casesDob -> caseDob casesDob
Rule 205   casesDob -> caseDob defcase
Rule 206   caseStr -> CASE STRING FUNCION_FLECHA codeBlock
Rule 207   casesStr -> caseStr
Rule 208   casesStr -> caseStr casesStr
Rule 209   casesStr -> caseStr defcase
Rule 210   caseChar -> CASE CHAR FUNCION_FLECHA codeBlock
Rule 211   casesChar -> caseChar
Rule 212   casesChar -> caseChar casesChar
Rule 213   casesChar -> caseChar defcase
Rule 214   caseBool -> CASE booleanos FUNCION_FLECHA codeBlock
Rule 215   casesBool -> caseBool
Rule 216   casesBool -> caseBool casesBool
Rule 217   casesBool -> caseBool defcase
Rule 218   defcase -> CASE SUBGUION FUNCION_FLECHA codeBlock
Rule 219   codeBlock -> contenidoLine
Rule 220   codeBlock -> LLAVE_I contenido LLAVE_D
Rule 221   if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
Rule 222   if -> if elseif
Rule 223   if -> if else
Rule 224   elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
Rule 225   elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif
Rule 226   else -> ELSE LLAVE_I contenido LLAVE_D
Rule 227   else -> elseif else
Rule 228   condicional -> valorC logicos condicional
Rule 229   condicional -> valorC
Rule 230   valorC -> VARIABLE
Rule 231   valorC -> booleanos
Rule 232   valorC -> relacional
Rule 233   valorC -> NOT VARIABLE
Rule 234   valorC -> NOT booleanos
Rule 235   valorC -> NOT relacional
Rule 236   logicos -> AND
Rule 237   logicos -> OR
Rule 238   logicos -> NOT
Rule 239   relacional -> numeros comparacion numeros
Rule 240   relacional -> aritmetica comparacion aritmetica
Rule 241   relacional -> aritmetica comparacion numeros
Rule 242   relacional -> numeros comparacion aritmetica
Rule 243   relacional -> booleanos comparacion booleanos
Rule 244   relacional -> STRING comparacion STRING
Rule 245   relacional -> CHAR comparacion CHAR
Rule 246   relacional -> VARIABLE comparacion numeros
Rule 247   relacional -> numeros comparacion VARIABLE
Rule 248   relacional -> VARIABLE comparacion booleanos
Rule 249   relacional -> booleanos comparacion VARIABLE
Rule 250   relacional -> VARIABLE comparacion STRING
Rule 251   relacional -> STRING comparacion VARIABLE
Rule 252   relacional -> VARIABLE comparacion CHAR
Rule 253   relacional -> CHAR comparacion VARIABLE
Rule 254   relacional -> VARIABLE comparacion VARIABLE
Rule 255   comparacion -> IGUAL_COMPARACION
Rule 256   comparacion -> DIFERENTE
Rule 257   comparacion -> MAYOR
Rule 258   comparacion -> MENOR
Rule 259   aritmetica -> numeros aritmeticos numeros
Rule 260   aritmetica -> VARIABLE aritmeticos numeros
Rule 261   aritmetica -> numeros aritmeticos VARIABLE
Rule 262   aritmetica -> VARIABLE aritmeticos VARIABLE
Rule 263   aritmetica -> aritmetica aritmeticos numeros
Rule 264   aritmetica -> aritmetica aritmeticos VARIABLE
Rule 265   aritmeticos -> MENOS
Rule 266   aritmeticos -> MAS
Rule 267   aritmeticos -> MULTIPLICACION
Rule 268   aritmeticos -> DIVISION
Rule 269   aritmeticos -> MOD
Rule 270   arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
Rule 271   arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D
Rule 272   valoresInt -> INT
Rule 273   valoresInt -> valoresInt COMA INT
Rule 274   valoresDouble -> DOUBLE
Rule 275   valoresDouble -> valoresDouble COMA DOUBLE
Rule 276   asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla
Rule 277   asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla
Rule 278   dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D
Rule 279   dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D
Rule 280   dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D
Rule 281   dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D
Rule 282   dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D
Rule 283   dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D
Rule 284   dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D
Rule 285   dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D
Rule 286   dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D
Rule 287   dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D
Rule 288   dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D
Rule 289   dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D
Rule 290   dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D
Rule 291   dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D
Rule 292   dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D
Rule 293   dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D
Rule 294   dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D
Rule 295   dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D
Rule 296   dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D
Rule 297   dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D
Rule 298   asignacionLong -> VAR VARIABLE IGUAL longvalues
Rule 299   asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
Rule 300   asignacionLong -> VAL VARIABLE IGUAL longvalues
Rule 301   asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
Rule 302   longvalues -> INT
Rule 303   longvalues -> LONG
Rule 304   asignacionFloat -> VAR VARIABLE IGUAL floatvalues
Rule 305   asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
Rule 306   asignacionFloat -> VAL VARIABLE IGUAL floatvalues
Rule 307   asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
Rule 308   floatvalues -> FLOAT
Rule 309   floatvalues -> longvalues
Rule 310   asignacionDouble -> VAR VARIABLE IGUAL doublevalues
Rule 311   asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
Rule 312   asignacionDouble -> VAL VARIABLE IGUAL doublevalues
Rule 313   asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
Rule 314   doublevalues -> DOUBLE
Rule 315   doublevalues -> floatvalues

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 236
ARRAYCLASS           : 101 161 162 162 163 164 164 270 270 271 271
ARROBA               : 
BACKTICK             : 
BOOLCLASS            : 85 87 88 89 96
CASE                 : 190 194 198 202 206 210 214 218
CATCH                : 
CHAR                 : 78 79 80 81 104 210 245 245 252 253
CHARCLASS            : 79 81 82 83 94
CLASS                : 
COMA                 : 139 140 171 273 275 278 278 279 279 280 280 281 281 282 282 283 283 284 284 285 285 286 286 287 287 288 288 289 289 290 290 291 291 292 292 293 293 294 294 295 295 296 296 297 297
CORCHETE_D           : 101 102 162 162 164 164 168 169 270 271
CORCHETE_I           : 101 102 162 162 164 164 168 169 270 271
DEF                  : 116 117 124 125 126 127 128 129 130 131 132 133 134
DIFERENTE            : 256
DIVISION             : 268
DO                   : 
DOBLE_PUNTO          : 60 61 63 65 66 67 68 69 70 71 73 75 76 77 79 81 82 83 85 87 88 89 118 119 135 136 162 164 168 169 270 271 276 277 299 301 305 307 311 313
DOUBLE               : 115 202 274 275 280 284 286 287 288 289 292 296 314
DOUBLECLASS          : 70 71 99 271 280 284 286 287 288 289 292 296 311 313
ELSE                 : 224 225 226
EXTENDS              : 
FINAL                : 
FINALLY              : 
FLASE                : 111
FLOAT                : 114 198 281 282 283 284 285 288 293 297 308
FLOATCLASS           : 68 69 100 281 282 283 284 285 288 293 297 305 307
FOR                  : 176 177 178 179 180 181
FOR_SOME             : 
FUNCION_FLECHA       : 190 194 198 202 206 210 214 218
HASHTAG              : 
IF                   : 221 224 225
IGUAL                : 45 46 47 48 49 50 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 116 119 124 125 126 127 128 129 130 131 132 133 134 161 162 163 164 167 168 169 173 174 270 271 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 304 305 306 307 310 311 312 313
IGUAL_COMPARACION    : 255
IMPLICIT             : 
IMPORT               : 2
INT                  : 62 63 64 65 93 109 112 162 164 178 178 179 179 180 180 181 181 190 272 273 278 285 289 291 294 295 296 297 302
INTCLASS             : 63 65 66 67 97 270 278 285 289 291 294 295 296 297
ITERATOR             : 176 177 178 179 180 181
LAZY                 : 
LIBRERIA_IO          : 
LISTCLASS            : 102 167 168 168 169 169
LLAVE_D              : 1 116 117 124 125 126 127 128 129 130 131 132 133 134 175 176 177 178 179 180 181 182 220 221 224 225 226
LLAVE_I              : 1 116 117 124 125 126 127 128 129 130 131 132 133 134 175 176 177 178 179 180 181 182 220 221 224 225 226
LONG                 : 113 194 279 283 287 290 291 292 293 295 303
LONGCLASS            : 60 61 98 279 283 287 290 291 292 293 295 299 301
MACRO                : 
MAS                  : 143 266
MATCH                : 182
MAYOR                : 257
MAYOR_IGUAL          : 
MENOR                : 258
MENOR_IGUAL          : 
MENOS                : 265
MOD                  : 269
MULTIPLICACION       : 267
NEW                  : 162 164 168
NOT                  : 233 234 235 238
NULL                 : 
OBJECT               : 1
OR                   : 237
OVERRIDE             : 
PACKAGE              : 
PAR_D                : 93 108 109 121 122 123 136 141 142 145 147 148 149 150 161 162 163 164 167 168 169 172 175 176 177 178 179 180 181 221 224 225 270 271 278 278 279 279 280 280 281 281 282 282 283 283 284 284 285 285 286 286 287 287 288 288 289 289 290 290 291 291 292 292 293 293 294 294 295 295 296 296 297 297
PAR_I                : 93 108 109 121 122 123 136 141 142 145 147 148 149 150 161 162 163 164 167 168 169 172 175 176 177 178 179 180 181 221 224 225 270 271 278 278 279 279 280 280 281 281 282 282 283 283 284 284 285 285 286 286 287 287 288 288 289 289 290 290 291 291 292 292 293 293 294 294 295 295 296 296 297 297
PRINT                : 142
PRINTLN              : 141
PRIVATE              : 
PROTECTED            : 
PUNTO                : 4 4 4 155 156
READLINE             : 4 145
RETURN               : 124 125 126 127 128 129 130 131 132 133 134
REVERSE              : 
SEALED               : 
STRING               : 72 73 74 75 103 206 244 244 250 251 278 279 280 281 282 286 290 294
STRINGCLASS          : 73 75 76 77 95 278 279 280 281 282 286 290 294
SUBGUION             : 218
SUPER                : 
THIS                 : 
THROW                : 
TO                   : 178 180
TO_DOUBLE            : 158
TO_FLOAT             : 159
TO_INT               : 157
TO_LONG              : 160
TRAIT                : 
TRUE                 : 110
TRY                  : 
TYPE                 : 
UNTIL                : 179 181
VAL                  : 46 48 50 61 64 65 67 69 71 74 75 77 80 81 83 86 87 89 163 164 167 168 169 174 277 300 301 306 307 312 313
VAR                  : 45 47 49 60 62 63 66 68 70 72 73 76 78 79 82 84 85 88 161 162 173 176 180 181 270 271 276 298 299 304 305 310 311
VARIABLE             : 1 4 4 4 45 45 46 46 47 48 49 50 60 60 61 61 62 63 64 65 66 66 67 67 68 68 69 69 70 70 71 71 72 73 74 75 76 76 77 77 78 79 80 81 82 82 83 83 84 85 86 87 88 88 89 89 90 91 92 93 105 108 108 109 116 117 118 119 124 125 125 126 127 128 129 129 130 131 132 133 133 134 146 156 161 162 163 164 167 168 169 173 174 176 176 177 177 178 179 180 181 182 230 233 246 247 248 249 250 251 252 253 254 254 260 261 262 262 264 270 271 276 277 298 299 300 301 304 305 306 307 310 311 312 313
WHILE                : 175
WITH                 : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

aritmetica           : 29 39 47 48 92 127 131 240 240 241 242 263 264
aritmeticos          : 259 260 261 262 263 264
array                : 58
arrayDouble          : 166
arrayInt             : 165
asignacion           : 9 15 20 30 40
asignacionBoolean    : 57
asignacionChar       : 56
asignacionDouble     : 54
asignacionFloat      : 53
asignacionInt        : 52
asignacionLong       : 51
asignacionString     : 55
booleanos            : 84 85 86 87 107 214 231 234 243 243 248 249
caseBool             : 215 216 217
caseChar             : 211 212 213
caseDob              : 203 204 205
caseFlt              : 199 200 201
caseInt              : 191 192 193
caseLgn              : 195 196 197
caseStr              : 207 208 209
cases                : 182
casesBool            : 189 216
casesChar            : 188 212
casesDob             : 186 204
casesFlt             : 185 200
casesInt             : 183 192
casesLgn             : 184 196
casesStr             : 187 208
castingcall          : 152
castingfun           : 155 156
codeBlock            : 190 194 198 202 206 210 214 218
comparacion          : 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254
condicional          : 175 221 224 225 228
contenido            : 30 31 32 33 34 35 36 37 38 39 116 117 124 125 126 127 132 133 134 175 176 177 178 179 180 181 220 221 224 225 226
contenidoLine        : 219
cuerpo               : 1 3 14 15 16 17 18 19
declaracion          : 122 123
dectipo              : 124 125 126 127 128 129 130 131
dectipoTupla         : 132 133 134
dectupla             : 276 277
defcase              : 193 197 201 205 209 213 217
doublevalues         : 310 311 312 313
else                 : 223 227
elseif               : 222 225 227
entrada              : 8 24 34 44 153
floatvalues          : 304 305 306 307 315
for                  : 11 17 26 36
funcall              : 6 22 32 42 154
funcion              : 5 14
if                   : 13 18 28 37 222 223
impresion            : 7 23 33 43
inicio               : 2 0
io                   : 2
list                 : 59
logicos              : 228
longvalues           : 298 299 300 301 309
match                : 12 19 27 38
numeros              : 106 239 239 241 242 246 247 259 259 260 261 263
parametro            : 116 117 124 125 126 127 128 129 130 131 132 133 134
parametros           : 120 123
reasignacion         : 21 31 41
relacional           : 232 235
returnCastable       : 151 155
returnfun            : 49 50 91 126 130 134
tipo                 : 101 102 118 119 135 137 138 139 140 162 162 164 164 168 169
tipos                : 136
tiposentry           : 138 140
tuple                : 132 173 174
valor                : 90 93 119 124 128 143 144 170 171
valorC               : 228 229
valorI               : 141 142 143
valores              : 147 149 161 163 167 168 169 171 172
valoresDouble        : 271 275
valoresInt           : 270 273
varparen             : 146 149 150
while                : 10 16 25 35

Parsing method: LALR

state 0

    (0) S' -> . inicio
    (1) inicio -> . OBJECT VARIABLE LLAVE_I cuerpo LLAVE_D
    (2) inicio -> . IMPORT io inicio
    (3) inicio -> . cuerpo
    (5) cuerpo -> . funcion
    (6) cuerpo -> . funcall
    (7) cuerpo -> . impresion
    (8) cuerpo -> . entrada
    (9) cuerpo -> . asignacion
    (10) cuerpo -> . while
    (11) cuerpo -> . for
    (12) cuerpo -> . match
    (13) cuerpo -> . if
    (14) cuerpo -> . funcion cuerpo
    (15) cuerpo -> . asignacion cuerpo
    (16) cuerpo -> . while cuerpo
    (17) cuerpo -> . for cuerpo
    (18) cuerpo -> . if cuerpo
    (19) cuerpo -> . match cuerpo
    (116) funcion -> . DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (117) funcion -> . DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
    (124) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (125) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (126) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (127) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (128) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (129) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (130) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (131) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (132) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (133) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (134) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    OBJECT          shift and go to state 2
    IMPORT          shift and go to state 5
    DEF             shift and go to state 15
    VARIABLE        shift and go to state 3
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32

    inicio                         shift and go to state 1
    cuerpo                         shift and go to state 4
    funcion                        shift and go to state 6
    funcall                        shift and go to state 7
    impresion                      shift and go to state 8
    entrada                        shift and go to state 9
    asignacion                     shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    match                          shift and go to state 13
    if                             shift and go to state 14
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 1

    (0) S' -> inicio .



state 2

    (1) inicio -> OBJECT . VARIABLE LLAVE_I cuerpo LLAVE_D

    VARIABLE        shift and go to state 35


state 3

    (146) funcall -> VARIABLE . varparen
    (182) match -> VARIABLE . MATCH LLAVE_I cases LLAVE_D
    (147) varparen -> . PAR_I valores PAR_D
    (148) varparen -> . PAR_I PAR_D
    (149) varparen -> . varparen PAR_I valores PAR_D
    (150) varparen -> . varparen PAR_I PAR_D

    MATCH           shift and go to state 37
    PAR_I           shift and go to state 38

    varparen                       shift and go to state 36

state 4

    (3) inicio -> cuerpo .

    $end            reduce using rule 3 (inicio -> cuerpo .)


state 5

    (2) inicio -> IMPORT . io inicio
    (4) io -> . VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE

    VARIABLE        shift and go to state 40

    io                             shift and go to state 39

state 6

    (5) cuerpo -> funcion .
    (14) cuerpo -> funcion . cuerpo
    (5) cuerpo -> . funcion
    (6) cuerpo -> . funcall
    (7) cuerpo -> . impresion
    (8) cuerpo -> . entrada
    (9) cuerpo -> . asignacion
    (10) cuerpo -> . while
    (11) cuerpo -> . for
    (12) cuerpo -> . match
    (13) cuerpo -> . if
    (14) cuerpo -> . funcion cuerpo
    (15) cuerpo -> . asignacion cuerpo
    (16) cuerpo -> . while cuerpo
    (17) cuerpo -> . for cuerpo
    (18) cuerpo -> . if cuerpo
    (19) cuerpo -> . match cuerpo
    (116) funcion -> . DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (117) funcion -> . DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
    (124) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (125) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (126) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (127) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (128) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (129) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (130) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (131) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (132) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (133) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (134) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    $end            reduce using rule 5 (cuerpo -> funcion .)
    LLAVE_D         reduce using rule 5 (cuerpo -> funcion .)
    DEF             shift and go to state 15
    VARIABLE        shift and go to state 3
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32

    funcion                        shift and go to state 6
    cuerpo                         shift and go to state 41
    funcall                        shift and go to state 7
    impresion                      shift and go to state 8
    entrada                        shift and go to state 9
    asignacion                     shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    match                          shift and go to state 13
    if                             shift and go to state 14
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 7

    (6) cuerpo -> funcall .

    $end            reduce using rule 6 (cuerpo -> funcall .)
    LLAVE_D         reduce using rule 6 (cuerpo -> funcall .)


state 8

    (7) cuerpo -> impresion .

    $end            reduce using rule 7 (cuerpo -> impresion .)
    LLAVE_D         reduce using rule 7 (cuerpo -> impresion .)


state 9

    (8) cuerpo -> entrada .

    $end            reduce using rule 8 (cuerpo -> entrada .)
    LLAVE_D         reduce using rule 8 (cuerpo -> entrada .)


state 10

    (9) cuerpo -> asignacion .
    (15) cuerpo -> asignacion . cuerpo
    (5) cuerpo -> . funcion
    (6) cuerpo -> . funcall
    (7) cuerpo -> . impresion
    (8) cuerpo -> . entrada
    (9) cuerpo -> . asignacion
    (10) cuerpo -> . while
    (11) cuerpo -> . for
    (12) cuerpo -> . match
    (13) cuerpo -> . if
    (14) cuerpo -> . funcion cuerpo
    (15) cuerpo -> . asignacion cuerpo
    (16) cuerpo -> . while cuerpo
    (17) cuerpo -> . for cuerpo
    (18) cuerpo -> . if cuerpo
    (19) cuerpo -> . match cuerpo
    (116) funcion -> . DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (117) funcion -> . DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
    (124) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (125) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (126) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (127) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (128) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (129) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (130) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (131) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (132) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (133) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (134) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    $end            reduce using rule 9 (cuerpo -> asignacion .)
    LLAVE_D         reduce using rule 9 (cuerpo -> asignacion .)
    DEF             shift and go to state 15
    VARIABLE        shift and go to state 3
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32

    asignacion                     shift and go to state 10
    cuerpo                         shift and go to state 42
    funcion                        shift and go to state 6
    funcall                        shift and go to state 7
    impresion                      shift and go to state 8
    entrada                        shift and go to state 9
    while                          shift and go to state 11
    for                            shift and go to state 12
    match                          shift and go to state 13
    if                             shift and go to state 14
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 11

    (10) cuerpo -> while .
    (16) cuerpo -> while . cuerpo
    (5) cuerpo -> . funcion
    (6) cuerpo -> . funcall
    (7) cuerpo -> . impresion
    (8) cuerpo -> . entrada
    (9) cuerpo -> . asignacion
    (10) cuerpo -> . while
    (11) cuerpo -> . for
    (12) cuerpo -> . match
    (13) cuerpo -> . if
    (14) cuerpo -> . funcion cuerpo
    (15) cuerpo -> . asignacion cuerpo
    (16) cuerpo -> . while cuerpo
    (17) cuerpo -> . for cuerpo
    (18) cuerpo -> . if cuerpo
    (19) cuerpo -> . match cuerpo
    (116) funcion -> . DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (117) funcion -> . DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
    (124) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (125) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (126) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (127) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (128) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (129) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (130) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (131) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (132) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (133) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (134) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    $end            reduce using rule 10 (cuerpo -> while .)
    LLAVE_D         reduce using rule 10 (cuerpo -> while .)
    DEF             shift and go to state 15
    VARIABLE        shift and go to state 3
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32

    while                          shift and go to state 11
    cuerpo                         shift and go to state 43
    funcion                        shift and go to state 6
    funcall                        shift and go to state 7
    impresion                      shift and go to state 8
    entrada                        shift and go to state 9
    asignacion                     shift and go to state 10
    for                            shift and go to state 12
    match                          shift and go to state 13
    if                             shift and go to state 14
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 12

    (11) cuerpo -> for .
    (17) cuerpo -> for . cuerpo
    (5) cuerpo -> . funcion
    (6) cuerpo -> . funcall
    (7) cuerpo -> . impresion
    (8) cuerpo -> . entrada
    (9) cuerpo -> . asignacion
    (10) cuerpo -> . while
    (11) cuerpo -> . for
    (12) cuerpo -> . match
    (13) cuerpo -> . if
    (14) cuerpo -> . funcion cuerpo
    (15) cuerpo -> . asignacion cuerpo
    (16) cuerpo -> . while cuerpo
    (17) cuerpo -> . for cuerpo
    (18) cuerpo -> . if cuerpo
    (19) cuerpo -> . match cuerpo
    (116) funcion -> . DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (117) funcion -> . DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
    (124) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (125) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (126) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (127) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (128) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (129) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (130) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (131) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (132) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (133) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (134) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    $end            reduce using rule 11 (cuerpo -> for .)
    LLAVE_D         reduce using rule 11 (cuerpo -> for .)
    DEF             shift and go to state 15
    VARIABLE        shift and go to state 3
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32

    for                            shift and go to state 12
    cuerpo                         shift and go to state 44
    funcion                        shift and go to state 6
    funcall                        shift and go to state 7
    impresion                      shift and go to state 8
    entrada                        shift and go to state 9
    asignacion                     shift and go to state 10
    while                          shift and go to state 11
    match                          shift and go to state 13
    if                             shift and go to state 14
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 13

    (12) cuerpo -> match .
    (19) cuerpo -> match . cuerpo
    (5) cuerpo -> . funcion
    (6) cuerpo -> . funcall
    (7) cuerpo -> . impresion
    (8) cuerpo -> . entrada
    (9) cuerpo -> . asignacion
    (10) cuerpo -> . while
    (11) cuerpo -> . for
    (12) cuerpo -> . match
    (13) cuerpo -> . if
    (14) cuerpo -> . funcion cuerpo
    (15) cuerpo -> . asignacion cuerpo
    (16) cuerpo -> . while cuerpo
    (17) cuerpo -> . for cuerpo
    (18) cuerpo -> . if cuerpo
    (19) cuerpo -> . match cuerpo
    (116) funcion -> . DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (117) funcion -> . DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
    (124) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (125) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (126) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (127) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (128) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (129) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (130) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (131) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (132) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (133) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (134) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    $end            reduce using rule 12 (cuerpo -> match .)
    LLAVE_D         reduce using rule 12 (cuerpo -> match .)
    DEF             shift and go to state 15
    VARIABLE        shift and go to state 3
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32

    match                          shift and go to state 13
    cuerpo                         shift and go to state 45
    funcion                        shift and go to state 6
    funcall                        shift and go to state 7
    impresion                      shift and go to state 8
    entrada                        shift and go to state 9
    asignacion                     shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    if                             shift and go to state 14
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 14

    (13) cuerpo -> if .
    (18) cuerpo -> if . cuerpo
    (222) if -> if . elseif
    (223) if -> if . else
    (5) cuerpo -> . funcion
    (6) cuerpo -> . funcall
    (7) cuerpo -> . impresion
    (8) cuerpo -> . entrada
    (9) cuerpo -> . asignacion
    (10) cuerpo -> . while
    (11) cuerpo -> . for
    (12) cuerpo -> . match
    (13) cuerpo -> . if
    (14) cuerpo -> . funcion cuerpo
    (15) cuerpo -> . asignacion cuerpo
    (16) cuerpo -> . while cuerpo
    (17) cuerpo -> . for cuerpo
    (18) cuerpo -> . if cuerpo
    (19) cuerpo -> . match cuerpo
    (224) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (225) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif
    (226) else -> . ELSE LLAVE_I contenido LLAVE_D
    (227) else -> . elseif else
    (116) funcion -> . DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (117) funcion -> . DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
    (124) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (125) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (126) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (127) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (128) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (129) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (130) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (131) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (132) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (133) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (134) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    $end            reduce using rule 13 (cuerpo -> if .)
    LLAVE_D         reduce using rule 13 (cuerpo -> if .)
    ELSE            shift and go to state 49
    DEF             shift and go to state 15
    VARIABLE        shift and go to state 3
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32

    if                             shift and go to state 14
    cuerpo                         shift and go to state 46
    elseif                         shift and go to state 47
    else                           shift and go to state 48
    funcion                        shift and go to state 6
    funcall                        shift and go to state 7
    impresion                      shift and go to state 8
    entrada                        shift and go to state 9
    asignacion                     shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    match                          shift and go to state 13
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 15

    (116) funcion -> DEF . VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (117) funcion -> DEF . VARIABLE parametro LLAVE_I contenido LLAVE_D
    (124) funcion -> DEF . VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (125) funcion -> DEF . VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (126) funcion -> DEF . VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (127) funcion -> DEF . VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (128) funcion -> DEF . VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (129) funcion -> DEF . VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (130) funcion -> DEF . VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (131) funcion -> DEF . VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (132) funcion -> DEF . VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (133) funcion -> DEF . VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (134) funcion -> DEF . VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D

    VARIABLE        shift and go to state 50


state 16

    (141) impresion -> PRINTLN . PAR_I valorI PAR_D

    PAR_I           shift and go to state 51


state 17

    (142) impresion -> PRINT . PAR_I valorI PAR_D

    PAR_I           shift and go to state 52


state 18

    (145) entrada -> READLINE . PAR_I PAR_D

    PAR_I           shift and go to state 53


state 19

    (45) asignacion -> VAR . VARIABLE IGUAL VARIABLE
    (47) asignacion -> VAR . VARIABLE IGUAL aritmetica
    (49) asignacion -> VAR . VARIABLE IGUAL returnfun
    (173) asignacion -> VAR . VARIABLE IGUAL tuple
    (276) asignacion -> VAR . VARIABLE DOBLE_PUNTO dectupla
    (60) asignacionLong -> VAR . VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> VAR . VARIABLE IGUAL longvalues
    (299) asignacionLong -> VAR . VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> VAR . VARIABLE IGUAL INT
    (63) asignacionInt -> VAR . VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> VAR . VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> VAR . VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> VAR . VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> VAR . VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> VAR . VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> VAR . VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> VAR . VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> VAR . VARIABLE IGUAL STRING
    (73) asignacionString -> VAR . VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> VAR . VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> VAR . VARIABLE IGUAL CHAR
    (79) asignacionChar -> VAR . VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> VAR . VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> VAR . VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> VAR . VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> VAR . VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> VAR . VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> VAR . VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (270) arrayInt -> VAR . VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> VAR . VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VARIABLE        shift and go to state 54


state 20

    (46) asignacion -> VAL . VARIABLE IGUAL VARIABLE
    (48) asignacion -> VAL . VARIABLE IGUAL aritmetica
    (50) asignacion -> VAL . VARIABLE IGUAL returnfun
    (174) asignacion -> VAL . VARIABLE IGUAL tuple
    (277) asignacion -> VAL . VARIABLE DOBLE_PUNTO dectupla
    (61) asignacionLong -> VAL . VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (300) asignacionLong -> VAL . VARIABLE IGUAL longvalues
    (301) asignacionLong -> VAL . VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (64) asignacionInt -> VAL . VARIABLE IGUAL INT
    (65) asignacionInt -> VAL . VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (67) asignacionInt -> VAL . VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (69) asignacionFloat -> VAL . VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (306) asignacionFloat -> VAL . VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> VAL . VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (71) asignacionDouble -> VAL . VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> VAL . VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> VAL . VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (74) asignacionString -> VAL . VARIABLE IGUAL STRING
    (75) asignacionString -> VAL . VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (77) asignacionString -> VAL . VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (80) asignacionChar -> VAL . VARIABLE IGUAL CHAR
    (81) asignacionChar -> VAL . VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (83) asignacionChar -> VAL . VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (86) asignacionBoolean -> VAL . VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> VAL . VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (89) asignacionBoolean -> VAL . VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (163) array -> VAL . VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> VAL . VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (167) list -> VAL . VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> VAL . VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> VAL . VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D

    VARIABLE        shift and go to state 55


state 21

    (51) asignacion -> asignacionLong .

    DEF             reduce using rule 51 (asignacion -> asignacionLong .)
    VARIABLE        reduce using rule 51 (asignacion -> asignacionLong .)
    PRINTLN         reduce using rule 51 (asignacion -> asignacionLong .)
    PRINT           reduce using rule 51 (asignacion -> asignacionLong .)
    READLINE        reduce using rule 51 (asignacion -> asignacionLong .)
    VAR             reduce using rule 51 (asignacion -> asignacionLong .)
    VAL             reduce using rule 51 (asignacion -> asignacionLong .)
    WHILE           reduce using rule 51 (asignacion -> asignacionLong .)
    FOR             reduce using rule 51 (asignacion -> asignacionLong .)
    IF              reduce using rule 51 (asignacion -> asignacionLong .)
    $end            reduce using rule 51 (asignacion -> asignacionLong .)
    LLAVE_D         reduce using rule 51 (asignacion -> asignacionLong .)
    INT             reduce using rule 51 (asignacion -> asignacionLong .)
    LONG            reduce using rule 51 (asignacion -> asignacionLong .)
    FLOAT           reduce using rule 51 (asignacion -> asignacionLong .)
    DOUBLE          reduce using rule 51 (asignacion -> asignacionLong .)
    RETURN          reduce using rule 51 (asignacion -> asignacionLong .)
    CASE            reduce using rule 51 (asignacion -> asignacionLong .)


state 22

    (52) asignacion -> asignacionInt .

    DEF             reduce using rule 52 (asignacion -> asignacionInt .)
    VARIABLE        reduce using rule 52 (asignacion -> asignacionInt .)
    PRINTLN         reduce using rule 52 (asignacion -> asignacionInt .)
    PRINT           reduce using rule 52 (asignacion -> asignacionInt .)
    READLINE        reduce using rule 52 (asignacion -> asignacionInt .)
    VAR             reduce using rule 52 (asignacion -> asignacionInt .)
    VAL             reduce using rule 52 (asignacion -> asignacionInt .)
    WHILE           reduce using rule 52 (asignacion -> asignacionInt .)
    FOR             reduce using rule 52 (asignacion -> asignacionInt .)
    IF              reduce using rule 52 (asignacion -> asignacionInt .)
    $end            reduce using rule 52 (asignacion -> asignacionInt .)
    LLAVE_D         reduce using rule 52 (asignacion -> asignacionInt .)
    INT             reduce using rule 52 (asignacion -> asignacionInt .)
    LONG            reduce using rule 52 (asignacion -> asignacionInt .)
    FLOAT           reduce using rule 52 (asignacion -> asignacionInt .)
    DOUBLE          reduce using rule 52 (asignacion -> asignacionInt .)
    RETURN          reduce using rule 52 (asignacion -> asignacionInt .)
    CASE            reduce using rule 52 (asignacion -> asignacionInt .)


state 23

    (53) asignacion -> asignacionFloat .

    DEF             reduce using rule 53 (asignacion -> asignacionFloat .)
    VARIABLE        reduce using rule 53 (asignacion -> asignacionFloat .)
    PRINTLN         reduce using rule 53 (asignacion -> asignacionFloat .)
    PRINT           reduce using rule 53 (asignacion -> asignacionFloat .)
    READLINE        reduce using rule 53 (asignacion -> asignacionFloat .)
    VAR             reduce using rule 53 (asignacion -> asignacionFloat .)
    VAL             reduce using rule 53 (asignacion -> asignacionFloat .)
    WHILE           reduce using rule 53 (asignacion -> asignacionFloat .)
    FOR             reduce using rule 53 (asignacion -> asignacionFloat .)
    IF              reduce using rule 53 (asignacion -> asignacionFloat .)
    $end            reduce using rule 53 (asignacion -> asignacionFloat .)
    LLAVE_D         reduce using rule 53 (asignacion -> asignacionFloat .)
    INT             reduce using rule 53 (asignacion -> asignacionFloat .)
    LONG            reduce using rule 53 (asignacion -> asignacionFloat .)
    FLOAT           reduce using rule 53 (asignacion -> asignacionFloat .)
    DOUBLE          reduce using rule 53 (asignacion -> asignacionFloat .)
    RETURN          reduce using rule 53 (asignacion -> asignacionFloat .)
    CASE            reduce using rule 53 (asignacion -> asignacionFloat .)


state 24

    (54) asignacion -> asignacionDouble .

    DEF             reduce using rule 54 (asignacion -> asignacionDouble .)
    VARIABLE        reduce using rule 54 (asignacion -> asignacionDouble .)
    PRINTLN         reduce using rule 54 (asignacion -> asignacionDouble .)
    PRINT           reduce using rule 54 (asignacion -> asignacionDouble .)
    READLINE        reduce using rule 54 (asignacion -> asignacionDouble .)
    VAR             reduce using rule 54 (asignacion -> asignacionDouble .)
    VAL             reduce using rule 54 (asignacion -> asignacionDouble .)
    WHILE           reduce using rule 54 (asignacion -> asignacionDouble .)
    FOR             reduce using rule 54 (asignacion -> asignacionDouble .)
    IF              reduce using rule 54 (asignacion -> asignacionDouble .)
    $end            reduce using rule 54 (asignacion -> asignacionDouble .)
    LLAVE_D         reduce using rule 54 (asignacion -> asignacionDouble .)
    INT             reduce using rule 54 (asignacion -> asignacionDouble .)
    LONG            reduce using rule 54 (asignacion -> asignacionDouble .)
    FLOAT           reduce using rule 54 (asignacion -> asignacionDouble .)
    DOUBLE          reduce using rule 54 (asignacion -> asignacionDouble .)
    RETURN          reduce using rule 54 (asignacion -> asignacionDouble .)
    CASE            reduce using rule 54 (asignacion -> asignacionDouble .)


state 25

    (55) asignacion -> asignacionString .

    DEF             reduce using rule 55 (asignacion -> asignacionString .)
    VARIABLE        reduce using rule 55 (asignacion -> asignacionString .)
    PRINTLN         reduce using rule 55 (asignacion -> asignacionString .)
    PRINT           reduce using rule 55 (asignacion -> asignacionString .)
    READLINE        reduce using rule 55 (asignacion -> asignacionString .)
    VAR             reduce using rule 55 (asignacion -> asignacionString .)
    VAL             reduce using rule 55 (asignacion -> asignacionString .)
    WHILE           reduce using rule 55 (asignacion -> asignacionString .)
    FOR             reduce using rule 55 (asignacion -> asignacionString .)
    IF              reduce using rule 55 (asignacion -> asignacionString .)
    $end            reduce using rule 55 (asignacion -> asignacionString .)
    LLAVE_D         reduce using rule 55 (asignacion -> asignacionString .)
    INT             reduce using rule 55 (asignacion -> asignacionString .)
    LONG            reduce using rule 55 (asignacion -> asignacionString .)
    FLOAT           reduce using rule 55 (asignacion -> asignacionString .)
    DOUBLE          reduce using rule 55 (asignacion -> asignacionString .)
    RETURN          reduce using rule 55 (asignacion -> asignacionString .)
    CASE            reduce using rule 55 (asignacion -> asignacionString .)


state 26

    (56) asignacion -> asignacionChar .

    DEF             reduce using rule 56 (asignacion -> asignacionChar .)
    VARIABLE        reduce using rule 56 (asignacion -> asignacionChar .)
    PRINTLN         reduce using rule 56 (asignacion -> asignacionChar .)
    PRINT           reduce using rule 56 (asignacion -> asignacionChar .)
    READLINE        reduce using rule 56 (asignacion -> asignacionChar .)
    VAR             reduce using rule 56 (asignacion -> asignacionChar .)
    VAL             reduce using rule 56 (asignacion -> asignacionChar .)
    WHILE           reduce using rule 56 (asignacion -> asignacionChar .)
    FOR             reduce using rule 56 (asignacion -> asignacionChar .)
    IF              reduce using rule 56 (asignacion -> asignacionChar .)
    $end            reduce using rule 56 (asignacion -> asignacionChar .)
    LLAVE_D         reduce using rule 56 (asignacion -> asignacionChar .)
    INT             reduce using rule 56 (asignacion -> asignacionChar .)
    LONG            reduce using rule 56 (asignacion -> asignacionChar .)
    FLOAT           reduce using rule 56 (asignacion -> asignacionChar .)
    DOUBLE          reduce using rule 56 (asignacion -> asignacionChar .)
    RETURN          reduce using rule 56 (asignacion -> asignacionChar .)
    CASE            reduce using rule 56 (asignacion -> asignacionChar .)


state 27

    (57) asignacion -> asignacionBoolean .

    DEF             reduce using rule 57 (asignacion -> asignacionBoolean .)
    VARIABLE        reduce using rule 57 (asignacion -> asignacionBoolean .)
    PRINTLN         reduce using rule 57 (asignacion -> asignacionBoolean .)
    PRINT           reduce using rule 57 (asignacion -> asignacionBoolean .)
    READLINE        reduce using rule 57 (asignacion -> asignacionBoolean .)
    VAR             reduce using rule 57 (asignacion -> asignacionBoolean .)
    VAL             reduce using rule 57 (asignacion -> asignacionBoolean .)
    WHILE           reduce using rule 57 (asignacion -> asignacionBoolean .)
    FOR             reduce using rule 57 (asignacion -> asignacionBoolean .)
    IF              reduce using rule 57 (asignacion -> asignacionBoolean .)
    $end            reduce using rule 57 (asignacion -> asignacionBoolean .)
    LLAVE_D         reduce using rule 57 (asignacion -> asignacionBoolean .)
    INT             reduce using rule 57 (asignacion -> asignacionBoolean .)
    LONG            reduce using rule 57 (asignacion -> asignacionBoolean .)
    FLOAT           reduce using rule 57 (asignacion -> asignacionBoolean .)
    DOUBLE          reduce using rule 57 (asignacion -> asignacionBoolean .)
    RETURN          reduce using rule 57 (asignacion -> asignacionBoolean .)
    CASE            reduce using rule 57 (asignacion -> asignacionBoolean .)


state 28

    (58) asignacion -> array .

    DEF             reduce using rule 58 (asignacion -> array .)
    VARIABLE        reduce using rule 58 (asignacion -> array .)
    PRINTLN         reduce using rule 58 (asignacion -> array .)
    PRINT           reduce using rule 58 (asignacion -> array .)
    READLINE        reduce using rule 58 (asignacion -> array .)
    VAR             reduce using rule 58 (asignacion -> array .)
    VAL             reduce using rule 58 (asignacion -> array .)
    WHILE           reduce using rule 58 (asignacion -> array .)
    FOR             reduce using rule 58 (asignacion -> array .)
    IF              reduce using rule 58 (asignacion -> array .)
    $end            reduce using rule 58 (asignacion -> array .)
    LLAVE_D         reduce using rule 58 (asignacion -> array .)
    INT             reduce using rule 58 (asignacion -> array .)
    LONG            reduce using rule 58 (asignacion -> array .)
    FLOAT           reduce using rule 58 (asignacion -> array .)
    DOUBLE          reduce using rule 58 (asignacion -> array .)
    RETURN          reduce using rule 58 (asignacion -> array .)
    CASE            reduce using rule 58 (asignacion -> array .)


state 29

    (59) asignacion -> list .

    DEF             reduce using rule 59 (asignacion -> list .)
    VARIABLE        reduce using rule 59 (asignacion -> list .)
    PRINTLN         reduce using rule 59 (asignacion -> list .)
    PRINT           reduce using rule 59 (asignacion -> list .)
    READLINE        reduce using rule 59 (asignacion -> list .)
    VAR             reduce using rule 59 (asignacion -> list .)
    VAL             reduce using rule 59 (asignacion -> list .)
    WHILE           reduce using rule 59 (asignacion -> list .)
    FOR             reduce using rule 59 (asignacion -> list .)
    IF              reduce using rule 59 (asignacion -> list .)
    $end            reduce using rule 59 (asignacion -> list .)
    LLAVE_D         reduce using rule 59 (asignacion -> list .)
    INT             reduce using rule 59 (asignacion -> list .)
    LONG            reduce using rule 59 (asignacion -> list .)
    FLOAT           reduce using rule 59 (asignacion -> list .)
    DOUBLE          reduce using rule 59 (asignacion -> list .)
    RETURN          reduce using rule 59 (asignacion -> list .)
    CASE            reduce using rule 59 (asignacion -> list .)


state 30

    (175) while -> WHILE . PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D

    PAR_I           shift and go to state 56


state 31

    (176) for -> FOR . PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> FOR . PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> FOR . PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> FOR . PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> FOR . PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> FOR . PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D

    PAR_I           shift and go to state 57


state 32

    (221) if -> IF . PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D

    PAR_I           shift and go to state 58


state 33

    (165) array -> arrayInt .

    DEF             reduce using rule 165 (array -> arrayInt .)
    VARIABLE        reduce using rule 165 (array -> arrayInt .)
    PRINTLN         reduce using rule 165 (array -> arrayInt .)
    PRINT           reduce using rule 165 (array -> arrayInt .)
    READLINE        reduce using rule 165 (array -> arrayInt .)
    VAR             reduce using rule 165 (array -> arrayInt .)
    VAL             reduce using rule 165 (array -> arrayInt .)
    WHILE           reduce using rule 165 (array -> arrayInt .)
    FOR             reduce using rule 165 (array -> arrayInt .)
    IF              reduce using rule 165 (array -> arrayInt .)
    $end            reduce using rule 165 (array -> arrayInt .)
    LLAVE_D         reduce using rule 165 (array -> arrayInt .)
    INT             reduce using rule 165 (array -> arrayInt .)
    LONG            reduce using rule 165 (array -> arrayInt .)
    FLOAT           reduce using rule 165 (array -> arrayInt .)
    DOUBLE          reduce using rule 165 (array -> arrayInt .)
    RETURN          reduce using rule 165 (array -> arrayInt .)
    CASE            reduce using rule 165 (array -> arrayInt .)


state 34

    (166) array -> arrayDouble .

    DEF             reduce using rule 166 (array -> arrayDouble .)
    VARIABLE        reduce using rule 166 (array -> arrayDouble .)
    PRINTLN         reduce using rule 166 (array -> arrayDouble .)
    PRINT           reduce using rule 166 (array -> arrayDouble .)
    READLINE        reduce using rule 166 (array -> arrayDouble .)
    VAR             reduce using rule 166 (array -> arrayDouble .)
    VAL             reduce using rule 166 (array -> arrayDouble .)
    WHILE           reduce using rule 166 (array -> arrayDouble .)
    FOR             reduce using rule 166 (array -> arrayDouble .)
    IF              reduce using rule 166 (array -> arrayDouble .)
    $end            reduce using rule 166 (array -> arrayDouble .)
    LLAVE_D         reduce using rule 166 (array -> arrayDouble .)
    INT             reduce using rule 166 (array -> arrayDouble .)
    LONG            reduce using rule 166 (array -> arrayDouble .)
    FLOAT           reduce using rule 166 (array -> arrayDouble .)
    DOUBLE          reduce using rule 166 (array -> arrayDouble .)
    RETURN          reduce using rule 166 (array -> arrayDouble .)
    CASE            reduce using rule 166 (array -> arrayDouble .)


state 35

    (1) inicio -> OBJECT VARIABLE . LLAVE_I cuerpo LLAVE_D

    LLAVE_I         shift and go to state 59


state 36

    (146) funcall -> VARIABLE varparen .
    (149) varparen -> varparen . PAR_I valores PAR_D
    (150) varparen -> varparen . PAR_I PAR_D

    $end            reduce using rule 146 (funcall -> VARIABLE varparen .)
    LLAVE_D         reduce using rule 146 (funcall -> VARIABLE varparen .)
    VAR             reduce using rule 146 (funcall -> VARIABLE varparen .)
    VAL             reduce using rule 146 (funcall -> VARIABLE varparen .)
    VARIABLE        reduce using rule 146 (funcall -> VARIABLE varparen .)
    PRINTLN         reduce using rule 146 (funcall -> VARIABLE varparen .)
    PRINT           reduce using rule 146 (funcall -> VARIABLE varparen .)
    READLINE        reduce using rule 146 (funcall -> VARIABLE varparen .)
    WHILE           reduce using rule 146 (funcall -> VARIABLE varparen .)
    FOR             reduce using rule 146 (funcall -> VARIABLE varparen .)
    IF              reduce using rule 146 (funcall -> VARIABLE varparen .)
    INT             reduce using rule 146 (funcall -> VARIABLE varparen .)
    LONG            reduce using rule 146 (funcall -> VARIABLE varparen .)
    FLOAT           reduce using rule 146 (funcall -> VARIABLE varparen .)
    DOUBLE          reduce using rule 146 (funcall -> VARIABLE varparen .)
    PUNTO           reduce using rule 146 (funcall -> VARIABLE varparen .)
    DEF             reduce using rule 146 (funcall -> VARIABLE varparen .)
    RETURN          reduce using rule 146 (funcall -> VARIABLE varparen .)
    CASE            reduce using rule 146 (funcall -> VARIABLE varparen .)
    PAR_I           shift and go to state 60


state 37

    (182) match -> VARIABLE MATCH . LLAVE_I cases LLAVE_D

    LLAVE_I         shift and go to state 61


state 38

    (147) varparen -> PAR_I . valores PAR_D
    (148) varparen -> PAR_I . PAR_D
    (170) valores -> . valor
    (171) valores -> . valor COMA valores
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    PAR_D           shift and go to state 63
    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valores                        shift and go to state 62
    valor                          shift and go to state 64
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 39

    (2) inicio -> IMPORT io . inicio
    (1) inicio -> . OBJECT VARIABLE LLAVE_I cuerpo LLAVE_D
    (2) inicio -> . IMPORT io inicio
    (3) inicio -> . cuerpo
    (5) cuerpo -> . funcion
    (6) cuerpo -> . funcall
    (7) cuerpo -> . impresion
    (8) cuerpo -> . entrada
    (9) cuerpo -> . asignacion
    (10) cuerpo -> . while
    (11) cuerpo -> . for
    (12) cuerpo -> . match
    (13) cuerpo -> . if
    (14) cuerpo -> . funcion cuerpo
    (15) cuerpo -> . asignacion cuerpo
    (16) cuerpo -> . while cuerpo
    (17) cuerpo -> . for cuerpo
    (18) cuerpo -> . if cuerpo
    (19) cuerpo -> . match cuerpo
    (116) funcion -> . DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (117) funcion -> . DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
    (124) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (125) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (126) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (127) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (128) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (129) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (130) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (131) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (132) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (133) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (134) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    OBJECT          shift and go to state 2
    IMPORT          shift and go to state 5
    DEF             shift and go to state 15
    VARIABLE        shift and go to state 3
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32

    inicio                         shift and go to state 76
    cuerpo                         shift and go to state 4
    funcion                        shift and go to state 6
    funcall                        shift and go to state 7
    impresion                      shift and go to state 8
    entrada                        shift and go to state 9
    asignacion                     shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    match                          shift and go to state 13
    if                             shift and go to state 14
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 40

    (4) io -> VARIABLE . PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE

    PUNTO           shift and go to state 77


state 41

    (14) cuerpo -> funcion cuerpo .

    $end            reduce using rule 14 (cuerpo -> funcion cuerpo .)
    LLAVE_D         reduce using rule 14 (cuerpo -> funcion cuerpo .)


state 42

    (15) cuerpo -> asignacion cuerpo .

    $end            reduce using rule 15 (cuerpo -> asignacion cuerpo .)
    LLAVE_D         reduce using rule 15 (cuerpo -> asignacion cuerpo .)


state 43

    (16) cuerpo -> while cuerpo .

    $end            reduce using rule 16 (cuerpo -> while cuerpo .)
    LLAVE_D         reduce using rule 16 (cuerpo -> while cuerpo .)


state 44

    (17) cuerpo -> for cuerpo .

    $end            reduce using rule 17 (cuerpo -> for cuerpo .)
    LLAVE_D         reduce using rule 17 (cuerpo -> for cuerpo .)


state 45

    (19) cuerpo -> match cuerpo .

    $end            reduce using rule 19 (cuerpo -> match cuerpo .)
    LLAVE_D         reduce using rule 19 (cuerpo -> match cuerpo .)


state 46

    (18) cuerpo -> if cuerpo .

    $end            reduce using rule 18 (cuerpo -> if cuerpo .)
    LLAVE_D         reduce using rule 18 (cuerpo -> if cuerpo .)


state 47

    (222) if -> if elseif .
    (227) else -> elseif . else
    (226) else -> . ELSE LLAVE_I contenido LLAVE_D
    (227) else -> . elseif else
    (224) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (225) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif

  ! shift/reduce conflict for ELSE resolved as shift
    DEF             reduce using rule 222 (if -> if elseif .)
    VARIABLE        reduce using rule 222 (if -> if elseif .)
    PRINTLN         reduce using rule 222 (if -> if elseif .)
    PRINT           reduce using rule 222 (if -> if elseif .)
    READLINE        reduce using rule 222 (if -> if elseif .)
    VAR             reduce using rule 222 (if -> if elseif .)
    VAL             reduce using rule 222 (if -> if elseif .)
    WHILE           reduce using rule 222 (if -> if elseif .)
    FOR             reduce using rule 222 (if -> if elseif .)
    IF              reduce using rule 222 (if -> if elseif .)
    $end            reduce using rule 222 (if -> if elseif .)
    LLAVE_D         reduce using rule 222 (if -> if elseif .)
    INT             reduce using rule 222 (if -> if elseif .)
    LONG            reduce using rule 222 (if -> if elseif .)
    FLOAT           reduce using rule 222 (if -> if elseif .)
    DOUBLE          reduce using rule 222 (if -> if elseif .)
    RETURN          reduce using rule 222 (if -> if elseif .)
    ELSE            shift and go to state 80

  ! ELSE            [ reduce using rule 222 (if -> if elseif .) ]

    elseif                         shift and go to state 78
    else                           shift and go to state 79

state 48

    (223) if -> if else .

    ELSE            reduce using rule 223 (if -> if else .)
    DEF             reduce using rule 223 (if -> if else .)
    VARIABLE        reduce using rule 223 (if -> if else .)
    PRINTLN         reduce using rule 223 (if -> if else .)
    PRINT           reduce using rule 223 (if -> if else .)
    READLINE        reduce using rule 223 (if -> if else .)
    VAR             reduce using rule 223 (if -> if else .)
    VAL             reduce using rule 223 (if -> if else .)
    WHILE           reduce using rule 223 (if -> if else .)
    FOR             reduce using rule 223 (if -> if else .)
    IF              reduce using rule 223 (if -> if else .)
    $end            reduce using rule 223 (if -> if else .)
    LLAVE_D         reduce using rule 223 (if -> if else .)
    INT             reduce using rule 223 (if -> if else .)
    LONG            reduce using rule 223 (if -> if else .)
    FLOAT           reduce using rule 223 (if -> if else .)
    DOUBLE          reduce using rule 223 (if -> if else .)
    RETURN          reduce using rule 223 (if -> if else .)


state 49

    (224) elseif -> ELSE . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (225) elseif -> ELSE . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif
    (226) else -> ELSE . LLAVE_I contenido LLAVE_D

    IF              shift and go to state 81
    LLAVE_I         shift and go to state 82


state 50

    (116) funcion -> DEF VARIABLE . parametro IGUAL LLAVE_I contenido LLAVE_D
    (117) funcion -> DEF VARIABLE . parametro LLAVE_I contenido LLAVE_D
    (124) funcion -> DEF VARIABLE . parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (125) funcion -> DEF VARIABLE . parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (126) funcion -> DEF VARIABLE . parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (127) funcion -> DEF VARIABLE . parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (128) funcion -> DEF VARIABLE . parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (129) funcion -> DEF VARIABLE . parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (130) funcion -> DEF VARIABLE . parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (131) funcion -> DEF VARIABLE . parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (132) funcion -> DEF VARIABLE . parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (133) funcion -> DEF VARIABLE . parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (134) funcion -> DEF VARIABLE . parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (120) parametro -> . parametros
    (121) parametro -> . PAR_I PAR_D
    (122) parametros -> . PAR_I declaracion PAR_D
    (123) parametros -> . PAR_I declaracion PAR_D parametros

    PAR_I           shift and go to state 85

    parametro                      shift and go to state 83
    parametros                     shift and go to state 84

state 51

    (141) impresion -> PRINTLN PAR_I . valorI PAR_D
    (143) valorI -> . valor MAS valorI
    (144) valorI -> . valor
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valorI                         shift and go to state 86
    valor                          shift and go to state 87
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 52

    (142) impresion -> PRINT PAR_I . valorI PAR_D
    (143) valorI -> . valor MAS valorI
    (144) valorI -> . valor
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valorI                         shift and go to state 88
    valor                          shift and go to state 87
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 53

    (145) entrada -> READLINE PAR_I . PAR_D

    PAR_D           shift and go to state 89


state 54

    (45) asignacion -> VAR VARIABLE . IGUAL VARIABLE
    (47) asignacion -> VAR VARIABLE . IGUAL aritmetica
    (49) asignacion -> VAR VARIABLE . IGUAL returnfun
    (173) asignacion -> VAR VARIABLE . IGUAL tuple
    (276) asignacion -> VAR VARIABLE . DOBLE_PUNTO dectupla
    (60) asignacionLong -> VAR VARIABLE . DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> VAR VARIABLE . IGUAL longvalues
    (299) asignacionLong -> VAR VARIABLE . DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> VAR VARIABLE . IGUAL INT
    (63) asignacionInt -> VAR VARIABLE . DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> VAR VARIABLE . DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> VAR VARIABLE . DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> VAR VARIABLE . IGUAL floatvalues
    (305) asignacionFloat -> VAR VARIABLE . DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> VAR VARIABLE . DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> VAR VARIABLE . IGUAL doublevalues
    (311) asignacionDouble -> VAR VARIABLE . DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> VAR VARIABLE . IGUAL STRING
    (73) asignacionString -> VAR VARIABLE . DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> VAR VARIABLE . DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> VAR VARIABLE . IGUAL CHAR
    (79) asignacionChar -> VAR VARIABLE . DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> VAR VARIABLE . DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> VAR VARIABLE . IGUAL booleanos
    (85) asignacionBoolean -> VAR VARIABLE . DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> VAR VARIABLE . DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> VAR VARIABLE . IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> VAR VARIABLE . DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (270) arrayInt -> VAR VARIABLE . DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> VAR VARIABLE . DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    IGUAL           shift and go to state 90
    DOBLE_PUNTO     shift and go to state 91


state 55

    (46) asignacion -> VAL VARIABLE . IGUAL VARIABLE
    (48) asignacion -> VAL VARIABLE . IGUAL aritmetica
    (50) asignacion -> VAL VARIABLE . IGUAL returnfun
    (174) asignacion -> VAL VARIABLE . IGUAL tuple
    (277) asignacion -> VAL VARIABLE . DOBLE_PUNTO dectupla
    (61) asignacionLong -> VAL VARIABLE . DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (300) asignacionLong -> VAL VARIABLE . IGUAL longvalues
    (301) asignacionLong -> VAL VARIABLE . DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (64) asignacionInt -> VAL VARIABLE . IGUAL INT
    (65) asignacionInt -> VAL VARIABLE . DOBLE_PUNTO INTCLASS IGUAL INT
    (67) asignacionInt -> VAL VARIABLE . DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (69) asignacionFloat -> VAL VARIABLE . DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (306) asignacionFloat -> VAL VARIABLE . IGUAL floatvalues
    (307) asignacionFloat -> VAL VARIABLE . DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (71) asignacionDouble -> VAL VARIABLE . DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> VAL VARIABLE . IGUAL doublevalues
    (313) asignacionDouble -> VAL VARIABLE . DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (74) asignacionString -> VAL VARIABLE . IGUAL STRING
    (75) asignacionString -> VAL VARIABLE . DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (77) asignacionString -> VAL VARIABLE . DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (80) asignacionChar -> VAL VARIABLE . IGUAL CHAR
    (81) asignacionChar -> VAL VARIABLE . DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (83) asignacionChar -> VAL VARIABLE . DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (86) asignacionBoolean -> VAL VARIABLE . IGUAL booleanos
    (87) asignacionBoolean -> VAL VARIABLE . DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (89) asignacionBoolean -> VAL VARIABLE . DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (163) array -> VAL VARIABLE . IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> VAL VARIABLE . DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (167) list -> VAL VARIABLE . IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> VAL VARIABLE . DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> VAL VARIABLE . DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D

    IGUAL           shift and go to state 92
    DOBLE_PUNTO     shift and go to state 93


state 56

    (175) while -> WHILE PAR_I . condicional PAR_D LLAVE_I contenido LLAVE_D
    (228) condicional -> . valorC logicos condicional
    (229) condicional -> . valorC
    (230) valorC -> . VARIABLE
    (231) valorC -> . booleanos
    (232) valorC -> . relacional
    (233) valorC -> . NOT VARIABLE
    (234) valorC -> . NOT booleanos
    (235) valorC -> . NOT relacional
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE
    (239) relacional -> . numeros comparacion numeros
    (240) relacional -> . aritmetica comparacion aritmetica
    (241) relacional -> . aritmetica comparacion numeros
    (242) relacional -> . numeros comparacion aritmetica
    (243) relacional -> . booleanos comparacion booleanos
    (244) relacional -> . STRING comparacion STRING
    (245) relacional -> . CHAR comparacion CHAR
    (246) relacional -> . VARIABLE comparacion numeros
    (247) relacional -> . numeros comparacion VARIABLE
    (248) relacional -> . VARIABLE comparacion booleanos
    (249) relacional -> . booleanos comparacion VARIABLE
    (250) relacional -> . VARIABLE comparacion STRING
    (251) relacional -> . STRING comparacion VARIABLE
    (252) relacional -> . VARIABLE comparacion CHAR
    (253) relacional -> . CHAR comparacion VARIABLE
    (254) relacional -> . VARIABLE comparacion VARIABLE
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE

    VARIABLE        shift and go to state 96
    NOT             shift and go to state 99
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    STRING          shift and go to state 102
    CHAR            shift and go to state 103
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    condicional                    shift and go to state 94
    valorC                         shift and go to state 95
    booleanos                      shift and go to state 97
    relacional                     shift and go to state 98
    numeros                        shift and go to state 100
    aritmetica                     shift and go to state 101

state 57

    (176) for -> FOR PAR_I . VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> FOR PAR_I . VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> FOR PAR_I . VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> FOR PAR_I . VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> FOR PAR_I . VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> FOR PAR_I . VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D

    VAR             shift and go to state 104
    VARIABLE        shift and go to state 105


state 58

    (221) if -> IF PAR_I . condicional PAR_D LLAVE_I contenido LLAVE_D
    (228) condicional -> . valorC logicos condicional
    (229) condicional -> . valorC
    (230) valorC -> . VARIABLE
    (231) valorC -> . booleanos
    (232) valorC -> . relacional
    (233) valorC -> . NOT VARIABLE
    (234) valorC -> . NOT booleanos
    (235) valorC -> . NOT relacional
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE
    (239) relacional -> . numeros comparacion numeros
    (240) relacional -> . aritmetica comparacion aritmetica
    (241) relacional -> . aritmetica comparacion numeros
    (242) relacional -> . numeros comparacion aritmetica
    (243) relacional -> . booleanos comparacion booleanos
    (244) relacional -> . STRING comparacion STRING
    (245) relacional -> . CHAR comparacion CHAR
    (246) relacional -> . VARIABLE comparacion numeros
    (247) relacional -> . numeros comparacion VARIABLE
    (248) relacional -> . VARIABLE comparacion booleanos
    (249) relacional -> . booleanos comparacion VARIABLE
    (250) relacional -> . VARIABLE comparacion STRING
    (251) relacional -> . STRING comparacion VARIABLE
    (252) relacional -> . VARIABLE comparacion CHAR
    (253) relacional -> . CHAR comparacion VARIABLE
    (254) relacional -> . VARIABLE comparacion VARIABLE
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE

    VARIABLE        shift and go to state 96
    NOT             shift and go to state 99
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    STRING          shift and go to state 102
    CHAR            shift and go to state 103
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    condicional                    shift and go to state 106
    valorC                         shift and go to state 95
    booleanos                      shift and go to state 97
    relacional                     shift and go to state 98
    numeros                        shift and go to state 100
    aritmetica                     shift and go to state 101

state 59

    (1) inicio -> OBJECT VARIABLE LLAVE_I . cuerpo LLAVE_D
    (5) cuerpo -> . funcion
    (6) cuerpo -> . funcall
    (7) cuerpo -> . impresion
    (8) cuerpo -> . entrada
    (9) cuerpo -> . asignacion
    (10) cuerpo -> . while
    (11) cuerpo -> . for
    (12) cuerpo -> . match
    (13) cuerpo -> . if
    (14) cuerpo -> . funcion cuerpo
    (15) cuerpo -> . asignacion cuerpo
    (16) cuerpo -> . while cuerpo
    (17) cuerpo -> . for cuerpo
    (18) cuerpo -> . if cuerpo
    (19) cuerpo -> . match cuerpo
    (116) funcion -> . DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (117) funcion -> . DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
    (124) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (125) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (126) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (127) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (128) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (129) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (130) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (131) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (132) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (133) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (134) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    DEF             shift and go to state 15
    VARIABLE        shift and go to state 3
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32

    cuerpo                         shift and go to state 107
    funcion                        shift and go to state 6
    funcall                        shift and go to state 7
    impresion                      shift and go to state 8
    entrada                        shift and go to state 9
    asignacion                     shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    match                          shift and go to state 13
    if                             shift and go to state 14
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 60

    (149) varparen -> varparen PAR_I . valores PAR_D
    (150) varparen -> varparen PAR_I . PAR_D
    (170) valores -> . valor
    (171) valores -> . valor COMA valores
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    PAR_D           shift and go to state 109
    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valores                        shift and go to state 108
    valor                          shift and go to state 64
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 61

    (182) match -> VARIABLE MATCH LLAVE_I . cases LLAVE_D
    (183) cases -> . casesInt
    (184) cases -> . casesLgn
    (185) cases -> . casesFlt
    (186) cases -> . casesDob
    (187) cases -> . casesStr
    (188) cases -> . casesChar
    (189) cases -> . casesBool
    (191) casesInt -> . caseInt
    (192) casesInt -> . caseInt casesInt
    (193) casesInt -> . caseInt defcase
    (195) casesLgn -> . caseLgn
    (196) casesLgn -> . caseLgn casesLgn
    (197) casesLgn -> . caseLgn defcase
    (199) casesFlt -> . caseFlt
    (200) casesFlt -> . caseFlt casesFlt
    (201) casesFlt -> . caseFlt defcase
    (203) casesDob -> . caseDob
    (204) casesDob -> . caseDob casesDob
    (205) casesDob -> . caseDob defcase
    (207) casesStr -> . caseStr
    (208) casesStr -> . caseStr casesStr
    (209) casesStr -> . caseStr defcase
    (211) casesChar -> . caseChar
    (212) casesChar -> . caseChar casesChar
    (213) casesChar -> . caseChar defcase
    (215) casesBool -> . caseBool
    (216) casesBool -> . caseBool casesBool
    (217) casesBool -> . caseBool defcase
    (190) caseInt -> . CASE INT FUNCION_FLECHA codeBlock
    (194) caseLgn -> . CASE LONG FUNCION_FLECHA codeBlock
    (198) caseFlt -> . CASE FLOAT FUNCION_FLECHA codeBlock
    (202) caseDob -> . CASE DOUBLE FUNCION_FLECHA codeBlock
    (206) caseStr -> . CASE STRING FUNCION_FLECHA codeBlock
    (210) caseChar -> . CASE CHAR FUNCION_FLECHA codeBlock
    (214) caseBool -> . CASE booleanos FUNCION_FLECHA codeBlock

    CASE            shift and go to state 125

    cases                          shift and go to state 110
    casesInt                       shift and go to state 111
    casesLgn                       shift and go to state 112
    casesFlt                       shift and go to state 113
    casesDob                       shift and go to state 114
    casesStr                       shift and go to state 115
    casesChar                      shift and go to state 116
    casesBool                      shift and go to state 117
    caseInt                        shift and go to state 118
    caseLgn                        shift and go to state 119
    caseFlt                        shift and go to state 120
    caseDob                        shift and go to state 121
    caseStr                        shift and go to state 122
    caseChar                       shift and go to state 123
    caseBool                       shift and go to state 124

state 62

    (147) varparen -> PAR_I valores . PAR_D

    PAR_D           shift and go to state 126


state 63

    (148) varparen -> PAR_I PAR_D .

    PAR_I           reduce using rule 148 (varparen -> PAR_I PAR_D .)
    $end            reduce using rule 148 (varparen -> PAR_I PAR_D .)
    LLAVE_D         reduce using rule 148 (varparen -> PAR_I PAR_D .)
    VAR             reduce using rule 148 (varparen -> PAR_I PAR_D .)
    VAL             reduce using rule 148 (varparen -> PAR_I PAR_D .)
    VARIABLE        reduce using rule 148 (varparen -> PAR_I PAR_D .)
    PRINTLN         reduce using rule 148 (varparen -> PAR_I PAR_D .)
    PRINT           reduce using rule 148 (varparen -> PAR_I PAR_D .)
    READLINE        reduce using rule 148 (varparen -> PAR_I PAR_D .)
    WHILE           reduce using rule 148 (varparen -> PAR_I PAR_D .)
    FOR             reduce using rule 148 (varparen -> PAR_I PAR_D .)
    IF              reduce using rule 148 (varparen -> PAR_I PAR_D .)
    INT             reduce using rule 148 (varparen -> PAR_I PAR_D .)
    LONG            reduce using rule 148 (varparen -> PAR_I PAR_D .)
    FLOAT           reduce using rule 148 (varparen -> PAR_I PAR_D .)
    DOUBLE          reduce using rule 148 (varparen -> PAR_I PAR_D .)
    RETURN          reduce using rule 148 (varparen -> PAR_I PAR_D .)
    PUNTO           reduce using rule 148 (varparen -> PAR_I PAR_D .)
    DEF             reduce using rule 148 (varparen -> PAR_I PAR_D .)
    CASE            reduce using rule 148 (varparen -> PAR_I PAR_D .)


state 64

    (170) valores -> valor .
    (171) valores -> valor . COMA valores

    PAR_D           reduce using rule 170 (valores -> valor .)
    COMA            shift and go to state 127


state 65

    (103) valor -> STRING .

    COMA            reduce using rule 103 (valor -> STRING .)
    PAR_D           reduce using rule 103 (valor -> STRING .)
    MAS             reduce using rule 103 (valor -> STRING .)
    VAR             reduce using rule 103 (valor -> STRING .)
    VAL             reduce using rule 103 (valor -> STRING .)
    VARIABLE        reduce using rule 103 (valor -> STRING .)
    PRINTLN         reduce using rule 103 (valor -> STRING .)
    PRINT           reduce using rule 103 (valor -> STRING .)
    READLINE        reduce using rule 103 (valor -> STRING .)
    WHILE           reduce using rule 103 (valor -> STRING .)
    FOR             reduce using rule 103 (valor -> STRING .)
    IF              reduce using rule 103 (valor -> STRING .)
    INT             reduce using rule 103 (valor -> STRING .)
    LONG            reduce using rule 103 (valor -> STRING .)
    FLOAT           reduce using rule 103 (valor -> STRING .)
    DOUBLE          reduce using rule 103 (valor -> STRING .)
    LLAVE_D         reduce using rule 103 (valor -> STRING .)
    RETURN          reduce using rule 103 (valor -> STRING .)
    CASE            reduce using rule 103 (valor -> STRING .)


state 66

    (104) valor -> CHAR .

    COMA            reduce using rule 104 (valor -> CHAR .)
    PAR_D           reduce using rule 104 (valor -> CHAR .)
    MAS             reduce using rule 104 (valor -> CHAR .)
    VAR             reduce using rule 104 (valor -> CHAR .)
    VAL             reduce using rule 104 (valor -> CHAR .)
    VARIABLE        reduce using rule 104 (valor -> CHAR .)
    PRINTLN         reduce using rule 104 (valor -> CHAR .)
    PRINT           reduce using rule 104 (valor -> CHAR .)
    READLINE        reduce using rule 104 (valor -> CHAR .)
    WHILE           reduce using rule 104 (valor -> CHAR .)
    FOR             reduce using rule 104 (valor -> CHAR .)
    IF              reduce using rule 104 (valor -> CHAR .)
    INT             reduce using rule 104 (valor -> CHAR .)
    LONG            reduce using rule 104 (valor -> CHAR .)
    FLOAT           reduce using rule 104 (valor -> CHAR .)
    DOUBLE          reduce using rule 104 (valor -> CHAR .)
    LLAVE_D         reduce using rule 104 (valor -> CHAR .)
    RETURN          reduce using rule 104 (valor -> CHAR .)
    CASE            reduce using rule 104 (valor -> CHAR .)


state 67

    (105) valor -> VARIABLE .
    (108) valor -> VARIABLE . PAR_I VARIABLE PAR_D
    (109) valor -> VARIABLE . PAR_I INT PAR_D

    COMA            reduce using rule 105 (valor -> VARIABLE .)
    PAR_D           reduce using rule 105 (valor -> VARIABLE .)
    MAS             reduce using rule 105 (valor -> VARIABLE .)
    VAR             reduce using rule 105 (valor -> VARIABLE .)
    VAL             reduce using rule 105 (valor -> VARIABLE .)
    VARIABLE        reduce using rule 105 (valor -> VARIABLE .)
    PRINTLN         reduce using rule 105 (valor -> VARIABLE .)
    PRINT           reduce using rule 105 (valor -> VARIABLE .)
    READLINE        reduce using rule 105 (valor -> VARIABLE .)
    WHILE           reduce using rule 105 (valor -> VARIABLE .)
    FOR             reduce using rule 105 (valor -> VARIABLE .)
    IF              reduce using rule 105 (valor -> VARIABLE .)
    INT             reduce using rule 105 (valor -> VARIABLE .)
    LONG            reduce using rule 105 (valor -> VARIABLE .)
    FLOAT           reduce using rule 105 (valor -> VARIABLE .)
    DOUBLE          reduce using rule 105 (valor -> VARIABLE .)
    LLAVE_D         reduce using rule 105 (valor -> VARIABLE .)
    RETURN          reduce using rule 105 (valor -> VARIABLE .)
    CASE            reduce using rule 105 (valor -> VARIABLE .)
    PAR_I           shift and go to state 128


state 68

    (106) valor -> numeros .

    COMA            reduce using rule 106 (valor -> numeros .)
    PAR_D           reduce using rule 106 (valor -> numeros .)
    MAS             reduce using rule 106 (valor -> numeros .)
    VAR             reduce using rule 106 (valor -> numeros .)
    VAL             reduce using rule 106 (valor -> numeros .)
    VARIABLE        reduce using rule 106 (valor -> numeros .)
    PRINTLN         reduce using rule 106 (valor -> numeros .)
    PRINT           reduce using rule 106 (valor -> numeros .)
    READLINE        reduce using rule 106 (valor -> numeros .)
    WHILE           reduce using rule 106 (valor -> numeros .)
    FOR             reduce using rule 106 (valor -> numeros .)
    IF              reduce using rule 106 (valor -> numeros .)
    INT             reduce using rule 106 (valor -> numeros .)
    LONG            reduce using rule 106 (valor -> numeros .)
    FLOAT           reduce using rule 106 (valor -> numeros .)
    DOUBLE          reduce using rule 106 (valor -> numeros .)
    LLAVE_D         reduce using rule 106 (valor -> numeros .)
    RETURN          reduce using rule 106 (valor -> numeros .)
    CASE            reduce using rule 106 (valor -> numeros .)


state 69

    (107) valor -> booleanos .

    COMA            reduce using rule 107 (valor -> booleanos .)
    PAR_D           reduce using rule 107 (valor -> booleanos .)
    MAS             reduce using rule 107 (valor -> booleanos .)
    VAR             reduce using rule 107 (valor -> booleanos .)
    VAL             reduce using rule 107 (valor -> booleanos .)
    VARIABLE        reduce using rule 107 (valor -> booleanos .)
    PRINTLN         reduce using rule 107 (valor -> booleanos .)
    PRINT           reduce using rule 107 (valor -> booleanos .)
    READLINE        reduce using rule 107 (valor -> booleanos .)
    WHILE           reduce using rule 107 (valor -> booleanos .)
    FOR             reduce using rule 107 (valor -> booleanos .)
    IF              reduce using rule 107 (valor -> booleanos .)
    INT             reduce using rule 107 (valor -> booleanos .)
    LONG            reduce using rule 107 (valor -> booleanos .)
    FLOAT           reduce using rule 107 (valor -> booleanos .)
    DOUBLE          reduce using rule 107 (valor -> booleanos .)
    LLAVE_D         reduce using rule 107 (valor -> booleanos .)
    RETURN          reduce using rule 107 (valor -> booleanos .)
    CASE            reduce using rule 107 (valor -> booleanos .)


state 70

    (112) numeros -> INT .

    COMA            reduce using rule 112 (numeros -> INT .)
    PAR_D           reduce using rule 112 (numeros -> INT .)
    MAS             reduce using rule 112 (numeros -> INT .)
    IGUAL_COMPARACION reduce using rule 112 (numeros -> INT .)
    DIFERENTE       reduce using rule 112 (numeros -> INT .)
    MAYOR           reduce using rule 112 (numeros -> INT .)
    MENOR           reduce using rule 112 (numeros -> INT .)
    MENOS           reduce using rule 112 (numeros -> INT .)
    MULTIPLICACION  reduce using rule 112 (numeros -> INT .)
    DIVISION        reduce using rule 112 (numeros -> INT .)
    MOD             reduce using rule 112 (numeros -> INT .)
    AND             reduce using rule 112 (numeros -> INT .)
    OR              reduce using rule 112 (numeros -> INT .)
    NOT             reduce using rule 112 (numeros -> INT .)
    VAR             reduce using rule 112 (numeros -> INT .)
    VAL             reduce using rule 112 (numeros -> INT .)
    VARIABLE        reduce using rule 112 (numeros -> INT .)
    PRINTLN         reduce using rule 112 (numeros -> INT .)
    PRINT           reduce using rule 112 (numeros -> INT .)
    READLINE        reduce using rule 112 (numeros -> INT .)
    WHILE           reduce using rule 112 (numeros -> INT .)
    FOR             reduce using rule 112 (numeros -> INT .)
    IF              reduce using rule 112 (numeros -> INT .)
    INT             reduce using rule 112 (numeros -> INT .)
    LONG            reduce using rule 112 (numeros -> INT .)
    FLOAT           reduce using rule 112 (numeros -> INT .)
    DOUBLE          reduce using rule 112 (numeros -> INT .)
    LLAVE_D         reduce using rule 112 (numeros -> INT .)
    DEF             reduce using rule 112 (numeros -> INT .)
    $end            reduce using rule 112 (numeros -> INT .)
    RETURN          reduce using rule 112 (numeros -> INT .)
    CASE            reduce using rule 112 (numeros -> INT .)


state 71

    (113) numeros -> LONG .

    COMA            reduce using rule 113 (numeros -> LONG .)
    PAR_D           reduce using rule 113 (numeros -> LONG .)
    MAS             reduce using rule 113 (numeros -> LONG .)
    IGUAL_COMPARACION reduce using rule 113 (numeros -> LONG .)
    DIFERENTE       reduce using rule 113 (numeros -> LONG .)
    MAYOR           reduce using rule 113 (numeros -> LONG .)
    MENOR           reduce using rule 113 (numeros -> LONG .)
    MENOS           reduce using rule 113 (numeros -> LONG .)
    MULTIPLICACION  reduce using rule 113 (numeros -> LONG .)
    DIVISION        reduce using rule 113 (numeros -> LONG .)
    MOD             reduce using rule 113 (numeros -> LONG .)
    AND             reduce using rule 113 (numeros -> LONG .)
    OR              reduce using rule 113 (numeros -> LONG .)
    NOT             reduce using rule 113 (numeros -> LONG .)
    VAR             reduce using rule 113 (numeros -> LONG .)
    VAL             reduce using rule 113 (numeros -> LONG .)
    VARIABLE        reduce using rule 113 (numeros -> LONG .)
    PRINTLN         reduce using rule 113 (numeros -> LONG .)
    PRINT           reduce using rule 113 (numeros -> LONG .)
    READLINE        reduce using rule 113 (numeros -> LONG .)
    WHILE           reduce using rule 113 (numeros -> LONG .)
    FOR             reduce using rule 113 (numeros -> LONG .)
    IF              reduce using rule 113 (numeros -> LONG .)
    INT             reduce using rule 113 (numeros -> LONG .)
    LONG            reduce using rule 113 (numeros -> LONG .)
    FLOAT           reduce using rule 113 (numeros -> LONG .)
    DOUBLE          reduce using rule 113 (numeros -> LONG .)
    LLAVE_D         reduce using rule 113 (numeros -> LONG .)
    DEF             reduce using rule 113 (numeros -> LONG .)
    $end            reduce using rule 113 (numeros -> LONG .)
    RETURN          reduce using rule 113 (numeros -> LONG .)
    CASE            reduce using rule 113 (numeros -> LONG .)


state 72

    (114) numeros -> FLOAT .

    COMA            reduce using rule 114 (numeros -> FLOAT .)
    PAR_D           reduce using rule 114 (numeros -> FLOAT .)
    MAS             reduce using rule 114 (numeros -> FLOAT .)
    IGUAL_COMPARACION reduce using rule 114 (numeros -> FLOAT .)
    DIFERENTE       reduce using rule 114 (numeros -> FLOAT .)
    MAYOR           reduce using rule 114 (numeros -> FLOAT .)
    MENOR           reduce using rule 114 (numeros -> FLOAT .)
    MENOS           reduce using rule 114 (numeros -> FLOAT .)
    MULTIPLICACION  reduce using rule 114 (numeros -> FLOAT .)
    DIVISION        reduce using rule 114 (numeros -> FLOAT .)
    MOD             reduce using rule 114 (numeros -> FLOAT .)
    AND             reduce using rule 114 (numeros -> FLOAT .)
    OR              reduce using rule 114 (numeros -> FLOAT .)
    NOT             reduce using rule 114 (numeros -> FLOAT .)
    VAR             reduce using rule 114 (numeros -> FLOAT .)
    VAL             reduce using rule 114 (numeros -> FLOAT .)
    VARIABLE        reduce using rule 114 (numeros -> FLOAT .)
    PRINTLN         reduce using rule 114 (numeros -> FLOAT .)
    PRINT           reduce using rule 114 (numeros -> FLOAT .)
    READLINE        reduce using rule 114 (numeros -> FLOAT .)
    WHILE           reduce using rule 114 (numeros -> FLOAT .)
    FOR             reduce using rule 114 (numeros -> FLOAT .)
    IF              reduce using rule 114 (numeros -> FLOAT .)
    INT             reduce using rule 114 (numeros -> FLOAT .)
    LONG            reduce using rule 114 (numeros -> FLOAT .)
    FLOAT           reduce using rule 114 (numeros -> FLOAT .)
    DOUBLE          reduce using rule 114 (numeros -> FLOAT .)
    LLAVE_D         reduce using rule 114 (numeros -> FLOAT .)
    DEF             reduce using rule 114 (numeros -> FLOAT .)
    $end            reduce using rule 114 (numeros -> FLOAT .)
    RETURN          reduce using rule 114 (numeros -> FLOAT .)
    CASE            reduce using rule 114 (numeros -> FLOAT .)


state 73

    (115) numeros -> DOUBLE .

    COMA            reduce using rule 115 (numeros -> DOUBLE .)
    PAR_D           reduce using rule 115 (numeros -> DOUBLE .)
    MAS             reduce using rule 115 (numeros -> DOUBLE .)
    IGUAL_COMPARACION reduce using rule 115 (numeros -> DOUBLE .)
    DIFERENTE       reduce using rule 115 (numeros -> DOUBLE .)
    MAYOR           reduce using rule 115 (numeros -> DOUBLE .)
    MENOR           reduce using rule 115 (numeros -> DOUBLE .)
    MENOS           reduce using rule 115 (numeros -> DOUBLE .)
    MULTIPLICACION  reduce using rule 115 (numeros -> DOUBLE .)
    DIVISION        reduce using rule 115 (numeros -> DOUBLE .)
    MOD             reduce using rule 115 (numeros -> DOUBLE .)
    AND             reduce using rule 115 (numeros -> DOUBLE .)
    OR              reduce using rule 115 (numeros -> DOUBLE .)
    NOT             reduce using rule 115 (numeros -> DOUBLE .)
    VAR             reduce using rule 115 (numeros -> DOUBLE .)
    VAL             reduce using rule 115 (numeros -> DOUBLE .)
    VARIABLE        reduce using rule 115 (numeros -> DOUBLE .)
    PRINTLN         reduce using rule 115 (numeros -> DOUBLE .)
    PRINT           reduce using rule 115 (numeros -> DOUBLE .)
    READLINE        reduce using rule 115 (numeros -> DOUBLE .)
    WHILE           reduce using rule 115 (numeros -> DOUBLE .)
    FOR             reduce using rule 115 (numeros -> DOUBLE .)
    IF              reduce using rule 115 (numeros -> DOUBLE .)
    INT             reduce using rule 115 (numeros -> DOUBLE .)
    LONG            reduce using rule 115 (numeros -> DOUBLE .)
    FLOAT           reduce using rule 115 (numeros -> DOUBLE .)
    DOUBLE          reduce using rule 115 (numeros -> DOUBLE .)
    LLAVE_D         reduce using rule 115 (numeros -> DOUBLE .)
    DEF             reduce using rule 115 (numeros -> DOUBLE .)
    $end            reduce using rule 115 (numeros -> DOUBLE .)
    RETURN          reduce using rule 115 (numeros -> DOUBLE .)
    CASE            reduce using rule 115 (numeros -> DOUBLE .)


state 74

    (110) booleanos -> TRUE .

    COMA            reduce using rule 110 (booleanos -> TRUE .)
    PAR_D           reduce using rule 110 (booleanos -> TRUE .)
    MAS             reduce using rule 110 (booleanos -> TRUE .)
    IGUAL_COMPARACION reduce using rule 110 (booleanos -> TRUE .)
    DIFERENTE       reduce using rule 110 (booleanos -> TRUE .)
    MAYOR           reduce using rule 110 (booleanos -> TRUE .)
    MENOR           reduce using rule 110 (booleanos -> TRUE .)
    AND             reduce using rule 110 (booleanos -> TRUE .)
    OR              reduce using rule 110 (booleanos -> TRUE .)
    NOT             reduce using rule 110 (booleanos -> TRUE .)
    DEF             reduce using rule 110 (booleanos -> TRUE .)
    VARIABLE        reduce using rule 110 (booleanos -> TRUE .)
    PRINTLN         reduce using rule 110 (booleanos -> TRUE .)
    PRINT           reduce using rule 110 (booleanos -> TRUE .)
    READLINE        reduce using rule 110 (booleanos -> TRUE .)
    VAR             reduce using rule 110 (booleanos -> TRUE .)
    VAL             reduce using rule 110 (booleanos -> TRUE .)
    WHILE           reduce using rule 110 (booleanos -> TRUE .)
    FOR             reduce using rule 110 (booleanos -> TRUE .)
    IF              reduce using rule 110 (booleanos -> TRUE .)
    $end            reduce using rule 110 (booleanos -> TRUE .)
    LLAVE_D         reduce using rule 110 (booleanos -> TRUE .)
    INT             reduce using rule 110 (booleanos -> TRUE .)
    LONG            reduce using rule 110 (booleanos -> TRUE .)
    FLOAT           reduce using rule 110 (booleanos -> TRUE .)
    DOUBLE          reduce using rule 110 (booleanos -> TRUE .)
    RETURN          reduce using rule 110 (booleanos -> TRUE .)
    CASE            reduce using rule 110 (booleanos -> TRUE .)
    FUNCION_FLECHA  reduce using rule 110 (booleanos -> TRUE .)


state 75

    (111) booleanos -> FLASE .

    COMA            reduce using rule 111 (booleanos -> FLASE .)
    PAR_D           reduce using rule 111 (booleanos -> FLASE .)
    MAS             reduce using rule 111 (booleanos -> FLASE .)
    IGUAL_COMPARACION reduce using rule 111 (booleanos -> FLASE .)
    DIFERENTE       reduce using rule 111 (booleanos -> FLASE .)
    MAYOR           reduce using rule 111 (booleanos -> FLASE .)
    MENOR           reduce using rule 111 (booleanos -> FLASE .)
    AND             reduce using rule 111 (booleanos -> FLASE .)
    OR              reduce using rule 111 (booleanos -> FLASE .)
    NOT             reduce using rule 111 (booleanos -> FLASE .)
    DEF             reduce using rule 111 (booleanos -> FLASE .)
    VARIABLE        reduce using rule 111 (booleanos -> FLASE .)
    PRINTLN         reduce using rule 111 (booleanos -> FLASE .)
    PRINT           reduce using rule 111 (booleanos -> FLASE .)
    READLINE        reduce using rule 111 (booleanos -> FLASE .)
    VAR             reduce using rule 111 (booleanos -> FLASE .)
    VAL             reduce using rule 111 (booleanos -> FLASE .)
    WHILE           reduce using rule 111 (booleanos -> FLASE .)
    FOR             reduce using rule 111 (booleanos -> FLASE .)
    IF              reduce using rule 111 (booleanos -> FLASE .)
    $end            reduce using rule 111 (booleanos -> FLASE .)
    LLAVE_D         reduce using rule 111 (booleanos -> FLASE .)
    INT             reduce using rule 111 (booleanos -> FLASE .)
    LONG            reduce using rule 111 (booleanos -> FLASE .)
    FLOAT           reduce using rule 111 (booleanos -> FLASE .)
    DOUBLE          reduce using rule 111 (booleanos -> FLASE .)
    RETURN          reduce using rule 111 (booleanos -> FLASE .)
    CASE            reduce using rule 111 (booleanos -> FLASE .)
    FUNCION_FLECHA  reduce using rule 111 (booleanos -> FLASE .)


state 76

    (2) inicio -> IMPORT io inicio .

    $end            reduce using rule 2 (inicio -> IMPORT io inicio .)


state 77

    (4) io -> VARIABLE PUNTO . VARIABLE PUNTO VARIABLE PUNTO READLINE

    VARIABLE        shift and go to state 129


state 78

    (227) else -> elseif . else
    (226) else -> . ELSE LLAVE_I contenido LLAVE_D
    (227) else -> . elseif else
    (224) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (225) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif

    ELSE            shift and go to state 80

    elseif                         shift and go to state 78
    else                           shift and go to state 79

state 79

    (227) else -> elseif else .

    ELSE            reduce using rule 227 (else -> elseif else .)
    DEF             reduce using rule 227 (else -> elseif else .)
    VARIABLE        reduce using rule 227 (else -> elseif else .)
    PRINTLN         reduce using rule 227 (else -> elseif else .)
    PRINT           reduce using rule 227 (else -> elseif else .)
    READLINE        reduce using rule 227 (else -> elseif else .)
    VAR             reduce using rule 227 (else -> elseif else .)
    VAL             reduce using rule 227 (else -> elseif else .)
    WHILE           reduce using rule 227 (else -> elseif else .)
    FOR             reduce using rule 227 (else -> elseif else .)
    IF              reduce using rule 227 (else -> elseif else .)
    $end            reduce using rule 227 (else -> elseif else .)
    LLAVE_D         reduce using rule 227 (else -> elseif else .)
    INT             reduce using rule 227 (else -> elseif else .)
    LONG            reduce using rule 227 (else -> elseif else .)
    FLOAT           reduce using rule 227 (else -> elseif else .)
    DOUBLE          reduce using rule 227 (else -> elseif else .)
    RETURN          reduce using rule 227 (else -> elseif else .)


state 80

    (226) else -> ELSE . LLAVE_I contenido LLAVE_D
    (224) elseif -> ELSE . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (225) elseif -> ELSE . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif

    LLAVE_I         shift and go to state 82
    IF              shift and go to state 81


state 81

    (224) elseif -> ELSE IF . PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (225) elseif -> ELSE IF . PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif

    PAR_I           shift and go to state 130


state 82

    (226) else -> ELSE LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 131
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 83

    (116) funcion -> DEF VARIABLE parametro . IGUAL LLAVE_I contenido LLAVE_D
    (117) funcion -> DEF VARIABLE parametro . LLAVE_I contenido LLAVE_D
    (124) funcion -> DEF VARIABLE parametro . dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (125) funcion -> DEF VARIABLE parametro . dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (126) funcion -> DEF VARIABLE parametro . dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (127) funcion -> DEF VARIABLE parametro . dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (128) funcion -> DEF VARIABLE parametro . dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (129) funcion -> DEF VARIABLE parametro . dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (130) funcion -> DEF VARIABLE parametro . dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (131) funcion -> DEF VARIABLE parametro . dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (132) funcion -> DEF VARIABLE parametro . dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (133) funcion -> DEF VARIABLE parametro . dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (134) funcion -> DEF VARIABLE parametro . dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (135) dectipo -> . DOBLE_PUNTO tipo
    (136) dectipoTupla -> . DOBLE_PUNTO PAR_I tipos PAR_D

    IGUAL           shift and go to state 144
    LLAVE_I         shift and go to state 145
    DOBLE_PUNTO     shift and go to state 148

    dectipo                        shift and go to state 146
    dectipoTupla                   shift and go to state 147

state 84

    (120) parametro -> parametros .

    IGUAL           reduce using rule 120 (parametro -> parametros .)
    LLAVE_I         reduce using rule 120 (parametro -> parametros .)
    DOBLE_PUNTO     reduce using rule 120 (parametro -> parametros .)


state 85

    (121) parametro -> PAR_I . PAR_D
    (122) parametros -> PAR_I . declaracion PAR_D
    (123) parametros -> PAR_I . declaracion PAR_D parametros
    (118) declaracion -> . VARIABLE DOBLE_PUNTO tipo
    (119) declaracion -> . VARIABLE DOBLE_PUNTO tipo IGUAL valor

    PAR_D           shift and go to state 149
    VARIABLE        shift and go to state 151

    declaracion                    shift and go to state 150

state 86

    (141) impresion -> PRINTLN PAR_I valorI . PAR_D

    PAR_D           shift and go to state 152


state 87

    (143) valorI -> valor . MAS valorI
    (144) valorI -> valor .

    MAS             shift and go to state 153
    PAR_D           reduce using rule 144 (valorI -> valor .)


state 88

    (142) impresion -> PRINT PAR_I valorI . PAR_D

    PAR_D           shift and go to state 154


state 89

    (145) entrada -> READLINE PAR_I PAR_D .

    $end            reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)
    LLAVE_D         reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)
    VAR             reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)
    VAL             reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)
    VARIABLE        reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)
    PRINTLN         reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)
    PRINT           reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)
    READLINE        reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)
    WHILE           reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)
    FOR             reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)
    IF              reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)
    INT             reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)
    LONG            reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)
    FLOAT           reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)
    DOUBLE          reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)
    PUNTO           reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)
    DEF             reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)
    RETURN          reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)
    CASE            reduce using rule 145 (entrada -> READLINE PAR_I PAR_D .)


state 90

    (45) asignacion -> VAR VARIABLE IGUAL . VARIABLE
    (47) asignacion -> VAR VARIABLE IGUAL . aritmetica
    (49) asignacion -> VAR VARIABLE IGUAL . returnfun
    (173) asignacion -> VAR VARIABLE IGUAL . tuple
    (298) asignacionLong -> VAR VARIABLE IGUAL . longvalues
    (62) asignacionInt -> VAR VARIABLE IGUAL . INT
    (304) asignacionFloat -> VAR VARIABLE IGUAL . floatvalues
    (310) asignacionDouble -> VAR VARIABLE IGUAL . doublevalues
    (72) asignacionString -> VAR VARIABLE IGUAL . STRING
    (78) asignacionChar -> VAR VARIABLE IGUAL . CHAR
    (84) asignacionBoolean -> VAR VARIABLE IGUAL . booleanos
    (161) array -> VAR VARIABLE IGUAL . ARRAYCLASS PAR_I valores PAR_D
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (151) returnfun -> . returnCastable
    (152) returnfun -> . castingcall
    (172) tuple -> . PAR_I valores PAR_D
    (302) longvalues -> . INT
    (303) longvalues -> . LONG
    (308) floatvalues -> . FLOAT
    (309) floatvalues -> . longvalues
    (314) doublevalues -> . DOUBLE
    (315) doublevalues -> . floatvalues
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (153) returnCastable -> . entrada
    (154) returnCastable -> . funcall
    (155) castingcall -> . returnCastable PUNTO castingfun
    (156) castingcall -> . VARIABLE PUNTO castingfun
    (145) entrada -> . READLINE PAR_I PAR_D
    (146) funcall -> . VARIABLE varparen

    VARIABLE        shift and go to state 155
    INT             shift and go to state 160
    STRING          shift and go to state 163
    CHAR            shift and go to state 164
    ARRAYCLASS      shift and go to state 166
    PAR_I           shift and go to state 167
    LONG            shift and go to state 170
    FLOAT           shift and go to state 171
    DOUBLE          shift and go to state 172
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    READLINE        shift and go to state 18

    aritmetica                     shift and go to state 156
    returnfun                      shift and go to state 157
    tuple                          shift and go to state 158
    longvalues                     shift and go to state 159
    floatvalues                    shift and go to state 161
    doublevalues                   shift and go to state 162
    booleanos                      shift and go to state 165
    numeros                        shift and go to state 143
    returnCastable                 shift and go to state 168
    castingcall                    shift and go to state 169
    entrada                        shift and go to state 173
    funcall                        shift and go to state 174

state 91

    (276) asignacion -> VAR VARIABLE DOBLE_PUNTO . dectupla
    (60) asignacionLong -> VAR VARIABLE DOBLE_PUNTO . LONGCLASS IGUAL VARIABLE
    (299) asignacionLong -> VAR VARIABLE DOBLE_PUNTO . LONGCLASS IGUAL longvalues
    (63) asignacionInt -> VAR VARIABLE DOBLE_PUNTO . INTCLASS IGUAL INT
    (66) asignacionInt -> VAR VARIABLE DOBLE_PUNTO . INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> VAR VARIABLE DOBLE_PUNTO . FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> VAR VARIABLE DOBLE_PUNTO . FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> VAR VARIABLE DOBLE_PUNTO . DOUBLECLASS IGUAL VARIABLE
    (311) asignacionDouble -> VAR VARIABLE DOBLE_PUNTO . DOUBLECLASS IGUAL doublevalues
    (73) asignacionString -> VAR VARIABLE DOBLE_PUNTO . STRINGCLASS IGUAL STRING
    (76) asignacionString -> VAR VARIABLE DOBLE_PUNTO . STRINGCLASS IGUAL VARIABLE
    (79) asignacionChar -> VAR VARIABLE DOBLE_PUNTO . CHARCLASS IGUAL CHAR
    (82) asignacionChar -> VAR VARIABLE DOBLE_PUNTO . CHARCLASS IGUAL VARIABLE
    (85) asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO . BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO . BOOLCLASS IGUAL VARIABLE
    (162) array -> VAR VARIABLE DOBLE_PUNTO . ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (270) arrayInt -> VAR VARIABLE DOBLE_PUNTO . ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> VAR VARIABLE DOBLE_PUNTO . ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D
    (278) dectupla -> . PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D
    (279) dectupla -> . PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D
    (280) dectupla -> . PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D
    (281) dectupla -> . PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D
    (282) dectupla -> . PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D
    (283) dectupla -> . PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D
    (284) dectupla -> . PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D
    (285) dectupla -> . PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D
    (286) dectupla -> . PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D
    (287) dectupla -> . PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D
    (288) dectupla -> . PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D
    (289) dectupla -> . PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D
    (290) dectupla -> . PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D
    (291) dectupla -> . PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D
    (292) dectupla -> . PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D
    (293) dectupla -> . PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D
    (294) dectupla -> . PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D
    (295) dectupla -> . PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D
    (296) dectupla -> . PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D
    (297) dectupla -> . PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D

    LONGCLASS       shift and go to state 176
    INTCLASS        shift and go to state 177
    FLOATCLASS      shift and go to state 178
    DOUBLECLASS     shift and go to state 179
    STRINGCLASS     shift and go to state 180
    CHARCLASS       shift and go to state 181
    BOOLCLASS       shift and go to state 182
    ARRAYCLASS      shift and go to state 183
    PAR_I           shift and go to state 184

    dectupla                       shift and go to state 175

state 92

    (46) asignacion -> VAL VARIABLE IGUAL . VARIABLE
    (48) asignacion -> VAL VARIABLE IGUAL . aritmetica
    (50) asignacion -> VAL VARIABLE IGUAL . returnfun
    (174) asignacion -> VAL VARIABLE IGUAL . tuple
    (300) asignacionLong -> VAL VARIABLE IGUAL . longvalues
    (64) asignacionInt -> VAL VARIABLE IGUAL . INT
    (306) asignacionFloat -> VAL VARIABLE IGUAL . floatvalues
    (312) asignacionDouble -> VAL VARIABLE IGUAL . doublevalues
    (74) asignacionString -> VAL VARIABLE IGUAL . STRING
    (80) asignacionChar -> VAL VARIABLE IGUAL . CHAR
    (86) asignacionBoolean -> VAL VARIABLE IGUAL . booleanos
    (163) array -> VAL VARIABLE IGUAL . ARRAYCLASS PAR_I valores PAR_D
    (167) list -> VAL VARIABLE IGUAL . LISTCLASS PAR_I valores PAR_D
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (151) returnfun -> . returnCastable
    (152) returnfun -> . castingcall
    (172) tuple -> . PAR_I valores PAR_D
    (302) longvalues -> . INT
    (303) longvalues -> . LONG
    (308) floatvalues -> . FLOAT
    (309) floatvalues -> . longvalues
    (314) doublevalues -> . DOUBLE
    (315) doublevalues -> . floatvalues
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (153) returnCastable -> . entrada
    (154) returnCastable -> . funcall
    (155) castingcall -> . returnCastable PUNTO castingfun
    (156) castingcall -> . VARIABLE PUNTO castingfun
    (145) entrada -> . READLINE PAR_I PAR_D
    (146) funcall -> . VARIABLE varparen

    VARIABLE        shift and go to state 185
    INT             shift and go to state 190
    STRING          shift and go to state 193
    CHAR            shift and go to state 194
    ARRAYCLASS      shift and go to state 196
    LISTCLASS       shift and go to state 197
    PAR_I           shift and go to state 167
    LONG            shift and go to state 170
    FLOAT           shift and go to state 171
    DOUBLE          shift and go to state 172
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    READLINE        shift and go to state 18

    aritmetica                     shift and go to state 186
    returnfun                      shift and go to state 187
    tuple                          shift and go to state 188
    longvalues                     shift and go to state 189
    floatvalues                    shift and go to state 191
    doublevalues                   shift and go to state 192
    booleanos                      shift and go to state 195
    numeros                        shift and go to state 143
    returnCastable                 shift and go to state 168
    castingcall                    shift and go to state 169
    entrada                        shift and go to state 173
    funcall                        shift and go to state 174

state 93

    (277) asignacion -> VAL VARIABLE DOBLE_PUNTO . dectupla
    (61) asignacionLong -> VAL VARIABLE DOBLE_PUNTO . LONGCLASS IGUAL VARIABLE
    (301) asignacionLong -> VAL VARIABLE DOBLE_PUNTO . LONGCLASS IGUAL longvalues
    (65) asignacionInt -> VAL VARIABLE DOBLE_PUNTO . INTCLASS IGUAL INT
    (67) asignacionInt -> VAL VARIABLE DOBLE_PUNTO . INTCLASS IGUAL VARIABLE
    (69) asignacionFloat -> VAL VARIABLE DOBLE_PUNTO . FLOATCLASS IGUAL VARIABLE
    (307) asignacionFloat -> VAL VARIABLE DOBLE_PUNTO . FLOATCLASS IGUAL floatvalues
    (71) asignacionDouble -> VAL VARIABLE DOBLE_PUNTO . DOUBLECLASS IGUAL VARIABLE
    (313) asignacionDouble -> VAL VARIABLE DOBLE_PUNTO . DOUBLECLASS IGUAL doublevalues
    (75) asignacionString -> VAL VARIABLE DOBLE_PUNTO . STRINGCLASS IGUAL STRING
    (77) asignacionString -> VAL VARIABLE DOBLE_PUNTO . STRINGCLASS IGUAL VARIABLE
    (81) asignacionChar -> VAL VARIABLE DOBLE_PUNTO . CHARCLASS IGUAL CHAR
    (83) asignacionChar -> VAL VARIABLE DOBLE_PUNTO . CHARCLASS IGUAL VARIABLE
    (87) asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO . BOOLCLASS IGUAL booleanos
    (89) asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO . BOOLCLASS IGUAL VARIABLE
    (164) array -> VAL VARIABLE DOBLE_PUNTO . ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (168) list -> VAL VARIABLE DOBLE_PUNTO . LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> VAL VARIABLE DOBLE_PUNTO . LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (278) dectupla -> . PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D
    (279) dectupla -> . PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D
    (280) dectupla -> . PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D
    (281) dectupla -> . PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D
    (282) dectupla -> . PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D
    (283) dectupla -> . PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D
    (284) dectupla -> . PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D
    (285) dectupla -> . PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D
    (286) dectupla -> . PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D
    (287) dectupla -> . PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D
    (288) dectupla -> . PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D
    (289) dectupla -> . PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D
    (290) dectupla -> . PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D
    (291) dectupla -> . PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D
    (292) dectupla -> . PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D
    (293) dectupla -> . PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D
    (294) dectupla -> . PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D
    (295) dectupla -> . PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D
    (296) dectupla -> . PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D
    (297) dectupla -> . PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D

    LONGCLASS       shift and go to state 199
    INTCLASS        shift and go to state 200
    FLOATCLASS      shift and go to state 201
    DOUBLECLASS     shift and go to state 202
    STRINGCLASS     shift and go to state 203
    CHARCLASS       shift and go to state 204
    BOOLCLASS       shift and go to state 205
    ARRAYCLASS      shift and go to state 206
    LISTCLASS       shift and go to state 207
    PAR_I           shift and go to state 184

    dectupla                       shift and go to state 198

state 94

    (175) while -> WHILE PAR_I condicional . PAR_D LLAVE_I contenido LLAVE_D

    PAR_D           shift and go to state 208


state 95

    (228) condicional -> valorC . logicos condicional
    (229) condicional -> valorC .
    (236) logicos -> . AND
    (237) logicos -> . OR
    (238) logicos -> . NOT

    PAR_D           reduce using rule 229 (condicional -> valorC .)
    AND             shift and go to state 210
    OR              shift and go to state 211
    NOT             shift and go to state 212

    logicos                        shift and go to state 209

state 96

    (230) valorC -> VARIABLE .
    (246) relacional -> VARIABLE . comparacion numeros
    (248) relacional -> VARIABLE . comparacion booleanos
    (250) relacional -> VARIABLE . comparacion STRING
    (252) relacional -> VARIABLE . comparacion CHAR
    (254) relacional -> VARIABLE . comparacion VARIABLE
    (260) aritmetica -> VARIABLE . aritmeticos numeros
    (262) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (255) comparacion -> . IGUAL_COMPARACION
    (256) comparacion -> . DIFERENTE
    (257) comparacion -> . MAYOR
    (258) comparacion -> . MENOR
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD

    AND             reduce using rule 230 (valorC -> VARIABLE .)
    OR              reduce using rule 230 (valorC -> VARIABLE .)
    NOT             reduce using rule 230 (valorC -> VARIABLE .)
    PAR_D           reduce using rule 230 (valorC -> VARIABLE .)
    IGUAL_COMPARACION shift and go to state 215
    DIFERENTE       shift and go to state 216
    MAYOR           shift and go to state 217
    MENOR           shift and go to state 218
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    comparacion                    shift and go to state 213
    aritmeticos                    shift and go to state 214

state 97

    (231) valorC -> booleanos .
    (243) relacional -> booleanos . comparacion booleanos
    (249) relacional -> booleanos . comparacion VARIABLE
    (255) comparacion -> . IGUAL_COMPARACION
    (256) comparacion -> . DIFERENTE
    (257) comparacion -> . MAYOR
    (258) comparacion -> . MENOR

    AND             reduce using rule 231 (valorC -> booleanos .)
    OR              reduce using rule 231 (valorC -> booleanos .)
    NOT             reduce using rule 231 (valorC -> booleanos .)
    PAR_D           reduce using rule 231 (valorC -> booleanos .)
    IGUAL_COMPARACION shift and go to state 215
    DIFERENTE       shift and go to state 216
    MAYOR           shift and go to state 217
    MENOR           shift and go to state 218

    comparacion                    shift and go to state 224

state 98

    (232) valorC -> relacional .

    AND             reduce using rule 232 (valorC -> relacional .)
    OR              reduce using rule 232 (valorC -> relacional .)
    NOT             reduce using rule 232 (valorC -> relacional .)
    PAR_D           reduce using rule 232 (valorC -> relacional .)


state 99

    (233) valorC -> NOT . VARIABLE
    (234) valorC -> NOT . booleanos
    (235) valorC -> NOT . relacional
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE
    (239) relacional -> . numeros comparacion numeros
    (240) relacional -> . aritmetica comparacion aritmetica
    (241) relacional -> . aritmetica comparacion numeros
    (242) relacional -> . numeros comparacion aritmetica
    (243) relacional -> . booleanos comparacion booleanos
    (244) relacional -> . STRING comparacion STRING
    (245) relacional -> . CHAR comparacion CHAR
    (246) relacional -> . VARIABLE comparacion numeros
    (247) relacional -> . numeros comparacion VARIABLE
    (248) relacional -> . VARIABLE comparacion booleanos
    (249) relacional -> . booleanos comparacion VARIABLE
    (250) relacional -> . VARIABLE comparacion STRING
    (251) relacional -> . STRING comparacion VARIABLE
    (252) relacional -> . VARIABLE comparacion CHAR
    (253) relacional -> . CHAR comparacion VARIABLE
    (254) relacional -> . VARIABLE comparacion VARIABLE
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE

    VARIABLE        shift and go to state 225
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    STRING          shift and go to state 102
    CHAR            shift and go to state 103
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    booleanos                      shift and go to state 226
    relacional                     shift and go to state 227
    numeros                        shift and go to state 100
    aritmetica                     shift and go to state 101

state 100

    (239) relacional -> numeros . comparacion numeros
    (242) relacional -> numeros . comparacion aritmetica
    (247) relacional -> numeros . comparacion VARIABLE
    (259) aritmetica -> numeros . aritmeticos numeros
    (261) aritmetica -> numeros . aritmeticos VARIABLE
    (255) comparacion -> . IGUAL_COMPARACION
    (256) comparacion -> . DIFERENTE
    (257) comparacion -> . MAYOR
    (258) comparacion -> . MENOR
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD

    IGUAL_COMPARACION shift and go to state 215
    DIFERENTE       shift and go to state 216
    MAYOR           shift and go to state 217
    MENOR           shift and go to state 218
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    comparacion                    shift and go to state 228
    aritmeticos                    shift and go to state 229

state 101

    (240) relacional -> aritmetica . comparacion aritmetica
    (241) relacional -> aritmetica . comparacion numeros
    (263) aritmetica -> aritmetica . aritmeticos numeros
    (264) aritmetica -> aritmetica . aritmeticos VARIABLE
    (255) comparacion -> . IGUAL_COMPARACION
    (256) comparacion -> . DIFERENTE
    (257) comparacion -> . MAYOR
    (258) comparacion -> . MENOR
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD

    IGUAL_COMPARACION shift and go to state 215
    DIFERENTE       shift and go to state 216
    MAYOR           shift and go to state 217
    MENOR           shift and go to state 218
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    comparacion                    shift and go to state 230
    aritmeticos                    shift and go to state 231

state 102

    (244) relacional -> STRING . comparacion STRING
    (251) relacional -> STRING . comparacion VARIABLE
    (255) comparacion -> . IGUAL_COMPARACION
    (256) comparacion -> . DIFERENTE
    (257) comparacion -> . MAYOR
    (258) comparacion -> . MENOR

    IGUAL_COMPARACION shift and go to state 215
    DIFERENTE       shift and go to state 216
    MAYOR           shift and go to state 217
    MENOR           shift and go to state 218

    comparacion                    shift and go to state 232

state 103

    (245) relacional -> CHAR . comparacion CHAR
    (253) relacional -> CHAR . comparacion VARIABLE
    (255) comparacion -> . IGUAL_COMPARACION
    (256) comparacion -> . DIFERENTE
    (257) comparacion -> . MAYOR
    (258) comparacion -> . MENOR

    IGUAL_COMPARACION shift and go to state 215
    DIFERENTE       shift and go to state 216
    MAYOR           shift and go to state 217
    MENOR           shift and go to state 218

    comparacion                    shift and go to state 233

state 104

    (176) for -> FOR PAR_I VAR . VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> FOR PAR_I VAR . VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> FOR PAR_I VAR . VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D

    VARIABLE        shift and go to state 234


state 105

    (177) for -> FOR PAR_I VARIABLE . ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> FOR PAR_I VARIABLE . ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> FOR PAR_I VARIABLE . ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D

    ITERATOR        shift and go to state 235


state 106

    (221) if -> IF PAR_I condicional . PAR_D LLAVE_I contenido LLAVE_D

    PAR_D           shift and go to state 236


state 107

    (1) inicio -> OBJECT VARIABLE LLAVE_I cuerpo . LLAVE_D

    LLAVE_D         shift and go to state 237


state 108

    (149) varparen -> varparen PAR_I valores . PAR_D

    PAR_D           shift and go to state 238


state 109

    (150) varparen -> varparen PAR_I PAR_D .

    PAR_I           reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    $end            reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    LLAVE_D         reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    VAR             reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    VAL             reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    VARIABLE        reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    PRINTLN         reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    PRINT           reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    READLINE        reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    WHILE           reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    FOR             reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    IF              reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    INT             reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    LONG            reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    FLOAT           reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    DOUBLE          reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    RETURN          reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    PUNTO           reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    DEF             reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)
    CASE            reduce using rule 150 (varparen -> varparen PAR_I PAR_D .)


state 110

    (182) match -> VARIABLE MATCH LLAVE_I cases . LLAVE_D

    LLAVE_D         shift and go to state 239


state 111

    (183) cases -> casesInt .

    LLAVE_D         reduce using rule 183 (cases -> casesInt .)


state 112

    (184) cases -> casesLgn .

    LLAVE_D         reduce using rule 184 (cases -> casesLgn .)


state 113

    (185) cases -> casesFlt .

    LLAVE_D         reduce using rule 185 (cases -> casesFlt .)


state 114

    (186) cases -> casesDob .

    LLAVE_D         reduce using rule 186 (cases -> casesDob .)


state 115

    (187) cases -> casesStr .

    LLAVE_D         reduce using rule 187 (cases -> casesStr .)


state 116

    (188) cases -> casesChar .

    LLAVE_D         reduce using rule 188 (cases -> casesChar .)


state 117

    (189) cases -> casesBool .

    LLAVE_D         reduce using rule 189 (cases -> casesBool .)


state 118

    (191) casesInt -> caseInt .
    (192) casesInt -> caseInt . casesInt
    (193) casesInt -> caseInt . defcase
    (191) casesInt -> . caseInt
    (192) casesInt -> . caseInt casesInt
    (193) casesInt -> . caseInt defcase
    (218) defcase -> . CASE SUBGUION FUNCION_FLECHA codeBlock
    (190) caseInt -> . CASE INT FUNCION_FLECHA codeBlock

    LLAVE_D         reduce using rule 191 (casesInt -> caseInt .)
    CASE            shift and go to state 242

    caseInt                        shift and go to state 118
    casesInt                       shift and go to state 240
    defcase                        shift and go to state 241

state 119

    (195) casesLgn -> caseLgn .
    (196) casesLgn -> caseLgn . casesLgn
    (197) casesLgn -> caseLgn . defcase
    (195) casesLgn -> . caseLgn
    (196) casesLgn -> . caseLgn casesLgn
    (197) casesLgn -> . caseLgn defcase
    (218) defcase -> . CASE SUBGUION FUNCION_FLECHA codeBlock
    (194) caseLgn -> . CASE LONG FUNCION_FLECHA codeBlock

    LLAVE_D         reduce using rule 195 (casesLgn -> caseLgn .)
    CASE            shift and go to state 245

    caseLgn                        shift and go to state 119
    casesLgn                       shift and go to state 243
    defcase                        shift and go to state 244

state 120

    (199) casesFlt -> caseFlt .
    (200) casesFlt -> caseFlt . casesFlt
    (201) casesFlt -> caseFlt . defcase
    (199) casesFlt -> . caseFlt
    (200) casesFlt -> . caseFlt casesFlt
    (201) casesFlt -> . caseFlt defcase
    (218) defcase -> . CASE SUBGUION FUNCION_FLECHA codeBlock
    (198) caseFlt -> . CASE FLOAT FUNCION_FLECHA codeBlock

    LLAVE_D         reduce using rule 199 (casesFlt -> caseFlt .)
    CASE            shift and go to state 248

    caseFlt                        shift and go to state 120
    casesFlt                       shift and go to state 246
    defcase                        shift and go to state 247

state 121

    (203) casesDob -> caseDob .
    (204) casesDob -> caseDob . casesDob
    (205) casesDob -> caseDob . defcase
    (203) casesDob -> . caseDob
    (204) casesDob -> . caseDob casesDob
    (205) casesDob -> . caseDob defcase
    (218) defcase -> . CASE SUBGUION FUNCION_FLECHA codeBlock
    (202) caseDob -> . CASE DOUBLE FUNCION_FLECHA codeBlock

    LLAVE_D         reduce using rule 203 (casesDob -> caseDob .)
    CASE            shift and go to state 251

    caseDob                        shift and go to state 121
    casesDob                       shift and go to state 249
    defcase                        shift and go to state 250

state 122

    (207) casesStr -> caseStr .
    (208) casesStr -> caseStr . casesStr
    (209) casesStr -> caseStr . defcase
    (207) casesStr -> . caseStr
    (208) casesStr -> . caseStr casesStr
    (209) casesStr -> . caseStr defcase
    (218) defcase -> . CASE SUBGUION FUNCION_FLECHA codeBlock
    (206) caseStr -> . CASE STRING FUNCION_FLECHA codeBlock

    LLAVE_D         reduce using rule 207 (casesStr -> caseStr .)
    CASE            shift and go to state 254

    caseStr                        shift and go to state 122
    casesStr                       shift and go to state 252
    defcase                        shift and go to state 253

state 123

    (211) casesChar -> caseChar .
    (212) casesChar -> caseChar . casesChar
    (213) casesChar -> caseChar . defcase
    (211) casesChar -> . caseChar
    (212) casesChar -> . caseChar casesChar
    (213) casesChar -> . caseChar defcase
    (218) defcase -> . CASE SUBGUION FUNCION_FLECHA codeBlock
    (210) caseChar -> . CASE CHAR FUNCION_FLECHA codeBlock

    LLAVE_D         reduce using rule 211 (casesChar -> caseChar .)
    CASE            shift and go to state 257

    caseChar                       shift and go to state 123
    casesChar                      shift and go to state 255
    defcase                        shift and go to state 256

state 124

    (215) casesBool -> caseBool .
    (216) casesBool -> caseBool . casesBool
    (217) casesBool -> caseBool . defcase
    (215) casesBool -> . caseBool
    (216) casesBool -> . caseBool casesBool
    (217) casesBool -> . caseBool defcase
    (218) defcase -> . CASE SUBGUION FUNCION_FLECHA codeBlock
    (214) caseBool -> . CASE booleanos FUNCION_FLECHA codeBlock

    LLAVE_D         reduce using rule 215 (casesBool -> caseBool .)
    CASE            shift and go to state 260

    caseBool                       shift and go to state 124
    casesBool                      shift and go to state 258
    defcase                        shift and go to state 259

state 125

    (190) caseInt -> CASE . INT FUNCION_FLECHA codeBlock
    (194) caseLgn -> CASE . LONG FUNCION_FLECHA codeBlock
    (198) caseFlt -> CASE . FLOAT FUNCION_FLECHA codeBlock
    (202) caseDob -> CASE . DOUBLE FUNCION_FLECHA codeBlock
    (206) caseStr -> CASE . STRING FUNCION_FLECHA codeBlock
    (210) caseChar -> CASE . CHAR FUNCION_FLECHA codeBlock
    (214) caseBool -> CASE . booleanos FUNCION_FLECHA codeBlock
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    INT             shift and go to state 261
    LONG            shift and go to state 262
    FLOAT           shift and go to state 263
    DOUBLE          shift and go to state 264
    STRING          shift and go to state 265
    CHAR            shift and go to state 266
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    booleanos                      shift and go to state 267

state 126

    (147) varparen -> PAR_I valores PAR_D .

    PAR_I           reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    $end            reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    LLAVE_D         reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    VAR             reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    VAL             reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    VARIABLE        reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    PRINTLN         reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    PRINT           reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    READLINE        reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    WHILE           reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    FOR             reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    IF              reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    INT             reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    LONG            reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    FLOAT           reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    DOUBLE          reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    RETURN          reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    PUNTO           reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    DEF             reduce using rule 147 (varparen -> PAR_I valores PAR_D .)
    CASE            reduce using rule 147 (varparen -> PAR_I valores PAR_D .)


state 127

    (171) valores -> valor COMA . valores
    (170) valores -> . valor
    (171) valores -> . valor COMA valores
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valor                          shift and go to state 64
    valores                        shift and go to state 268
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 128

    (108) valor -> VARIABLE PAR_I . VARIABLE PAR_D
    (109) valor -> VARIABLE PAR_I . INT PAR_D

    VARIABLE        shift and go to state 269
    INT             shift and go to state 270


state 129

    (4) io -> VARIABLE PUNTO VARIABLE . PUNTO VARIABLE PUNTO READLINE

    PUNTO           shift and go to state 271


state 130

    (224) elseif -> ELSE IF PAR_I . condicional PAR_D LLAVE_I contenido LLAVE_D
    (225) elseif -> ELSE IF PAR_I . condicional PAR_D LLAVE_I contenido LLAVE_D elseif
    (228) condicional -> . valorC logicos condicional
    (229) condicional -> . valorC
    (230) valorC -> . VARIABLE
    (231) valorC -> . booleanos
    (232) valorC -> . relacional
    (233) valorC -> . NOT VARIABLE
    (234) valorC -> . NOT booleanos
    (235) valorC -> . NOT relacional
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE
    (239) relacional -> . numeros comparacion numeros
    (240) relacional -> . aritmetica comparacion aritmetica
    (241) relacional -> . aritmetica comparacion numeros
    (242) relacional -> . numeros comparacion aritmetica
    (243) relacional -> . booleanos comparacion booleanos
    (244) relacional -> . STRING comparacion STRING
    (245) relacional -> . CHAR comparacion CHAR
    (246) relacional -> . VARIABLE comparacion numeros
    (247) relacional -> . numeros comparacion VARIABLE
    (248) relacional -> . VARIABLE comparacion booleanos
    (249) relacional -> . booleanos comparacion VARIABLE
    (250) relacional -> . VARIABLE comparacion STRING
    (251) relacional -> . STRING comparacion VARIABLE
    (252) relacional -> . VARIABLE comparacion CHAR
    (253) relacional -> . CHAR comparacion VARIABLE
    (254) relacional -> . VARIABLE comparacion VARIABLE
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE

    VARIABLE        shift and go to state 96
    NOT             shift and go to state 99
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    STRING          shift and go to state 102
    CHAR            shift and go to state 103
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    condicional                    shift and go to state 272
    valorC                         shift and go to state 95
    booleanos                      shift and go to state 97
    relacional                     shift and go to state 98
    numeros                        shift and go to state 100
    aritmetica                     shift and go to state 101

state 131

    (226) else -> ELSE LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 273


state 132

    (20) contenido -> asignacion .
    (30) contenido -> asignacion . contenido
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 20 (contenido -> asignacion .)
    RETURN          reduce using rule 20 (contenido -> asignacion .)
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    asignacion                     shift and go to state 132
    contenido                      shift and go to state 274
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 133

    (21) contenido -> reasignacion .
    (31) contenido -> reasignacion . contenido
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 21 (contenido -> reasignacion .)
    RETURN          reduce using rule 21 (contenido -> reasignacion .)
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    reasignacion                   shift and go to state 133
    contenido                      shift and go to state 275
    asignacion                     shift and go to state 132
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 134

    (22) contenido -> funcall .
    (32) contenido -> funcall . contenido
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 22 (contenido -> funcall .)
    RETURN          reduce using rule 22 (contenido -> funcall .)
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    funcall                        shift and go to state 134
    contenido                      shift and go to state 276
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 135

    (23) contenido -> impresion .
    (33) contenido -> impresion . contenido
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 23 (contenido -> impresion .)
    RETURN          reduce using rule 23 (contenido -> impresion .)
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    impresion                      shift and go to state 135
    contenido                      shift and go to state 277
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 136

    (24) contenido -> entrada .
    (34) contenido -> entrada . contenido
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 24 (contenido -> entrada .)
    RETURN          reduce using rule 24 (contenido -> entrada .)
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    entrada                        shift and go to state 136
    contenido                      shift and go to state 278
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 137

    (25) contenido -> while .
    (35) contenido -> while . contenido
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 25 (contenido -> while .)
    RETURN          reduce using rule 25 (contenido -> while .)
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    while                          shift and go to state 137
    contenido                      shift and go to state 279
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 138

    (26) contenido -> for .
    (36) contenido -> for . contenido
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 26 (contenido -> for .)
    RETURN          reduce using rule 26 (contenido -> for .)
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    for                            shift and go to state 138
    contenido                      shift and go to state 280
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 139

    (27) contenido -> match .
    (38) contenido -> match . contenido
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 27 (contenido -> match .)
    RETURN          reduce using rule 27 (contenido -> match .)
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    match                          shift and go to state 139
    contenido                      shift and go to state 281
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 140

    (28) contenido -> if .
    (37) contenido -> if . contenido
    (222) if -> if . elseif
    (223) if -> if . else
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (224) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (225) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif
    (226) else -> . ELSE LLAVE_I contenido LLAVE_D
    (227) else -> . elseif else
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 28 (contenido -> if .)
    RETURN          reduce using rule 28 (contenido -> if .)
    ELSE            shift and go to state 49
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    if                             shift and go to state 140
    contenido                      shift and go to state 282
    elseif                         shift and go to state 47
    else                           shift and go to state 48
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 141

    (29) contenido -> aritmetica .
    (39) contenido -> aritmetica . contenido
    (263) aritmetica -> aritmetica . aritmeticos numeros
    (264) aritmetica -> aritmetica . aritmeticos VARIABLE
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 29 (contenido -> aritmetica .)
    RETURN          reduce using rule 29 (contenido -> aritmetica .)
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    aritmetica                     shift and go to state 141
    contenido                      shift and go to state 283
    aritmeticos                    shift and go to state 231
    numeros                        shift and go to state 143
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 142

    (90) reasignacion -> VARIABLE . IGUAL valor
    (91) reasignacion -> VARIABLE . IGUAL returnfun
    (92) reasignacion -> VARIABLE . IGUAL aritmetica
    (93) reasignacion -> VARIABLE . PAR_I INT PAR_D IGUAL valor
    (146) funcall -> VARIABLE . varparen
    (182) match -> VARIABLE . MATCH LLAVE_I cases LLAVE_D
    (260) aritmetica -> VARIABLE . aritmeticos numeros
    (262) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (147) varparen -> . PAR_I valores PAR_D
    (148) varparen -> . PAR_I PAR_D
    (149) varparen -> . varparen PAR_I valores PAR_D
    (150) varparen -> . varparen PAR_I PAR_D
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD

    IGUAL           shift and go to state 284
    PAR_I           shift and go to state 285
    MATCH           shift and go to state 37
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    varparen                       shift and go to state 36
    aritmeticos                    shift and go to state 214

state 143

    (259) aritmetica -> numeros . aritmeticos numeros
    (261) aritmetica -> numeros . aritmeticos VARIABLE
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD

    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    aritmeticos                    shift and go to state 229

state 144

    (116) funcion -> DEF VARIABLE parametro IGUAL . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 286


state 145

    (117) funcion -> DEF VARIABLE parametro LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 287
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 146

    (124) funcion -> DEF VARIABLE parametro dectipo . IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (125) funcion -> DEF VARIABLE parametro dectipo . IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (126) funcion -> DEF VARIABLE parametro dectipo . IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (127) funcion -> DEF VARIABLE parametro dectipo . IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (128) funcion -> DEF VARIABLE parametro dectipo . IGUAL LLAVE_I RETURN valor LLAVE_D
    (129) funcion -> DEF VARIABLE parametro dectipo . IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (130) funcion -> DEF VARIABLE parametro dectipo . IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (131) funcion -> DEF VARIABLE parametro dectipo . IGUAL LLAVE_I RETURN aritmetica LLAVE_D

    IGUAL           shift and go to state 288


state 147

    (132) funcion -> DEF VARIABLE parametro dectipoTupla . IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (133) funcion -> DEF VARIABLE parametro dectipoTupla . IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (134) funcion -> DEF VARIABLE parametro dectipoTupla . IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D

    IGUAL           shift and go to state 289


state 148

    (135) dectipo -> DOBLE_PUNTO . tipo
    (136) dectipoTupla -> DOBLE_PUNTO . PAR_I tipos PAR_D
    (94) tipo -> . CHARCLASS
    (95) tipo -> . STRINGCLASS
    (96) tipo -> . BOOLCLASS
    (97) tipo -> . INTCLASS
    (98) tipo -> . LONGCLASS
    (99) tipo -> . DOUBLECLASS
    (100) tipo -> . FLOATCLASS
    (101) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (102) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    PAR_I           shift and go to state 291
    CHARCLASS       shift and go to state 292
    STRINGCLASS     shift and go to state 293
    BOOLCLASS       shift and go to state 294
    INTCLASS        shift and go to state 295
    LONGCLASS       shift and go to state 296
    DOUBLECLASS     shift and go to state 297
    FLOATCLASS      shift and go to state 298
    ARRAYCLASS      shift and go to state 299
    LISTCLASS       shift and go to state 300

    tipo                           shift and go to state 290

state 149

    (121) parametro -> PAR_I PAR_D .

    IGUAL           reduce using rule 121 (parametro -> PAR_I PAR_D .)
    LLAVE_I         reduce using rule 121 (parametro -> PAR_I PAR_D .)
    DOBLE_PUNTO     reduce using rule 121 (parametro -> PAR_I PAR_D .)


state 150

    (122) parametros -> PAR_I declaracion . PAR_D
    (123) parametros -> PAR_I declaracion . PAR_D parametros

    PAR_D           shift and go to state 301


state 151

    (118) declaracion -> VARIABLE . DOBLE_PUNTO tipo
    (119) declaracion -> VARIABLE . DOBLE_PUNTO tipo IGUAL valor

    DOBLE_PUNTO     shift and go to state 302


state 152

    (141) impresion -> PRINTLN PAR_I valorI PAR_D .

    $end            reduce using rule 141 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    LLAVE_D         reduce using rule 141 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    VAR             reduce using rule 141 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    VAL             reduce using rule 141 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    VARIABLE        reduce using rule 141 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    PRINTLN         reduce using rule 141 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    PRINT           reduce using rule 141 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    READLINE        reduce using rule 141 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    WHILE           reduce using rule 141 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    FOR             reduce using rule 141 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    IF              reduce using rule 141 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    INT             reduce using rule 141 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    LONG            reduce using rule 141 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    FLOAT           reduce using rule 141 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    DOUBLE          reduce using rule 141 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    RETURN          reduce using rule 141 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    CASE            reduce using rule 141 (impresion -> PRINTLN PAR_I valorI PAR_D .)


state 153

    (143) valorI -> valor MAS . valorI
    (143) valorI -> . valor MAS valorI
    (144) valorI -> . valor
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valor                          shift and go to state 87
    valorI                         shift and go to state 303
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 154

    (142) impresion -> PRINT PAR_I valorI PAR_D .

    $end            reduce using rule 142 (impresion -> PRINT PAR_I valorI PAR_D .)
    LLAVE_D         reduce using rule 142 (impresion -> PRINT PAR_I valorI PAR_D .)
    VAR             reduce using rule 142 (impresion -> PRINT PAR_I valorI PAR_D .)
    VAL             reduce using rule 142 (impresion -> PRINT PAR_I valorI PAR_D .)
    VARIABLE        reduce using rule 142 (impresion -> PRINT PAR_I valorI PAR_D .)
    PRINTLN         reduce using rule 142 (impresion -> PRINT PAR_I valorI PAR_D .)
    PRINT           reduce using rule 142 (impresion -> PRINT PAR_I valorI PAR_D .)
    READLINE        reduce using rule 142 (impresion -> PRINT PAR_I valorI PAR_D .)
    WHILE           reduce using rule 142 (impresion -> PRINT PAR_I valorI PAR_D .)
    FOR             reduce using rule 142 (impresion -> PRINT PAR_I valorI PAR_D .)
    IF              reduce using rule 142 (impresion -> PRINT PAR_I valorI PAR_D .)
    INT             reduce using rule 142 (impresion -> PRINT PAR_I valorI PAR_D .)
    LONG            reduce using rule 142 (impresion -> PRINT PAR_I valorI PAR_D .)
    FLOAT           reduce using rule 142 (impresion -> PRINT PAR_I valorI PAR_D .)
    DOUBLE          reduce using rule 142 (impresion -> PRINT PAR_I valorI PAR_D .)
    RETURN          reduce using rule 142 (impresion -> PRINT PAR_I valorI PAR_D .)
    CASE            reduce using rule 142 (impresion -> PRINT PAR_I valorI PAR_D .)


state 155

    (45) asignacion -> VAR VARIABLE IGUAL VARIABLE .
    (260) aritmetica -> VARIABLE . aritmeticos numeros
    (262) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (156) castingcall -> VARIABLE . PUNTO castingfun
    (146) funcall -> VARIABLE . varparen
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD
    (147) varparen -> . PAR_I valores PAR_D
    (148) varparen -> . PAR_I PAR_D
    (149) varparen -> . varparen PAR_I valores PAR_D
    (150) varparen -> . varparen PAR_I PAR_D

    DEF             reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    VARIABLE        reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    PRINTLN         reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    PRINT           reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    READLINE        reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    VAR             reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    VAL             reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    WHILE           reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    FOR             reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    IF              reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    $end            reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    INT             reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    LONG            reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    FLOAT           reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    DOUBLE          reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    RETURN          reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    CASE            reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    PUNTO           shift and go to state 304
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223
    PAR_I           shift and go to state 38

    aritmeticos                    shift and go to state 214
    varparen                       shift and go to state 36

state 156

    (47) asignacion -> VAR VARIABLE IGUAL aritmetica .
    (263) aritmetica -> aritmetica . aritmeticos numeros
    (264) aritmetica -> aritmetica . aritmeticos VARIABLE
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD

    DEF             reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    VARIABLE        reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    PRINTLN         reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    PRINT           reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    READLINE        reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    VAR             reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    VAL             reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    WHILE           reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    FOR             reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    IF              reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    $end            reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    LLAVE_D         reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    INT             reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    LONG            reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    FLOAT           reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    DOUBLE          reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    RETURN          reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    CASE            reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    aritmeticos                    shift and go to state 231

state 157

    (49) asignacion -> VAR VARIABLE IGUAL returnfun .

    DEF             reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    VARIABLE        reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    PRINTLN         reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    PRINT           reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    READLINE        reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    VAR             reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    VAL             reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    WHILE           reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    FOR             reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    IF              reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    $end            reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    LLAVE_D         reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    INT             reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    LONG            reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    FLOAT           reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    DOUBLE          reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    RETURN          reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    CASE            reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)


state 158

    (173) asignacion -> VAR VARIABLE IGUAL tuple .

    DEF             reduce using rule 173 (asignacion -> VAR VARIABLE IGUAL tuple .)
    VARIABLE        reduce using rule 173 (asignacion -> VAR VARIABLE IGUAL tuple .)
    PRINTLN         reduce using rule 173 (asignacion -> VAR VARIABLE IGUAL tuple .)
    PRINT           reduce using rule 173 (asignacion -> VAR VARIABLE IGUAL tuple .)
    READLINE        reduce using rule 173 (asignacion -> VAR VARIABLE IGUAL tuple .)
    VAR             reduce using rule 173 (asignacion -> VAR VARIABLE IGUAL tuple .)
    VAL             reduce using rule 173 (asignacion -> VAR VARIABLE IGUAL tuple .)
    WHILE           reduce using rule 173 (asignacion -> VAR VARIABLE IGUAL tuple .)
    FOR             reduce using rule 173 (asignacion -> VAR VARIABLE IGUAL tuple .)
    IF              reduce using rule 173 (asignacion -> VAR VARIABLE IGUAL tuple .)
    $end            reduce using rule 173 (asignacion -> VAR VARIABLE IGUAL tuple .)
    LLAVE_D         reduce using rule 173 (asignacion -> VAR VARIABLE IGUAL tuple .)
    INT             reduce using rule 173 (asignacion -> VAR VARIABLE IGUAL tuple .)
    LONG            reduce using rule 173 (asignacion -> VAR VARIABLE IGUAL tuple .)
    FLOAT           reduce using rule 173 (asignacion -> VAR VARIABLE IGUAL tuple .)
    DOUBLE          reduce using rule 173 (asignacion -> VAR VARIABLE IGUAL tuple .)
    RETURN          reduce using rule 173 (asignacion -> VAR VARIABLE IGUAL tuple .)
    CASE            reduce using rule 173 (asignacion -> VAR VARIABLE IGUAL tuple .)


state 159

    (298) asignacionLong -> VAR VARIABLE IGUAL longvalues .
    (309) floatvalues -> longvalues .

  ! reduce/reduce conflict for DEF resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for PRINTLN resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for PRINT resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for READLINE resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for VAR resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for VAL resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for WHILE resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for FOR resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for IF resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for $end resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for LLAVE_D resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for INT resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for LONG resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for FLOAT resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for RETURN resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for CASE resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    DEF             reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    VARIABLE        reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    PRINTLN         reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    PRINT           reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    READLINE        reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    VAR             reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    VAL             reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    WHILE           reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    FOR             reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    IF              reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    $end            reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    LLAVE_D         reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    INT             reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    LONG            reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    FLOAT           reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    DOUBLE          reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    RETURN          reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    CASE            reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)

  ! DEF             [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! VARIABLE        [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! PRINTLN         [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! PRINT           [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! READLINE        [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! VAR             [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! VAL             [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! WHILE           [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! FOR             [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! IF              [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! $end            [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! LLAVE_D         [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! INT             [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! LONG            [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! FLOAT           [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! DOUBLE          [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! RETURN          [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! CASE            [ reduce using rule 309 (floatvalues -> longvalues .) ]


state 160

    (62) asignacionInt -> VAR VARIABLE IGUAL INT .
    (302) longvalues -> INT .
    (112) numeros -> INT .

  ! reduce/reduce conflict for DEF resolved using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for PRINTLN resolved using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for PRINT resolved using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for READLINE resolved using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for VAR resolved using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for VAL resolved using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for WHILE resolved using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for FOR resolved using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for IF resolved using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for $end resolved using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for LLAVE_D resolved using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for INT resolved using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for LONG resolved using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for FLOAT resolved using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for RETURN resolved using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for CASE resolved using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    DEF             reduce using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    VARIABLE        reduce using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    PRINTLN         reduce using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    PRINT           reduce using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    READLINE        reduce using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    VAR             reduce using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    VAL             reduce using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    WHILE           reduce using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    FOR             reduce using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    IF              reduce using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    $end            reduce using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    LLAVE_D         reduce using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    INT             reduce using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    LONG            reduce using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    FLOAT           reduce using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    DOUBLE          reduce using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    RETURN          reduce using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    CASE            reduce using rule 62 (asignacionInt -> VAR VARIABLE IGUAL INT .)
    MENOS           reduce using rule 112 (numeros -> INT .)
    MAS             reduce using rule 112 (numeros -> INT .)
    MULTIPLICACION  reduce using rule 112 (numeros -> INT .)
    DIVISION        reduce using rule 112 (numeros -> INT .)
    MOD             reduce using rule 112 (numeros -> INT .)

  ! DEF             [ reduce using rule 302 (longvalues -> INT .) ]
  ! VARIABLE        [ reduce using rule 302 (longvalues -> INT .) ]
  ! PRINTLN         [ reduce using rule 302 (longvalues -> INT .) ]
  ! PRINT           [ reduce using rule 302 (longvalues -> INT .) ]
  ! READLINE        [ reduce using rule 302 (longvalues -> INT .) ]
  ! VAR             [ reduce using rule 302 (longvalues -> INT .) ]
  ! VAL             [ reduce using rule 302 (longvalues -> INT .) ]
  ! WHILE           [ reduce using rule 302 (longvalues -> INT .) ]
  ! FOR             [ reduce using rule 302 (longvalues -> INT .) ]
  ! IF              [ reduce using rule 302 (longvalues -> INT .) ]
  ! $end            [ reduce using rule 302 (longvalues -> INT .) ]
  ! LLAVE_D         [ reduce using rule 302 (longvalues -> INT .) ]
  ! INT             [ reduce using rule 302 (longvalues -> INT .) ]
  ! LONG            [ reduce using rule 302 (longvalues -> INT .) ]
  ! FLOAT           [ reduce using rule 302 (longvalues -> INT .) ]
  ! DOUBLE          [ reduce using rule 302 (longvalues -> INT .) ]
  ! RETURN          [ reduce using rule 302 (longvalues -> INT .) ]
  ! CASE            [ reduce using rule 302 (longvalues -> INT .) ]


state 161

    (304) asignacionFloat -> VAR VARIABLE IGUAL floatvalues .
    (315) doublevalues -> floatvalues .

  ! reduce/reduce conflict for DEF resolved using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for PRINTLN resolved using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for PRINT resolved using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for READLINE resolved using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for VAR resolved using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for VAL resolved using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for WHILE resolved using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for FOR resolved using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for IF resolved using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for $end resolved using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for LLAVE_D resolved using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for INT resolved using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for LONG resolved using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for FLOAT resolved using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for RETURN resolved using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for CASE resolved using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    DEF             reduce using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    VARIABLE        reduce using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    PRINTLN         reduce using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    PRINT           reduce using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    READLINE        reduce using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    VAR             reduce using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    VAL             reduce using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    WHILE           reduce using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    FOR             reduce using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    IF              reduce using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    $end            reduce using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    LLAVE_D         reduce using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    INT             reduce using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    LONG            reduce using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    FLOAT           reduce using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    DOUBLE          reduce using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    RETURN          reduce using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    CASE            reduce using rule 304 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)

  ! DEF             [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! VARIABLE        [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! PRINTLN         [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! PRINT           [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! READLINE        [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! VAR             [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! VAL             [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! WHILE           [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! FOR             [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! IF              [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! $end            [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! LLAVE_D         [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! INT             [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! LONG            [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! FLOAT           [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! DOUBLE          [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! RETURN          [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! CASE            [ reduce using rule 315 (doublevalues -> floatvalues .) ]


state 162

    (310) asignacionDouble -> VAR VARIABLE IGUAL doublevalues .

    DEF             reduce using rule 310 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    VARIABLE        reduce using rule 310 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    PRINTLN         reduce using rule 310 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    PRINT           reduce using rule 310 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    READLINE        reduce using rule 310 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    VAR             reduce using rule 310 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    VAL             reduce using rule 310 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    WHILE           reduce using rule 310 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    FOR             reduce using rule 310 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    IF              reduce using rule 310 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    $end            reduce using rule 310 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    LLAVE_D         reduce using rule 310 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    INT             reduce using rule 310 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    LONG            reduce using rule 310 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    FLOAT           reduce using rule 310 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    DOUBLE          reduce using rule 310 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    RETURN          reduce using rule 310 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    CASE            reduce using rule 310 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)


state 163

    (72) asignacionString -> VAR VARIABLE IGUAL STRING .

    DEF             reduce using rule 72 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    VARIABLE        reduce using rule 72 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    PRINTLN         reduce using rule 72 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    PRINT           reduce using rule 72 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    READLINE        reduce using rule 72 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    VAR             reduce using rule 72 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    VAL             reduce using rule 72 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    WHILE           reduce using rule 72 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    FOR             reduce using rule 72 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    IF              reduce using rule 72 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    $end            reduce using rule 72 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    LLAVE_D         reduce using rule 72 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    INT             reduce using rule 72 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    LONG            reduce using rule 72 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    FLOAT           reduce using rule 72 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    DOUBLE          reduce using rule 72 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    RETURN          reduce using rule 72 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    CASE            reduce using rule 72 (asignacionString -> VAR VARIABLE IGUAL STRING .)


state 164

    (78) asignacionChar -> VAR VARIABLE IGUAL CHAR .

    DEF             reduce using rule 78 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    VARIABLE        reduce using rule 78 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    PRINTLN         reduce using rule 78 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    PRINT           reduce using rule 78 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    READLINE        reduce using rule 78 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    VAR             reduce using rule 78 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    VAL             reduce using rule 78 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    WHILE           reduce using rule 78 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    FOR             reduce using rule 78 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    IF              reduce using rule 78 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    $end            reduce using rule 78 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    LLAVE_D         reduce using rule 78 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    INT             reduce using rule 78 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    LONG            reduce using rule 78 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    FLOAT           reduce using rule 78 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    DOUBLE          reduce using rule 78 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    RETURN          reduce using rule 78 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    CASE            reduce using rule 78 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)


state 165

    (84) asignacionBoolean -> VAR VARIABLE IGUAL booleanos .

    DEF             reduce using rule 84 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    VARIABLE        reduce using rule 84 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    PRINTLN         reduce using rule 84 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    PRINT           reduce using rule 84 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    READLINE        reduce using rule 84 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    VAR             reduce using rule 84 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    VAL             reduce using rule 84 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    WHILE           reduce using rule 84 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    FOR             reduce using rule 84 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    IF              reduce using rule 84 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    $end            reduce using rule 84 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    LLAVE_D         reduce using rule 84 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    INT             reduce using rule 84 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    LONG            reduce using rule 84 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    FLOAT           reduce using rule 84 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    DOUBLE          reduce using rule 84 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    RETURN          reduce using rule 84 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    CASE            reduce using rule 84 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)


state 166

    (161) array -> VAR VARIABLE IGUAL ARRAYCLASS . PAR_I valores PAR_D

    PAR_I           shift and go to state 305


state 167

    (172) tuple -> PAR_I . valores PAR_D
    (170) valores -> . valor
    (171) valores -> . valor COMA valores
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valores                        shift and go to state 306
    valor                          shift and go to state 64
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 168

    (151) returnfun -> returnCastable .
    (155) castingcall -> returnCastable . PUNTO castingfun

    DEF             reduce using rule 151 (returnfun -> returnCastable .)
    VARIABLE        reduce using rule 151 (returnfun -> returnCastable .)
    PRINTLN         reduce using rule 151 (returnfun -> returnCastable .)
    PRINT           reduce using rule 151 (returnfun -> returnCastable .)
    READLINE        reduce using rule 151 (returnfun -> returnCastable .)
    VAR             reduce using rule 151 (returnfun -> returnCastable .)
    VAL             reduce using rule 151 (returnfun -> returnCastable .)
    WHILE           reduce using rule 151 (returnfun -> returnCastable .)
    FOR             reduce using rule 151 (returnfun -> returnCastable .)
    IF              reduce using rule 151 (returnfun -> returnCastable .)
    $end            reduce using rule 151 (returnfun -> returnCastable .)
    LLAVE_D         reduce using rule 151 (returnfun -> returnCastable .)
    INT             reduce using rule 151 (returnfun -> returnCastable .)
    LONG            reduce using rule 151 (returnfun -> returnCastable .)
    FLOAT           reduce using rule 151 (returnfun -> returnCastable .)
    DOUBLE          reduce using rule 151 (returnfun -> returnCastable .)
    RETURN          reduce using rule 151 (returnfun -> returnCastable .)
    CASE            reduce using rule 151 (returnfun -> returnCastable .)
    PUNTO           shift and go to state 307


state 169

    (152) returnfun -> castingcall .

    DEF             reduce using rule 152 (returnfun -> castingcall .)
    VARIABLE        reduce using rule 152 (returnfun -> castingcall .)
    PRINTLN         reduce using rule 152 (returnfun -> castingcall .)
    PRINT           reduce using rule 152 (returnfun -> castingcall .)
    READLINE        reduce using rule 152 (returnfun -> castingcall .)
    VAR             reduce using rule 152 (returnfun -> castingcall .)
    VAL             reduce using rule 152 (returnfun -> castingcall .)
    WHILE           reduce using rule 152 (returnfun -> castingcall .)
    FOR             reduce using rule 152 (returnfun -> castingcall .)
    IF              reduce using rule 152 (returnfun -> castingcall .)
    $end            reduce using rule 152 (returnfun -> castingcall .)
    LLAVE_D         reduce using rule 152 (returnfun -> castingcall .)
    INT             reduce using rule 152 (returnfun -> castingcall .)
    LONG            reduce using rule 152 (returnfun -> castingcall .)
    FLOAT           reduce using rule 152 (returnfun -> castingcall .)
    DOUBLE          reduce using rule 152 (returnfun -> castingcall .)
    RETURN          reduce using rule 152 (returnfun -> castingcall .)
    CASE            reduce using rule 152 (returnfun -> castingcall .)


state 170

    (303) longvalues -> LONG .
    (113) numeros -> LONG .

    DEF             reduce using rule 303 (longvalues -> LONG .)
    VARIABLE        reduce using rule 303 (longvalues -> LONG .)
    PRINTLN         reduce using rule 303 (longvalues -> LONG .)
    PRINT           reduce using rule 303 (longvalues -> LONG .)
    READLINE        reduce using rule 303 (longvalues -> LONG .)
    VAR             reduce using rule 303 (longvalues -> LONG .)
    VAL             reduce using rule 303 (longvalues -> LONG .)
    WHILE           reduce using rule 303 (longvalues -> LONG .)
    FOR             reduce using rule 303 (longvalues -> LONG .)
    IF              reduce using rule 303 (longvalues -> LONG .)
    $end            reduce using rule 303 (longvalues -> LONG .)
    LLAVE_D         reduce using rule 303 (longvalues -> LONG .)
    INT             reduce using rule 303 (longvalues -> LONG .)
    LONG            reduce using rule 303 (longvalues -> LONG .)
    FLOAT           reduce using rule 303 (longvalues -> LONG .)
    DOUBLE          reduce using rule 303 (longvalues -> LONG .)
    RETURN          reduce using rule 303 (longvalues -> LONG .)
    CASE            reduce using rule 303 (longvalues -> LONG .)
    MENOS           reduce using rule 113 (numeros -> LONG .)
    MAS             reduce using rule 113 (numeros -> LONG .)
    MULTIPLICACION  reduce using rule 113 (numeros -> LONG .)
    DIVISION        reduce using rule 113 (numeros -> LONG .)
    MOD             reduce using rule 113 (numeros -> LONG .)


state 171

    (308) floatvalues -> FLOAT .
    (114) numeros -> FLOAT .

    DEF             reduce using rule 308 (floatvalues -> FLOAT .)
    VARIABLE        reduce using rule 308 (floatvalues -> FLOAT .)
    PRINTLN         reduce using rule 308 (floatvalues -> FLOAT .)
    PRINT           reduce using rule 308 (floatvalues -> FLOAT .)
    READLINE        reduce using rule 308 (floatvalues -> FLOAT .)
    VAR             reduce using rule 308 (floatvalues -> FLOAT .)
    VAL             reduce using rule 308 (floatvalues -> FLOAT .)
    WHILE           reduce using rule 308 (floatvalues -> FLOAT .)
    FOR             reduce using rule 308 (floatvalues -> FLOAT .)
    IF              reduce using rule 308 (floatvalues -> FLOAT .)
    $end            reduce using rule 308 (floatvalues -> FLOAT .)
    LLAVE_D         reduce using rule 308 (floatvalues -> FLOAT .)
    INT             reduce using rule 308 (floatvalues -> FLOAT .)
    LONG            reduce using rule 308 (floatvalues -> FLOAT .)
    FLOAT           reduce using rule 308 (floatvalues -> FLOAT .)
    DOUBLE          reduce using rule 308 (floatvalues -> FLOAT .)
    RETURN          reduce using rule 308 (floatvalues -> FLOAT .)
    CASE            reduce using rule 308 (floatvalues -> FLOAT .)
    MENOS           reduce using rule 114 (numeros -> FLOAT .)
    MAS             reduce using rule 114 (numeros -> FLOAT .)
    MULTIPLICACION  reduce using rule 114 (numeros -> FLOAT .)
    DIVISION        reduce using rule 114 (numeros -> FLOAT .)
    MOD             reduce using rule 114 (numeros -> FLOAT .)


state 172

    (314) doublevalues -> DOUBLE .
    (115) numeros -> DOUBLE .

    DEF             reduce using rule 314 (doublevalues -> DOUBLE .)
    VARIABLE        reduce using rule 314 (doublevalues -> DOUBLE .)
    PRINTLN         reduce using rule 314 (doublevalues -> DOUBLE .)
    PRINT           reduce using rule 314 (doublevalues -> DOUBLE .)
    READLINE        reduce using rule 314 (doublevalues -> DOUBLE .)
    VAR             reduce using rule 314 (doublevalues -> DOUBLE .)
    VAL             reduce using rule 314 (doublevalues -> DOUBLE .)
    WHILE           reduce using rule 314 (doublevalues -> DOUBLE .)
    FOR             reduce using rule 314 (doublevalues -> DOUBLE .)
    IF              reduce using rule 314 (doublevalues -> DOUBLE .)
    $end            reduce using rule 314 (doublevalues -> DOUBLE .)
    LLAVE_D         reduce using rule 314 (doublevalues -> DOUBLE .)
    INT             reduce using rule 314 (doublevalues -> DOUBLE .)
    LONG            reduce using rule 314 (doublevalues -> DOUBLE .)
    FLOAT           reduce using rule 314 (doublevalues -> DOUBLE .)
    DOUBLE          reduce using rule 314 (doublevalues -> DOUBLE .)
    RETURN          reduce using rule 314 (doublevalues -> DOUBLE .)
    CASE            reduce using rule 314 (doublevalues -> DOUBLE .)
    MENOS           reduce using rule 115 (numeros -> DOUBLE .)
    MAS             reduce using rule 115 (numeros -> DOUBLE .)
    MULTIPLICACION  reduce using rule 115 (numeros -> DOUBLE .)
    DIVISION        reduce using rule 115 (numeros -> DOUBLE .)
    MOD             reduce using rule 115 (numeros -> DOUBLE .)


state 173

    (153) returnCastable -> entrada .

    PUNTO           reduce using rule 153 (returnCastable -> entrada .)
    DEF             reduce using rule 153 (returnCastable -> entrada .)
    VARIABLE        reduce using rule 153 (returnCastable -> entrada .)
    PRINTLN         reduce using rule 153 (returnCastable -> entrada .)
    PRINT           reduce using rule 153 (returnCastable -> entrada .)
    READLINE        reduce using rule 153 (returnCastable -> entrada .)
    VAR             reduce using rule 153 (returnCastable -> entrada .)
    VAL             reduce using rule 153 (returnCastable -> entrada .)
    WHILE           reduce using rule 153 (returnCastable -> entrada .)
    FOR             reduce using rule 153 (returnCastable -> entrada .)
    IF              reduce using rule 153 (returnCastable -> entrada .)
    $end            reduce using rule 153 (returnCastable -> entrada .)
    LLAVE_D         reduce using rule 153 (returnCastable -> entrada .)
    INT             reduce using rule 153 (returnCastable -> entrada .)
    LONG            reduce using rule 153 (returnCastable -> entrada .)
    FLOAT           reduce using rule 153 (returnCastable -> entrada .)
    DOUBLE          reduce using rule 153 (returnCastable -> entrada .)
    RETURN          reduce using rule 153 (returnCastable -> entrada .)
    CASE            reduce using rule 153 (returnCastable -> entrada .)


state 174

    (154) returnCastable -> funcall .

    PUNTO           reduce using rule 154 (returnCastable -> funcall .)
    DEF             reduce using rule 154 (returnCastable -> funcall .)
    VARIABLE        reduce using rule 154 (returnCastable -> funcall .)
    PRINTLN         reduce using rule 154 (returnCastable -> funcall .)
    PRINT           reduce using rule 154 (returnCastable -> funcall .)
    READLINE        reduce using rule 154 (returnCastable -> funcall .)
    VAR             reduce using rule 154 (returnCastable -> funcall .)
    VAL             reduce using rule 154 (returnCastable -> funcall .)
    WHILE           reduce using rule 154 (returnCastable -> funcall .)
    FOR             reduce using rule 154 (returnCastable -> funcall .)
    IF              reduce using rule 154 (returnCastable -> funcall .)
    $end            reduce using rule 154 (returnCastable -> funcall .)
    LLAVE_D         reduce using rule 154 (returnCastable -> funcall .)
    INT             reduce using rule 154 (returnCastable -> funcall .)
    LONG            reduce using rule 154 (returnCastable -> funcall .)
    FLOAT           reduce using rule 154 (returnCastable -> funcall .)
    DOUBLE          reduce using rule 154 (returnCastable -> funcall .)
    RETURN          reduce using rule 154 (returnCastable -> funcall .)
    CASE            reduce using rule 154 (returnCastable -> funcall .)


state 175

    (276) asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .

    DEF             reduce using rule 276 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    VARIABLE        reduce using rule 276 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    PRINTLN         reduce using rule 276 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    PRINT           reduce using rule 276 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    READLINE        reduce using rule 276 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    VAR             reduce using rule 276 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    VAL             reduce using rule 276 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    WHILE           reduce using rule 276 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    FOR             reduce using rule 276 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    IF              reduce using rule 276 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    $end            reduce using rule 276 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    LLAVE_D         reduce using rule 276 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    INT             reduce using rule 276 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    LONG            reduce using rule 276 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    FLOAT           reduce using rule 276 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    DOUBLE          reduce using rule 276 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    RETURN          reduce using rule 276 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    CASE            reduce using rule 276 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)


state 176

    (60) asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS . IGUAL VARIABLE
    (299) asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS . IGUAL longvalues

    IGUAL           shift and go to state 308


state 177

    (63) asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS . IGUAL INT
    (66) asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS . IGUAL VARIABLE

    IGUAL           shift and go to state 309


state 178

    (68) asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS . IGUAL VARIABLE
    (305) asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS . IGUAL floatvalues

    IGUAL           shift and go to state 310


state 179

    (70) asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS . IGUAL VARIABLE
    (311) asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS . IGUAL doublevalues

    IGUAL           shift and go to state 311


state 180

    (73) asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS . IGUAL STRING
    (76) asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS . IGUAL VARIABLE

    IGUAL           shift and go to state 312


state 181

    (79) asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS . IGUAL CHAR
    (82) asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS . IGUAL VARIABLE

    IGUAL           shift and go to state 313


state 182

    (85) asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS . IGUAL booleanos
    (88) asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS . IGUAL VARIABLE

    IGUAL           shift and go to state 314


state 183

    (162) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS . CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (270) arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS . CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS . CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    CORCHETE_I      shift and go to state 315


state 184

    (278) dectupla -> PAR_I . STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D
    (279) dectupla -> PAR_I . STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D
    (280) dectupla -> PAR_I . STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D
    (281) dectupla -> PAR_I . STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D
    (282) dectupla -> PAR_I . FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D
    (283) dectupla -> PAR_I . FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D
    (284) dectupla -> PAR_I . FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D
    (285) dectupla -> PAR_I . FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D
    (286) dectupla -> PAR_I . DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D
    (287) dectupla -> PAR_I . DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D
    (288) dectupla -> PAR_I . DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D
    (289) dectupla -> PAR_I . DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D
    (290) dectupla -> PAR_I . LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D
    (291) dectupla -> PAR_I . LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D
    (292) dectupla -> PAR_I . LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D
    (293) dectupla -> PAR_I . LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D
    (294) dectupla -> PAR_I . INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D
    (295) dectupla -> PAR_I . INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D
    (296) dectupla -> PAR_I . INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D
    (297) dectupla -> PAR_I . INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D

    STRINGCLASS     shift and go to state 316
    FLOATCLASS      shift and go to state 320
    DOUBLECLASS     shift and go to state 319
    LONGCLASS       shift and go to state 318
    INTCLASS        shift and go to state 317


state 185

    (46) asignacion -> VAL VARIABLE IGUAL VARIABLE .
    (260) aritmetica -> VARIABLE . aritmeticos numeros
    (262) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (156) castingcall -> VARIABLE . PUNTO castingfun
    (146) funcall -> VARIABLE . varparen
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD
    (147) varparen -> . PAR_I valores PAR_D
    (148) varparen -> . PAR_I PAR_D
    (149) varparen -> . varparen PAR_I valores PAR_D
    (150) varparen -> . varparen PAR_I PAR_D

    DEF             reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    VARIABLE        reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    PRINTLN         reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    PRINT           reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    READLINE        reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    VAR             reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    VAL             reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    WHILE           reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    FOR             reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    IF              reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    $end            reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    INT             reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    LONG            reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    FLOAT           reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    DOUBLE          reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    RETURN          reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    CASE            reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    PUNTO           shift and go to state 304
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223
    PAR_I           shift and go to state 38

    aritmeticos                    shift and go to state 214
    varparen                       shift and go to state 36

state 186

    (48) asignacion -> VAL VARIABLE IGUAL aritmetica .
    (263) aritmetica -> aritmetica . aritmeticos numeros
    (264) aritmetica -> aritmetica . aritmeticos VARIABLE
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD

    DEF             reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    VARIABLE        reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    PRINTLN         reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    PRINT           reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    READLINE        reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    VAR             reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    VAL             reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    WHILE           reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    FOR             reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    IF              reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    $end            reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    LLAVE_D         reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    INT             reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    LONG            reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    FLOAT           reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    DOUBLE          reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    RETURN          reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    CASE            reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    aritmeticos                    shift and go to state 231

state 187

    (50) asignacion -> VAL VARIABLE IGUAL returnfun .

    DEF             reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    VARIABLE        reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    PRINTLN         reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    PRINT           reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    READLINE        reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    VAR             reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    VAL             reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    WHILE           reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    FOR             reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    IF              reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    $end            reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    LLAVE_D         reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    INT             reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    LONG            reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    FLOAT           reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    DOUBLE          reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    RETURN          reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    CASE            reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)


state 188

    (174) asignacion -> VAL VARIABLE IGUAL tuple .

    DEF             reduce using rule 174 (asignacion -> VAL VARIABLE IGUAL tuple .)
    VARIABLE        reduce using rule 174 (asignacion -> VAL VARIABLE IGUAL tuple .)
    PRINTLN         reduce using rule 174 (asignacion -> VAL VARIABLE IGUAL tuple .)
    PRINT           reduce using rule 174 (asignacion -> VAL VARIABLE IGUAL tuple .)
    READLINE        reduce using rule 174 (asignacion -> VAL VARIABLE IGUAL tuple .)
    VAR             reduce using rule 174 (asignacion -> VAL VARIABLE IGUAL tuple .)
    VAL             reduce using rule 174 (asignacion -> VAL VARIABLE IGUAL tuple .)
    WHILE           reduce using rule 174 (asignacion -> VAL VARIABLE IGUAL tuple .)
    FOR             reduce using rule 174 (asignacion -> VAL VARIABLE IGUAL tuple .)
    IF              reduce using rule 174 (asignacion -> VAL VARIABLE IGUAL tuple .)
    $end            reduce using rule 174 (asignacion -> VAL VARIABLE IGUAL tuple .)
    LLAVE_D         reduce using rule 174 (asignacion -> VAL VARIABLE IGUAL tuple .)
    INT             reduce using rule 174 (asignacion -> VAL VARIABLE IGUAL tuple .)
    LONG            reduce using rule 174 (asignacion -> VAL VARIABLE IGUAL tuple .)
    FLOAT           reduce using rule 174 (asignacion -> VAL VARIABLE IGUAL tuple .)
    DOUBLE          reduce using rule 174 (asignacion -> VAL VARIABLE IGUAL tuple .)
    RETURN          reduce using rule 174 (asignacion -> VAL VARIABLE IGUAL tuple .)
    CASE            reduce using rule 174 (asignacion -> VAL VARIABLE IGUAL tuple .)


state 189

    (300) asignacionLong -> VAL VARIABLE IGUAL longvalues .
    (309) floatvalues -> longvalues .

  ! reduce/reduce conflict for DEF resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for PRINTLN resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for PRINT resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for READLINE resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for VAR resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for VAL resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for WHILE resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for FOR resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for IF resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for $end resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for LLAVE_D resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for INT resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for LONG resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for FLOAT resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for RETURN resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for CASE resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    DEF             reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    VARIABLE        reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    PRINTLN         reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    PRINT           reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    READLINE        reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    VAR             reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    VAL             reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    WHILE           reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    FOR             reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    IF              reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    $end            reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    LLAVE_D         reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    INT             reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    LONG            reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    FLOAT           reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    DOUBLE          reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    RETURN          reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    CASE            reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)

  ! DEF             [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! VARIABLE        [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! PRINTLN         [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! PRINT           [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! READLINE        [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! VAR             [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! VAL             [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! WHILE           [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! FOR             [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! IF              [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! $end            [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! LLAVE_D         [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! INT             [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! LONG            [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! FLOAT           [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! DOUBLE          [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! RETURN          [ reduce using rule 309 (floatvalues -> longvalues .) ]
  ! CASE            [ reduce using rule 309 (floatvalues -> longvalues .) ]


state 190

    (64) asignacionInt -> VAL VARIABLE IGUAL INT .
    (302) longvalues -> INT .
    (112) numeros -> INT .

  ! reduce/reduce conflict for DEF resolved using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for PRINTLN resolved using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for PRINT resolved using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for READLINE resolved using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for VAR resolved using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for VAL resolved using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for WHILE resolved using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for FOR resolved using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for IF resolved using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for $end resolved using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for LLAVE_D resolved using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for INT resolved using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for LONG resolved using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for FLOAT resolved using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for RETURN resolved using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
  ! reduce/reduce conflict for CASE resolved using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    DEF             reduce using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    VARIABLE        reduce using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    PRINTLN         reduce using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    PRINT           reduce using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    READLINE        reduce using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    VAR             reduce using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    VAL             reduce using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    WHILE           reduce using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    FOR             reduce using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    IF              reduce using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    $end            reduce using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    LLAVE_D         reduce using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    INT             reduce using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    LONG            reduce using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    FLOAT           reduce using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    DOUBLE          reduce using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    RETURN          reduce using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    CASE            reduce using rule 64 (asignacionInt -> VAL VARIABLE IGUAL INT .)
    MENOS           reduce using rule 112 (numeros -> INT .)
    MAS             reduce using rule 112 (numeros -> INT .)
    MULTIPLICACION  reduce using rule 112 (numeros -> INT .)
    DIVISION        reduce using rule 112 (numeros -> INT .)
    MOD             reduce using rule 112 (numeros -> INT .)

  ! DEF             [ reduce using rule 302 (longvalues -> INT .) ]
  ! VARIABLE        [ reduce using rule 302 (longvalues -> INT .) ]
  ! PRINTLN         [ reduce using rule 302 (longvalues -> INT .) ]
  ! PRINT           [ reduce using rule 302 (longvalues -> INT .) ]
  ! READLINE        [ reduce using rule 302 (longvalues -> INT .) ]
  ! VAR             [ reduce using rule 302 (longvalues -> INT .) ]
  ! VAL             [ reduce using rule 302 (longvalues -> INT .) ]
  ! WHILE           [ reduce using rule 302 (longvalues -> INT .) ]
  ! FOR             [ reduce using rule 302 (longvalues -> INT .) ]
  ! IF              [ reduce using rule 302 (longvalues -> INT .) ]
  ! $end            [ reduce using rule 302 (longvalues -> INT .) ]
  ! LLAVE_D         [ reduce using rule 302 (longvalues -> INT .) ]
  ! INT             [ reduce using rule 302 (longvalues -> INT .) ]
  ! LONG            [ reduce using rule 302 (longvalues -> INT .) ]
  ! FLOAT           [ reduce using rule 302 (longvalues -> INT .) ]
  ! DOUBLE          [ reduce using rule 302 (longvalues -> INT .) ]
  ! RETURN          [ reduce using rule 302 (longvalues -> INT .) ]
  ! CASE            [ reduce using rule 302 (longvalues -> INT .) ]


state 191

    (306) asignacionFloat -> VAL VARIABLE IGUAL floatvalues .
    (315) doublevalues -> floatvalues .

  ! reduce/reduce conflict for DEF resolved using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for PRINTLN resolved using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for PRINT resolved using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for READLINE resolved using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for VAR resolved using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for VAL resolved using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for WHILE resolved using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for FOR resolved using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for IF resolved using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for $end resolved using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for LLAVE_D resolved using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for INT resolved using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for LONG resolved using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for FLOAT resolved using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for RETURN resolved using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for CASE resolved using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    DEF             reduce using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    VARIABLE        reduce using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    PRINTLN         reduce using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    PRINT           reduce using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    READLINE        reduce using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    VAR             reduce using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    VAL             reduce using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    WHILE           reduce using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    FOR             reduce using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    IF              reduce using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    $end            reduce using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    LLAVE_D         reduce using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    INT             reduce using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    LONG            reduce using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    FLOAT           reduce using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    DOUBLE          reduce using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    RETURN          reduce using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    CASE            reduce using rule 306 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)

  ! DEF             [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! VARIABLE        [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! PRINTLN         [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! PRINT           [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! READLINE        [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! VAR             [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! VAL             [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! WHILE           [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! FOR             [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! IF              [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! $end            [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! LLAVE_D         [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! INT             [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! LONG            [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! FLOAT           [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! DOUBLE          [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! RETURN          [ reduce using rule 315 (doublevalues -> floatvalues .) ]
  ! CASE            [ reduce using rule 315 (doublevalues -> floatvalues .) ]


state 192

    (312) asignacionDouble -> VAL VARIABLE IGUAL doublevalues .

    DEF             reduce using rule 312 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    VARIABLE        reduce using rule 312 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    PRINTLN         reduce using rule 312 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    PRINT           reduce using rule 312 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    READLINE        reduce using rule 312 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    VAR             reduce using rule 312 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    VAL             reduce using rule 312 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    WHILE           reduce using rule 312 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    FOR             reduce using rule 312 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    IF              reduce using rule 312 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    $end            reduce using rule 312 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    LLAVE_D         reduce using rule 312 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    INT             reduce using rule 312 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    LONG            reduce using rule 312 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    FLOAT           reduce using rule 312 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    DOUBLE          reduce using rule 312 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    RETURN          reduce using rule 312 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    CASE            reduce using rule 312 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)


state 193

    (74) asignacionString -> VAL VARIABLE IGUAL STRING .

    DEF             reduce using rule 74 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    VARIABLE        reduce using rule 74 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    PRINTLN         reduce using rule 74 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    PRINT           reduce using rule 74 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    READLINE        reduce using rule 74 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    VAR             reduce using rule 74 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    VAL             reduce using rule 74 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    WHILE           reduce using rule 74 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    FOR             reduce using rule 74 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    IF              reduce using rule 74 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    $end            reduce using rule 74 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    LLAVE_D         reduce using rule 74 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    INT             reduce using rule 74 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    LONG            reduce using rule 74 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    FLOAT           reduce using rule 74 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    DOUBLE          reduce using rule 74 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    RETURN          reduce using rule 74 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    CASE            reduce using rule 74 (asignacionString -> VAL VARIABLE IGUAL STRING .)


state 194

    (80) asignacionChar -> VAL VARIABLE IGUAL CHAR .

    DEF             reduce using rule 80 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    VARIABLE        reduce using rule 80 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    PRINTLN         reduce using rule 80 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    PRINT           reduce using rule 80 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    READLINE        reduce using rule 80 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    VAR             reduce using rule 80 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    VAL             reduce using rule 80 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    WHILE           reduce using rule 80 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    FOR             reduce using rule 80 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    IF              reduce using rule 80 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    $end            reduce using rule 80 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    LLAVE_D         reduce using rule 80 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    INT             reduce using rule 80 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    LONG            reduce using rule 80 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    FLOAT           reduce using rule 80 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    DOUBLE          reduce using rule 80 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    RETURN          reduce using rule 80 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    CASE            reduce using rule 80 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)


state 195

    (86) asignacionBoolean -> VAL VARIABLE IGUAL booleanos .

    DEF             reduce using rule 86 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    VARIABLE        reduce using rule 86 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    PRINTLN         reduce using rule 86 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    PRINT           reduce using rule 86 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    READLINE        reduce using rule 86 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    VAR             reduce using rule 86 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    VAL             reduce using rule 86 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    WHILE           reduce using rule 86 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    FOR             reduce using rule 86 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    IF              reduce using rule 86 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    $end            reduce using rule 86 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    LLAVE_D         reduce using rule 86 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    INT             reduce using rule 86 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    LONG            reduce using rule 86 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    FLOAT           reduce using rule 86 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    DOUBLE          reduce using rule 86 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    RETURN          reduce using rule 86 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    CASE            reduce using rule 86 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)


state 196

    (163) array -> VAL VARIABLE IGUAL ARRAYCLASS . PAR_I valores PAR_D

    PAR_I           shift and go to state 321


state 197

    (167) list -> VAL VARIABLE IGUAL LISTCLASS . PAR_I valores PAR_D

    PAR_I           shift and go to state 322


state 198

    (277) asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .

    DEF             reduce using rule 277 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    VARIABLE        reduce using rule 277 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    PRINTLN         reduce using rule 277 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    PRINT           reduce using rule 277 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    READLINE        reduce using rule 277 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    VAR             reduce using rule 277 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    VAL             reduce using rule 277 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    WHILE           reduce using rule 277 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    FOR             reduce using rule 277 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    IF              reduce using rule 277 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    $end            reduce using rule 277 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    LLAVE_D         reduce using rule 277 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    INT             reduce using rule 277 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    LONG            reduce using rule 277 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    FLOAT           reduce using rule 277 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    DOUBLE          reduce using rule 277 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    RETURN          reduce using rule 277 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    CASE            reduce using rule 277 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)


state 199

    (61) asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS . IGUAL VARIABLE
    (301) asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS . IGUAL longvalues

    IGUAL           shift and go to state 323


state 200

    (65) asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS . IGUAL INT
    (67) asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS . IGUAL VARIABLE

    IGUAL           shift and go to state 324


state 201

    (69) asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS . IGUAL VARIABLE
    (307) asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS . IGUAL floatvalues

    IGUAL           shift and go to state 325


state 202

    (71) asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS . IGUAL VARIABLE
    (313) asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS . IGUAL doublevalues

    IGUAL           shift and go to state 326


state 203

    (75) asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS . IGUAL STRING
    (77) asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS . IGUAL VARIABLE

    IGUAL           shift and go to state 327


state 204

    (81) asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS . IGUAL CHAR
    (83) asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS . IGUAL VARIABLE

    IGUAL           shift and go to state 328


state 205

    (87) asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS . IGUAL booleanos
    (89) asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS . IGUAL VARIABLE

    IGUAL           shift and go to state 329


state 206

    (164) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS . CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    CORCHETE_I      shift and go to state 330


state 207

    (168) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS . CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS . CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D

    CORCHETE_I      shift and go to state 331


state 208

    (175) while -> WHILE PAR_I condicional PAR_D . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 332


state 209

    (228) condicional -> valorC logicos . condicional
    (228) condicional -> . valorC logicos condicional
    (229) condicional -> . valorC
    (230) valorC -> . VARIABLE
    (231) valorC -> . booleanos
    (232) valorC -> . relacional
    (233) valorC -> . NOT VARIABLE
    (234) valorC -> . NOT booleanos
    (235) valorC -> . NOT relacional
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE
    (239) relacional -> . numeros comparacion numeros
    (240) relacional -> . aritmetica comparacion aritmetica
    (241) relacional -> . aritmetica comparacion numeros
    (242) relacional -> . numeros comparacion aritmetica
    (243) relacional -> . booleanos comparacion booleanos
    (244) relacional -> . STRING comparacion STRING
    (245) relacional -> . CHAR comparacion CHAR
    (246) relacional -> . VARIABLE comparacion numeros
    (247) relacional -> . numeros comparacion VARIABLE
    (248) relacional -> . VARIABLE comparacion booleanos
    (249) relacional -> . booleanos comparacion VARIABLE
    (250) relacional -> . VARIABLE comparacion STRING
    (251) relacional -> . STRING comparacion VARIABLE
    (252) relacional -> . VARIABLE comparacion CHAR
    (253) relacional -> . CHAR comparacion VARIABLE
    (254) relacional -> . VARIABLE comparacion VARIABLE
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE

    VARIABLE        shift and go to state 96
    NOT             shift and go to state 99
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    STRING          shift and go to state 102
    CHAR            shift and go to state 103
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    valorC                         shift and go to state 95
    condicional                    shift and go to state 333
    booleanos                      shift and go to state 97
    relacional                     shift and go to state 98
    numeros                        shift and go to state 100
    aritmetica                     shift and go to state 101

state 210

    (236) logicos -> AND .

    VARIABLE        reduce using rule 236 (logicos -> AND .)
    NOT             reduce using rule 236 (logicos -> AND .)
    TRUE            reduce using rule 236 (logicos -> AND .)
    FLASE           reduce using rule 236 (logicos -> AND .)
    STRING          reduce using rule 236 (logicos -> AND .)
    CHAR            reduce using rule 236 (logicos -> AND .)
    INT             reduce using rule 236 (logicos -> AND .)
    LONG            reduce using rule 236 (logicos -> AND .)
    FLOAT           reduce using rule 236 (logicos -> AND .)
    DOUBLE          reduce using rule 236 (logicos -> AND .)


state 211

    (237) logicos -> OR .

    VARIABLE        reduce using rule 237 (logicos -> OR .)
    NOT             reduce using rule 237 (logicos -> OR .)
    TRUE            reduce using rule 237 (logicos -> OR .)
    FLASE           reduce using rule 237 (logicos -> OR .)
    STRING          reduce using rule 237 (logicos -> OR .)
    CHAR            reduce using rule 237 (logicos -> OR .)
    INT             reduce using rule 237 (logicos -> OR .)
    LONG            reduce using rule 237 (logicos -> OR .)
    FLOAT           reduce using rule 237 (logicos -> OR .)
    DOUBLE          reduce using rule 237 (logicos -> OR .)


state 212

    (238) logicos -> NOT .

    VARIABLE        reduce using rule 238 (logicos -> NOT .)
    NOT             reduce using rule 238 (logicos -> NOT .)
    TRUE            reduce using rule 238 (logicos -> NOT .)
    FLASE           reduce using rule 238 (logicos -> NOT .)
    STRING          reduce using rule 238 (logicos -> NOT .)
    CHAR            reduce using rule 238 (logicos -> NOT .)
    INT             reduce using rule 238 (logicos -> NOT .)
    LONG            reduce using rule 238 (logicos -> NOT .)
    FLOAT           reduce using rule 238 (logicos -> NOT .)
    DOUBLE          reduce using rule 238 (logicos -> NOT .)


state 213

    (246) relacional -> VARIABLE comparacion . numeros
    (248) relacional -> VARIABLE comparacion . booleanos
    (250) relacional -> VARIABLE comparacion . STRING
    (252) relacional -> VARIABLE comparacion . CHAR
    (254) relacional -> VARIABLE comparacion . VARIABLE
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    STRING          shift and go to state 337
    CHAR            shift and go to state 338
    VARIABLE        shift and go to state 334
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    numeros                        shift and go to state 335
    booleanos                      shift and go to state 336

state 214

    (260) aritmetica -> VARIABLE aritmeticos . numeros
    (262) aritmetica -> VARIABLE aritmeticos . VARIABLE
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE

    VARIABLE        shift and go to state 339
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    numeros                        shift and go to state 340

state 215

    (255) comparacion -> IGUAL_COMPARACION .

    STRING          reduce using rule 255 (comparacion -> IGUAL_COMPARACION .)
    CHAR            reduce using rule 255 (comparacion -> IGUAL_COMPARACION .)
    VARIABLE        reduce using rule 255 (comparacion -> IGUAL_COMPARACION .)
    INT             reduce using rule 255 (comparacion -> IGUAL_COMPARACION .)
    LONG            reduce using rule 255 (comparacion -> IGUAL_COMPARACION .)
    FLOAT           reduce using rule 255 (comparacion -> IGUAL_COMPARACION .)
    DOUBLE          reduce using rule 255 (comparacion -> IGUAL_COMPARACION .)
    TRUE            reduce using rule 255 (comparacion -> IGUAL_COMPARACION .)
    FLASE           reduce using rule 255 (comparacion -> IGUAL_COMPARACION .)


state 216

    (256) comparacion -> DIFERENTE .

    STRING          reduce using rule 256 (comparacion -> DIFERENTE .)
    CHAR            reduce using rule 256 (comparacion -> DIFERENTE .)
    VARIABLE        reduce using rule 256 (comparacion -> DIFERENTE .)
    INT             reduce using rule 256 (comparacion -> DIFERENTE .)
    LONG            reduce using rule 256 (comparacion -> DIFERENTE .)
    FLOAT           reduce using rule 256 (comparacion -> DIFERENTE .)
    DOUBLE          reduce using rule 256 (comparacion -> DIFERENTE .)
    TRUE            reduce using rule 256 (comparacion -> DIFERENTE .)
    FLASE           reduce using rule 256 (comparacion -> DIFERENTE .)


state 217

    (257) comparacion -> MAYOR .

    STRING          reduce using rule 257 (comparacion -> MAYOR .)
    CHAR            reduce using rule 257 (comparacion -> MAYOR .)
    VARIABLE        reduce using rule 257 (comparacion -> MAYOR .)
    INT             reduce using rule 257 (comparacion -> MAYOR .)
    LONG            reduce using rule 257 (comparacion -> MAYOR .)
    FLOAT           reduce using rule 257 (comparacion -> MAYOR .)
    DOUBLE          reduce using rule 257 (comparacion -> MAYOR .)
    TRUE            reduce using rule 257 (comparacion -> MAYOR .)
    FLASE           reduce using rule 257 (comparacion -> MAYOR .)


state 218

    (258) comparacion -> MENOR .

    STRING          reduce using rule 258 (comparacion -> MENOR .)
    CHAR            reduce using rule 258 (comparacion -> MENOR .)
    VARIABLE        reduce using rule 258 (comparacion -> MENOR .)
    INT             reduce using rule 258 (comparacion -> MENOR .)
    LONG            reduce using rule 258 (comparacion -> MENOR .)
    FLOAT           reduce using rule 258 (comparacion -> MENOR .)
    DOUBLE          reduce using rule 258 (comparacion -> MENOR .)
    TRUE            reduce using rule 258 (comparacion -> MENOR .)
    FLASE           reduce using rule 258 (comparacion -> MENOR .)


state 219

    (265) aritmeticos -> MENOS .

    VARIABLE        reduce using rule 265 (aritmeticos -> MENOS .)
    INT             reduce using rule 265 (aritmeticos -> MENOS .)
    LONG            reduce using rule 265 (aritmeticos -> MENOS .)
    FLOAT           reduce using rule 265 (aritmeticos -> MENOS .)
    DOUBLE          reduce using rule 265 (aritmeticos -> MENOS .)


state 220

    (266) aritmeticos -> MAS .

    VARIABLE        reduce using rule 266 (aritmeticos -> MAS .)
    INT             reduce using rule 266 (aritmeticos -> MAS .)
    LONG            reduce using rule 266 (aritmeticos -> MAS .)
    FLOAT           reduce using rule 266 (aritmeticos -> MAS .)
    DOUBLE          reduce using rule 266 (aritmeticos -> MAS .)


state 221

    (267) aritmeticos -> MULTIPLICACION .

    VARIABLE        reduce using rule 267 (aritmeticos -> MULTIPLICACION .)
    INT             reduce using rule 267 (aritmeticos -> MULTIPLICACION .)
    LONG            reduce using rule 267 (aritmeticos -> MULTIPLICACION .)
    FLOAT           reduce using rule 267 (aritmeticos -> MULTIPLICACION .)
    DOUBLE          reduce using rule 267 (aritmeticos -> MULTIPLICACION .)


state 222

    (268) aritmeticos -> DIVISION .

    VARIABLE        reduce using rule 268 (aritmeticos -> DIVISION .)
    INT             reduce using rule 268 (aritmeticos -> DIVISION .)
    LONG            reduce using rule 268 (aritmeticos -> DIVISION .)
    FLOAT           reduce using rule 268 (aritmeticos -> DIVISION .)
    DOUBLE          reduce using rule 268 (aritmeticos -> DIVISION .)


state 223

    (269) aritmeticos -> MOD .

    VARIABLE        reduce using rule 269 (aritmeticos -> MOD .)
    INT             reduce using rule 269 (aritmeticos -> MOD .)
    LONG            reduce using rule 269 (aritmeticos -> MOD .)
    FLOAT           reduce using rule 269 (aritmeticos -> MOD .)
    DOUBLE          reduce using rule 269 (aritmeticos -> MOD .)


state 224

    (243) relacional -> booleanos comparacion . booleanos
    (249) relacional -> booleanos comparacion . VARIABLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    VARIABLE        shift and go to state 342
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    booleanos                      shift and go to state 341

state 225

    (233) valorC -> NOT VARIABLE .
    (246) relacional -> VARIABLE . comparacion numeros
    (248) relacional -> VARIABLE . comparacion booleanos
    (250) relacional -> VARIABLE . comparacion STRING
    (252) relacional -> VARIABLE . comparacion CHAR
    (254) relacional -> VARIABLE . comparacion VARIABLE
    (260) aritmetica -> VARIABLE . aritmeticos numeros
    (262) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (255) comparacion -> . IGUAL_COMPARACION
    (256) comparacion -> . DIFERENTE
    (257) comparacion -> . MAYOR
    (258) comparacion -> . MENOR
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD

    AND             reduce using rule 233 (valorC -> NOT VARIABLE .)
    OR              reduce using rule 233 (valorC -> NOT VARIABLE .)
    NOT             reduce using rule 233 (valorC -> NOT VARIABLE .)
    PAR_D           reduce using rule 233 (valorC -> NOT VARIABLE .)
    IGUAL_COMPARACION shift and go to state 215
    DIFERENTE       shift and go to state 216
    MAYOR           shift and go to state 217
    MENOR           shift and go to state 218
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    comparacion                    shift and go to state 213
    aritmeticos                    shift and go to state 214

state 226

    (234) valorC -> NOT booleanos .
    (243) relacional -> booleanos . comparacion booleanos
    (249) relacional -> booleanos . comparacion VARIABLE
    (255) comparacion -> . IGUAL_COMPARACION
    (256) comparacion -> . DIFERENTE
    (257) comparacion -> . MAYOR
    (258) comparacion -> . MENOR

    AND             reduce using rule 234 (valorC -> NOT booleanos .)
    OR              reduce using rule 234 (valorC -> NOT booleanos .)
    NOT             reduce using rule 234 (valorC -> NOT booleanos .)
    PAR_D           reduce using rule 234 (valorC -> NOT booleanos .)
    IGUAL_COMPARACION shift and go to state 215
    DIFERENTE       shift and go to state 216
    MAYOR           shift and go to state 217
    MENOR           shift and go to state 218

    comparacion                    shift and go to state 224

state 227

    (235) valorC -> NOT relacional .

    AND             reduce using rule 235 (valorC -> NOT relacional .)
    OR              reduce using rule 235 (valorC -> NOT relacional .)
    NOT             reduce using rule 235 (valorC -> NOT relacional .)
    PAR_D           reduce using rule 235 (valorC -> NOT relacional .)


state 228

    (239) relacional -> numeros comparacion . numeros
    (242) relacional -> numeros comparacion . aritmetica
    (247) relacional -> numeros comparacion . VARIABLE
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE

    VARIABLE        shift and go to state 345
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    numeros                        shift and go to state 343
    aritmetica                     shift and go to state 344

state 229

    (259) aritmetica -> numeros aritmeticos . numeros
    (261) aritmetica -> numeros aritmeticos . VARIABLE
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE

    VARIABLE        shift and go to state 347
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    numeros                        shift and go to state 346

state 230

    (240) relacional -> aritmetica comparacion . aritmetica
    (241) relacional -> aritmetica comparacion . numeros
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE

    VARIABLE        shift and go to state 350
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    aritmetica                     shift and go to state 348
    numeros                        shift and go to state 349

state 231

    (263) aritmetica -> aritmetica aritmeticos . numeros
    (264) aritmetica -> aritmetica aritmeticos . VARIABLE
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE

    VARIABLE        shift and go to state 352
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    numeros                        shift and go to state 351

state 232

    (244) relacional -> STRING comparacion . STRING
    (251) relacional -> STRING comparacion . VARIABLE

    STRING          shift and go to state 353
    VARIABLE        shift and go to state 354


state 233

    (245) relacional -> CHAR comparacion . CHAR
    (253) relacional -> CHAR comparacion . VARIABLE

    CHAR            shift and go to state 355
    VARIABLE        shift and go to state 356


state 234

    (176) for -> FOR PAR_I VAR VARIABLE . ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> FOR PAR_I VAR VARIABLE . ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> FOR PAR_I VAR VARIABLE . ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D

    ITERATOR        shift and go to state 357


state 235

    (177) for -> FOR PAR_I VARIABLE ITERATOR . VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> FOR PAR_I VARIABLE ITERATOR . INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> FOR PAR_I VARIABLE ITERATOR . INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D

    VARIABLE        shift and go to state 358
    INT             shift and go to state 359


state 236

    (221) if -> IF PAR_I condicional PAR_D . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 360


state 237

    (1) inicio -> OBJECT VARIABLE LLAVE_I cuerpo LLAVE_D .

    $end            reduce using rule 1 (inicio -> OBJECT VARIABLE LLAVE_I cuerpo LLAVE_D .)


state 238

    (149) varparen -> varparen PAR_I valores PAR_D .

    PAR_I           reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    $end            reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    LLAVE_D         reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    VAR             reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    VAL             reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    VARIABLE        reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    PRINTLN         reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    PRINT           reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    READLINE        reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    WHILE           reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    FOR             reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    IF              reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    INT             reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    LONG            reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    FLOAT           reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    DOUBLE          reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    RETURN          reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    PUNTO           reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    DEF             reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)
    CASE            reduce using rule 149 (varparen -> varparen PAR_I valores PAR_D .)


state 239

    (182) match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .

    DEF             reduce using rule 182 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    VARIABLE        reduce using rule 182 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    PRINTLN         reduce using rule 182 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    PRINT           reduce using rule 182 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    READLINE        reduce using rule 182 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    VAR             reduce using rule 182 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    VAL             reduce using rule 182 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    WHILE           reduce using rule 182 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    FOR             reduce using rule 182 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    IF              reduce using rule 182 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    $end            reduce using rule 182 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    LLAVE_D         reduce using rule 182 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    INT             reduce using rule 182 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    LONG            reduce using rule 182 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    FLOAT           reduce using rule 182 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    DOUBLE          reduce using rule 182 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    RETURN          reduce using rule 182 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)


state 240

    (192) casesInt -> caseInt casesInt .

    LLAVE_D         reduce using rule 192 (casesInt -> caseInt casesInt .)


state 241

    (193) casesInt -> caseInt defcase .

    LLAVE_D         reduce using rule 193 (casesInt -> caseInt defcase .)


state 242

    (218) defcase -> CASE . SUBGUION FUNCION_FLECHA codeBlock
    (190) caseInt -> CASE . INT FUNCION_FLECHA codeBlock

    SUBGUION        shift and go to state 361
    INT             shift and go to state 261


state 243

    (196) casesLgn -> caseLgn casesLgn .

    LLAVE_D         reduce using rule 196 (casesLgn -> caseLgn casesLgn .)


state 244

    (197) casesLgn -> caseLgn defcase .

    LLAVE_D         reduce using rule 197 (casesLgn -> caseLgn defcase .)


state 245

    (218) defcase -> CASE . SUBGUION FUNCION_FLECHA codeBlock
    (194) caseLgn -> CASE . LONG FUNCION_FLECHA codeBlock

    SUBGUION        shift and go to state 361
    LONG            shift and go to state 262


state 246

    (200) casesFlt -> caseFlt casesFlt .

    LLAVE_D         reduce using rule 200 (casesFlt -> caseFlt casesFlt .)


state 247

    (201) casesFlt -> caseFlt defcase .

    LLAVE_D         reduce using rule 201 (casesFlt -> caseFlt defcase .)


state 248

    (218) defcase -> CASE . SUBGUION FUNCION_FLECHA codeBlock
    (198) caseFlt -> CASE . FLOAT FUNCION_FLECHA codeBlock

    SUBGUION        shift and go to state 361
    FLOAT           shift and go to state 263


state 249

    (204) casesDob -> caseDob casesDob .

    LLAVE_D         reduce using rule 204 (casesDob -> caseDob casesDob .)


state 250

    (205) casesDob -> caseDob defcase .

    LLAVE_D         reduce using rule 205 (casesDob -> caseDob defcase .)


state 251

    (218) defcase -> CASE . SUBGUION FUNCION_FLECHA codeBlock
    (202) caseDob -> CASE . DOUBLE FUNCION_FLECHA codeBlock

    SUBGUION        shift and go to state 361
    DOUBLE          shift and go to state 264


state 252

    (208) casesStr -> caseStr casesStr .

    LLAVE_D         reduce using rule 208 (casesStr -> caseStr casesStr .)


state 253

    (209) casesStr -> caseStr defcase .

    LLAVE_D         reduce using rule 209 (casesStr -> caseStr defcase .)


state 254

    (218) defcase -> CASE . SUBGUION FUNCION_FLECHA codeBlock
    (206) caseStr -> CASE . STRING FUNCION_FLECHA codeBlock

    SUBGUION        shift and go to state 361
    STRING          shift and go to state 265


state 255

    (212) casesChar -> caseChar casesChar .

    LLAVE_D         reduce using rule 212 (casesChar -> caseChar casesChar .)


state 256

    (213) casesChar -> caseChar defcase .

    LLAVE_D         reduce using rule 213 (casesChar -> caseChar defcase .)


state 257

    (218) defcase -> CASE . SUBGUION FUNCION_FLECHA codeBlock
    (210) caseChar -> CASE . CHAR FUNCION_FLECHA codeBlock

    SUBGUION        shift and go to state 361
    CHAR            shift and go to state 266


state 258

    (216) casesBool -> caseBool casesBool .

    LLAVE_D         reduce using rule 216 (casesBool -> caseBool casesBool .)


state 259

    (217) casesBool -> caseBool defcase .

    LLAVE_D         reduce using rule 217 (casesBool -> caseBool defcase .)


state 260

    (218) defcase -> CASE . SUBGUION FUNCION_FLECHA codeBlock
    (214) caseBool -> CASE . booleanos FUNCION_FLECHA codeBlock
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    SUBGUION        shift and go to state 361
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    booleanos                      shift and go to state 267

state 261

    (190) caseInt -> CASE INT . FUNCION_FLECHA codeBlock

    FUNCION_FLECHA  shift and go to state 362


state 262

    (194) caseLgn -> CASE LONG . FUNCION_FLECHA codeBlock

    FUNCION_FLECHA  shift and go to state 363


state 263

    (198) caseFlt -> CASE FLOAT . FUNCION_FLECHA codeBlock

    FUNCION_FLECHA  shift and go to state 364


state 264

    (202) caseDob -> CASE DOUBLE . FUNCION_FLECHA codeBlock

    FUNCION_FLECHA  shift and go to state 365


state 265

    (206) caseStr -> CASE STRING . FUNCION_FLECHA codeBlock

    FUNCION_FLECHA  shift and go to state 366


state 266

    (210) caseChar -> CASE CHAR . FUNCION_FLECHA codeBlock

    FUNCION_FLECHA  shift and go to state 367


state 267

    (214) caseBool -> CASE booleanos . FUNCION_FLECHA codeBlock

    FUNCION_FLECHA  shift and go to state 368


state 268

    (171) valores -> valor COMA valores .

    PAR_D           reduce using rule 171 (valores -> valor COMA valores .)


state 269

    (108) valor -> VARIABLE PAR_I VARIABLE . PAR_D

    PAR_D           shift and go to state 369


state 270

    (109) valor -> VARIABLE PAR_I INT . PAR_D

    PAR_D           shift and go to state 370


state 271

    (4) io -> VARIABLE PUNTO VARIABLE PUNTO . VARIABLE PUNTO READLINE

    VARIABLE        shift and go to state 371


state 272

    (224) elseif -> ELSE IF PAR_I condicional . PAR_D LLAVE_I contenido LLAVE_D
    (225) elseif -> ELSE IF PAR_I condicional . PAR_D LLAVE_I contenido LLAVE_D elseif

    PAR_D           shift and go to state 372


state 273

    (226) else -> ELSE LLAVE_I contenido LLAVE_D .

    ELSE            reduce using rule 226 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    DEF             reduce using rule 226 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 226 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 226 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 226 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 226 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 226 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 226 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 226 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 226 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 226 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 226 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 226 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 226 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 226 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 226 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 226 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 226 (else -> ELSE LLAVE_I contenido LLAVE_D .)


state 274

    (30) contenido -> asignacion contenido .

    LLAVE_D         reduce using rule 30 (contenido -> asignacion contenido .)
    RETURN          reduce using rule 30 (contenido -> asignacion contenido .)


state 275

    (31) contenido -> reasignacion contenido .

    LLAVE_D         reduce using rule 31 (contenido -> reasignacion contenido .)
    RETURN          reduce using rule 31 (contenido -> reasignacion contenido .)


state 276

    (32) contenido -> funcall contenido .

    LLAVE_D         reduce using rule 32 (contenido -> funcall contenido .)
    RETURN          reduce using rule 32 (contenido -> funcall contenido .)


state 277

    (33) contenido -> impresion contenido .

    LLAVE_D         reduce using rule 33 (contenido -> impresion contenido .)
    RETURN          reduce using rule 33 (contenido -> impresion contenido .)


state 278

    (34) contenido -> entrada contenido .

    LLAVE_D         reduce using rule 34 (contenido -> entrada contenido .)
    RETURN          reduce using rule 34 (contenido -> entrada contenido .)


state 279

    (35) contenido -> while contenido .

    LLAVE_D         reduce using rule 35 (contenido -> while contenido .)
    RETURN          reduce using rule 35 (contenido -> while contenido .)


state 280

    (36) contenido -> for contenido .

    LLAVE_D         reduce using rule 36 (contenido -> for contenido .)
    RETURN          reduce using rule 36 (contenido -> for contenido .)


state 281

    (38) contenido -> match contenido .

    LLAVE_D         reduce using rule 38 (contenido -> match contenido .)
    RETURN          reduce using rule 38 (contenido -> match contenido .)


state 282

    (37) contenido -> if contenido .

    LLAVE_D         reduce using rule 37 (contenido -> if contenido .)
    RETURN          reduce using rule 37 (contenido -> if contenido .)


state 283

    (39) contenido -> aritmetica contenido .

    LLAVE_D         reduce using rule 39 (contenido -> aritmetica contenido .)
    RETURN          reduce using rule 39 (contenido -> aritmetica contenido .)


state 284

    (90) reasignacion -> VARIABLE IGUAL . valor
    (91) reasignacion -> VARIABLE IGUAL . returnfun
    (92) reasignacion -> VARIABLE IGUAL . aritmetica
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (151) returnfun -> . returnCastable
    (152) returnfun -> . castingcall
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE
    (153) returnCastable -> . entrada
    (154) returnCastable -> . funcall
    (155) castingcall -> . returnCastable PUNTO castingfun
    (156) castingcall -> . VARIABLE PUNTO castingfun
    (145) entrada -> . READLINE PAR_I PAR_D
    (146) funcall -> . VARIABLE varparen

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 373
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    READLINE        shift and go to state 18

    valor                          shift and go to state 374
    returnfun                      shift and go to state 375
    aritmetica                     shift and go to state 376
    numeros                        shift and go to state 377
    booleanos                      shift and go to state 69
    returnCastable                 shift and go to state 168
    castingcall                    shift and go to state 169
    entrada                        shift and go to state 173
    funcall                        shift and go to state 174

state 285

    (93) reasignacion -> VARIABLE PAR_I . INT PAR_D IGUAL valor
    (147) varparen -> PAR_I . valores PAR_D
    (148) varparen -> PAR_I . PAR_D
    (170) valores -> . valor
    (171) valores -> . valor COMA valores
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    INT             shift and go to state 378
    PAR_D           shift and go to state 63
    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valor                          shift and go to state 64
    valores                        shift and go to state 62
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 286

    (116) funcion -> DEF VARIABLE parametro IGUAL LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 379
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 287

    (117) funcion -> DEF VARIABLE parametro LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 380


state 288

    (124) funcion -> DEF VARIABLE parametro dectipo IGUAL . LLAVE_I contenido RETURN valor LLAVE_D
    (125) funcion -> DEF VARIABLE parametro dectipo IGUAL . LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (126) funcion -> DEF VARIABLE parametro dectipo IGUAL . LLAVE_I contenido RETURN returnfun LLAVE_D
    (127) funcion -> DEF VARIABLE parametro dectipo IGUAL . LLAVE_I contenido RETURN aritmetica LLAVE_D
    (128) funcion -> DEF VARIABLE parametro dectipo IGUAL . LLAVE_I RETURN valor LLAVE_D
    (129) funcion -> DEF VARIABLE parametro dectipo IGUAL . LLAVE_I RETURN VARIABLE LLAVE_D
    (130) funcion -> DEF VARIABLE parametro dectipo IGUAL . LLAVE_I RETURN returnfun LLAVE_D
    (131) funcion -> DEF VARIABLE parametro dectipo IGUAL . LLAVE_I RETURN aritmetica LLAVE_D

    LLAVE_I         shift and go to state 381


state 289

    (132) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL . LLAVE_I contenido RETURN tuple LLAVE_D
    (133) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL . LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (134) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL . LLAVE_I contenido RETURN returnfun LLAVE_D

    LLAVE_I         shift and go to state 382


state 290

    (135) dectipo -> DOBLE_PUNTO tipo .

    IGUAL           reduce using rule 135 (dectipo -> DOBLE_PUNTO tipo .)


state 291

    (136) dectipoTupla -> DOBLE_PUNTO PAR_I . tipos PAR_D
    (137) tipos -> . tipo
    (138) tipos -> . tipo tiposentry
    (94) tipo -> . CHARCLASS
    (95) tipo -> . STRINGCLASS
    (96) tipo -> . BOOLCLASS
    (97) tipo -> . INTCLASS
    (98) tipo -> . LONGCLASS
    (99) tipo -> . DOUBLECLASS
    (100) tipo -> . FLOATCLASS
    (101) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (102) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    CHARCLASS       shift and go to state 292
    STRINGCLASS     shift and go to state 293
    BOOLCLASS       shift and go to state 294
    INTCLASS        shift and go to state 295
    LONGCLASS       shift and go to state 296
    DOUBLECLASS     shift and go to state 297
    FLOATCLASS      shift and go to state 298
    ARRAYCLASS      shift and go to state 299
    LISTCLASS       shift and go to state 300

    tipos                          shift and go to state 383
    tipo                           shift and go to state 384

state 292

    (94) tipo -> CHARCLASS .

    IGUAL           reduce using rule 94 (tipo -> CHARCLASS .)
    COMA            reduce using rule 94 (tipo -> CHARCLASS .)
    PAR_D           reduce using rule 94 (tipo -> CHARCLASS .)
    CORCHETE_D      reduce using rule 94 (tipo -> CHARCLASS .)


state 293

    (95) tipo -> STRINGCLASS .

    IGUAL           reduce using rule 95 (tipo -> STRINGCLASS .)
    COMA            reduce using rule 95 (tipo -> STRINGCLASS .)
    PAR_D           reduce using rule 95 (tipo -> STRINGCLASS .)
    CORCHETE_D      reduce using rule 95 (tipo -> STRINGCLASS .)


state 294

    (96) tipo -> BOOLCLASS .

    IGUAL           reduce using rule 96 (tipo -> BOOLCLASS .)
    COMA            reduce using rule 96 (tipo -> BOOLCLASS .)
    PAR_D           reduce using rule 96 (tipo -> BOOLCLASS .)
    CORCHETE_D      reduce using rule 96 (tipo -> BOOLCLASS .)


state 295

    (97) tipo -> INTCLASS .

    IGUAL           reduce using rule 97 (tipo -> INTCLASS .)
    COMA            reduce using rule 97 (tipo -> INTCLASS .)
    PAR_D           reduce using rule 97 (tipo -> INTCLASS .)
    CORCHETE_D      reduce using rule 97 (tipo -> INTCLASS .)


state 296

    (98) tipo -> LONGCLASS .

    IGUAL           reduce using rule 98 (tipo -> LONGCLASS .)
    COMA            reduce using rule 98 (tipo -> LONGCLASS .)
    PAR_D           reduce using rule 98 (tipo -> LONGCLASS .)
    CORCHETE_D      reduce using rule 98 (tipo -> LONGCLASS .)


state 297

    (99) tipo -> DOUBLECLASS .

    IGUAL           reduce using rule 99 (tipo -> DOUBLECLASS .)
    COMA            reduce using rule 99 (tipo -> DOUBLECLASS .)
    PAR_D           reduce using rule 99 (tipo -> DOUBLECLASS .)
    CORCHETE_D      reduce using rule 99 (tipo -> DOUBLECLASS .)


state 298

    (100) tipo -> FLOATCLASS .

    IGUAL           reduce using rule 100 (tipo -> FLOATCLASS .)
    COMA            reduce using rule 100 (tipo -> FLOATCLASS .)
    PAR_D           reduce using rule 100 (tipo -> FLOATCLASS .)
    CORCHETE_D      reduce using rule 100 (tipo -> FLOATCLASS .)


state 299

    (101) tipo -> ARRAYCLASS . CORCHETE_I tipo CORCHETE_D

    CORCHETE_I      shift and go to state 385


state 300

    (102) tipo -> LISTCLASS . CORCHETE_I tipo CORCHETE_D

    CORCHETE_I      shift and go to state 386


state 301

    (122) parametros -> PAR_I declaracion PAR_D .
    (123) parametros -> PAR_I declaracion PAR_D . parametros
    (122) parametros -> . PAR_I declaracion PAR_D
    (123) parametros -> . PAR_I declaracion PAR_D parametros

    IGUAL           reduce using rule 122 (parametros -> PAR_I declaracion PAR_D .)
    LLAVE_I         reduce using rule 122 (parametros -> PAR_I declaracion PAR_D .)
    DOBLE_PUNTO     reduce using rule 122 (parametros -> PAR_I declaracion PAR_D .)
    PAR_I           shift and go to state 387

    parametros                     shift and go to state 388

state 302

    (118) declaracion -> VARIABLE DOBLE_PUNTO . tipo
    (119) declaracion -> VARIABLE DOBLE_PUNTO . tipo IGUAL valor
    (94) tipo -> . CHARCLASS
    (95) tipo -> . STRINGCLASS
    (96) tipo -> . BOOLCLASS
    (97) tipo -> . INTCLASS
    (98) tipo -> . LONGCLASS
    (99) tipo -> . DOUBLECLASS
    (100) tipo -> . FLOATCLASS
    (101) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (102) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    CHARCLASS       shift and go to state 292
    STRINGCLASS     shift and go to state 293
    BOOLCLASS       shift and go to state 294
    INTCLASS        shift and go to state 295
    LONGCLASS       shift and go to state 296
    DOUBLECLASS     shift and go to state 297
    FLOATCLASS      shift and go to state 298
    ARRAYCLASS      shift and go to state 299
    LISTCLASS       shift and go to state 300

    tipo                           shift and go to state 389

state 303

    (143) valorI -> valor MAS valorI .

    PAR_D           reduce using rule 143 (valorI -> valor MAS valorI .)


state 304

    (156) castingcall -> VARIABLE PUNTO . castingfun
    (157) castingfun -> . TO_INT
    (158) castingfun -> . TO_DOUBLE
    (159) castingfun -> . TO_FLOAT
    (160) castingfun -> . TO_LONG

    TO_INT          shift and go to state 391
    TO_DOUBLE       shift and go to state 392
    TO_FLOAT        shift and go to state 393
    TO_LONG         shift and go to state 394

    castingfun                     shift and go to state 390

state 305

    (161) array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I . valores PAR_D
    (170) valores -> . valor
    (171) valores -> . valor COMA valores
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valores                        shift and go to state 395
    valor                          shift and go to state 64
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 306

    (172) tuple -> PAR_I valores . PAR_D

    PAR_D           shift and go to state 396


state 307

    (155) castingcall -> returnCastable PUNTO . castingfun
    (157) castingfun -> . TO_INT
    (158) castingfun -> . TO_DOUBLE
    (159) castingfun -> . TO_FLOAT
    (160) castingfun -> . TO_LONG

    TO_INT          shift and go to state 391
    TO_DOUBLE       shift and go to state 392
    TO_FLOAT        shift and go to state 393
    TO_LONG         shift and go to state 394

    castingfun                     shift and go to state 397

state 308

    (60) asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL . VARIABLE
    (299) asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL . longvalues
    (302) longvalues -> . INT
    (303) longvalues -> . LONG

    VARIABLE        shift and go to state 398
    INT             shift and go to state 400
    LONG            shift and go to state 401

    longvalues                     shift and go to state 399

state 309

    (63) asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL . INT
    (66) asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL . VARIABLE

    INT             shift and go to state 403
    VARIABLE        shift and go to state 402


state 310

    (68) asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL . VARIABLE
    (305) asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL . floatvalues
    (308) floatvalues -> . FLOAT
    (309) floatvalues -> . longvalues
    (302) longvalues -> . INT
    (303) longvalues -> . LONG

    VARIABLE        shift and go to state 404
    FLOAT           shift and go to state 406
    INT             shift and go to state 400
    LONG            shift and go to state 401

    floatvalues                    shift and go to state 405
    longvalues                     shift and go to state 407

state 311

    (70) asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL . VARIABLE
    (311) asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL . doublevalues
    (314) doublevalues -> . DOUBLE
    (315) doublevalues -> . floatvalues
    (308) floatvalues -> . FLOAT
    (309) floatvalues -> . longvalues
    (302) longvalues -> . INT
    (303) longvalues -> . LONG

    VARIABLE        shift and go to state 408
    DOUBLE          shift and go to state 410
    FLOAT           shift and go to state 406
    INT             shift and go to state 400
    LONG            shift and go to state 401

    doublevalues                   shift and go to state 409
    floatvalues                    shift and go to state 411
    longvalues                     shift and go to state 407

state 312

    (73) asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL . STRING
    (76) asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL . VARIABLE

    STRING          shift and go to state 413
    VARIABLE        shift and go to state 412


state 313

    (79) asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL . CHAR
    (82) asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL . VARIABLE

    CHAR            shift and go to state 415
    VARIABLE        shift and go to state 414


state 314

    (85) asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL . booleanos
    (88) asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL . VARIABLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    VARIABLE        shift and go to state 416
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    booleanos                      shift and go to state 417

state 315

    (162) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I . tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (270) arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I . INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I . DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D
    (94) tipo -> . CHARCLASS
    (95) tipo -> . STRINGCLASS
    (96) tipo -> . BOOLCLASS
    (97) tipo -> . INTCLASS
    (98) tipo -> . LONGCLASS
    (99) tipo -> . DOUBLECLASS
    (100) tipo -> . FLOATCLASS
    (101) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (102) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    INTCLASS        shift and go to state 419
    DOUBLECLASS     shift and go to state 420
    CHARCLASS       shift and go to state 292
    STRINGCLASS     shift and go to state 293
    BOOLCLASS       shift and go to state 294
    LONGCLASS       shift and go to state 296
    FLOATCLASS      shift and go to state 298
    ARRAYCLASS      shift and go to state 299
    LISTCLASS       shift and go to state 300

    tipo                           shift and go to state 418

state 316

    (278) dectupla -> PAR_I STRINGCLASS . COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D
    (279) dectupla -> PAR_I STRINGCLASS . COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D
    (280) dectupla -> PAR_I STRINGCLASS . COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D
    (281) dectupla -> PAR_I STRINGCLASS . COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D

    COMA            shift and go to state 421


state 317

    (294) dectupla -> PAR_I INTCLASS . COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D
    (295) dectupla -> PAR_I INTCLASS . COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D
    (296) dectupla -> PAR_I INTCLASS . COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D
    (297) dectupla -> PAR_I INTCLASS . COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D

    COMA            shift and go to state 422


state 318

    (290) dectupla -> PAR_I LONGCLASS . COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D
    (291) dectupla -> PAR_I LONGCLASS . COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D
    (292) dectupla -> PAR_I LONGCLASS . COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D
    (293) dectupla -> PAR_I LONGCLASS . COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D

    COMA            shift and go to state 423


state 319

    (286) dectupla -> PAR_I DOUBLECLASS . COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D
    (287) dectupla -> PAR_I DOUBLECLASS . COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D
    (288) dectupla -> PAR_I DOUBLECLASS . COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D
    (289) dectupla -> PAR_I DOUBLECLASS . COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D

    COMA            shift and go to state 424


state 320

    (282) dectupla -> PAR_I FLOATCLASS . COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D
    (283) dectupla -> PAR_I FLOATCLASS . COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D
    (284) dectupla -> PAR_I FLOATCLASS . COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D
    (285) dectupla -> PAR_I FLOATCLASS . COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D

    COMA            shift and go to state 425


state 321

    (163) array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I . valores PAR_D
    (170) valores -> . valor
    (171) valores -> . valor COMA valores
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valores                        shift and go to state 426
    valor                          shift and go to state 64
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 322

    (167) list -> VAL VARIABLE IGUAL LISTCLASS PAR_I . valores PAR_D
    (170) valores -> . valor
    (171) valores -> . valor COMA valores
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valores                        shift and go to state 427
    valor                          shift and go to state 64
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 323

    (61) asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL . VARIABLE
    (301) asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL . longvalues
    (302) longvalues -> . INT
    (303) longvalues -> . LONG

    VARIABLE        shift and go to state 428
    INT             shift and go to state 400
    LONG            shift and go to state 401

    longvalues                     shift and go to state 429

state 324

    (65) asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL . INT
    (67) asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL . VARIABLE

    INT             shift and go to state 431
    VARIABLE        shift and go to state 430


state 325

    (69) asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL . VARIABLE
    (307) asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL . floatvalues
    (308) floatvalues -> . FLOAT
    (309) floatvalues -> . longvalues
    (302) longvalues -> . INT
    (303) longvalues -> . LONG

    VARIABLE        shift and go to state 432
    FLOAT           shift and go to state 406
    INT             shift and go to state 400
    LONG            shift and go to state 401

    floatvalues                    shift and go to state 433
    longvalues                     shift and go to state 407

state 326

    (71) asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL . VARIABLE
    (313) asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL . doublevalues
    (314) doublevalues -> . DOUBLE
    (315) doublevalues -> . floatvalues
    (308) floatvalues -> . FLOAT
    (309) floatvalues -> . longvalues
    (302) longvalues -> . INT
    (303) longvalues -> . LONG

    VARIABLE        shift and go to state 434
    DOUBLE          shift and go to state 410
    FLOAT           shift and go to state 406
    INT             shift and go to state 400
    LONG            shift and go to state 401

    doublevalues                   shift and go to state 435
    floatvalues                    shift and go to state 411
    longvalues                     shift and go to state 407

state 327

    (75) asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL . STRING
    (77) asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL . VARIABLE

    STRING          shift and go to state 437
    VARIABLE        shift and go to state 436


state 328

    (81) asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL . CHAR
    (83) asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL . VARIABLE

    CHAR            shift and go to state 439
    VARIABLE        shift and go to state 438


state 329

    (87) asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL . booleanos
    (89) asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL . VARIABLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    VARIABLE        shift and go to state 440
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    booleanos                      shift and go to state 441

state 330

    (164) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I . tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (94) tipo -> . CHARCLASS
    (95) tipo -> . STRINGCLASS
    (96) tipo -> . BOOLCLASS
    (97) tipo -> . INTCLASS
    (98) tipo -> . LONGCLASS
    (99) tipo -> . DOUBLECLASS
    (100) tipo -> . FLOATCLASS
    (101) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (102) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    CHARCLASS       shift and go to state 292
    STRINGCLASS     shift and go to state 293
    BOOLCLASS       shift and go to state 294
    INTCLASS        shift and go to state 295
    LONGCLASS       shift and go to state 296
    DOUBLECLASS     shift and go to state 297
    FLOATCLASS      shift and go to state 298
    ARRAYCLASS      shift and go to state 299
    LISTCLASS       shift and go to state 300

    tipo                           shift and go to state 442

state 331

    (168) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I . tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I . tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (94) tipo -> . CHARCLASS
    (95) tipo -> . STRINGCLASS
    (96) tipo -> . BOOLCLASS
    (97) tipo -> . INTCLASS
    (98) tipo -> . LONGCLASS
    (99) tipo -> . DOUBLECLASS
    (100) tipo -> . FLOATCLASS
    (101) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (102) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    CHARCLASS       shift and go to state 292
    STRINGCLASS     shift and go to state 293
    BOOLCLASS       shift and go to state 294
    INTCLASS        shift and go to state 295
    LONGCLASS       shift and go to state 296
    DOUBLECLASS     shift and go to state 297
    FLOATCLASS      shift and go to state 298
    ARRAYCLASS      shift and go to state 299
    LISTCLASS       shift and go to state 300

    tipo                           shift and go to state 443

state 332

    (175) while -> WHILE PAR_I condicional PAR_D LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 444
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 333

    (228) condicional -> valorC logicos condicional .

    PAR_D           reduce using rule 228 (condicional -> valorC logicos condicional .)


state 334

    (254) relacional -> VARIABLE comparacion VARIABLE .

    AND             reduce using rule 254 (relacional -> VARIABLE comparacion VARIABLE .)
    OR              reduce using rule 254 (relacional -> VARIABLE comparacion VARIABLE .)
    NOT             reduce using rule 254 (relacional -> VARIABLE comparacion VARIABLE .)
    PAR_D           reduce using rule 254 (relacional -> VARIABLE comparacion VARIABLE .)


state 335

    (246) relacional -> VARIABLE comparacion numeros .

    AND             reduce using rule 246 (relacional -> VARIABLE comparacion numeros .)
    OR              reduce using rule 246 (relacional -> VARIABLE comparacion numeros .)
    NOT             reduce using rule 246 (relacional -> VARIABLE comparacion numeros .)
    PAR_D           reduce using rule 246 (relacional -> VARIABLE comparacion numeros .)


state 336

    (248) relacional -> VARIABLE comparacion booleanos .

    AND             reduce using rule 248 (relacional -> VARIABLE comparacion booleanos .)
    OR              reduce using rule 248 (relacional -> VARIABLE comparacion booleanos .)
    NOT             reduce using rule 248 (relacional -> VARIABLE comparacion booleanos .)
    PAR_D           reduce using rule 248 (relacional -> VARIABLE comparacion booleanos .)


state 337

    (250) relacional -> VARIABLE comparacion STRING .

    AND             reduce using rule 250 (relacional -> VARIABLE comparacion STRING .)
    OR              reduce using rule 250 (relacional -> VARIABLE comparacion STRING .)
    NOT             reduce using rule 250 (relacional -> VARIABLE comparacion STRING .)
    PAR_D           reduce using rule 250 (relacional -> VARIABLE comparacion STRING .)


state 338

    (252) relacional -> VARIABLE comparacion CHAR .

    AND             reduce using rule 252 (relacional -> VARIABLE comparacion CHAR .)
    OR              reduce using rule 252 (relacional -> VARIABLE comparacion CHAR .)
    NOT             reduce using rule 252 (relacional -> VARIABLE comparacion CHAR .)
    PAR_D           reduce using rule 252 (relacional -> VARIABLE comparacion CHAR .)


state 339

    (262) aritmetica -> VARIABLE aritmeticos VARIABLE .

    IGUAL_COMPARACION reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    DIFERENTE       reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    MAYOR           reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    MENOR           reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    MENOS           reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    MAS             reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    MULTIPLICACION  reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    DIVISION        reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    MOD             reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    VAR             reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    VAL             reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    VARIABLE        reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    PRINTLN         reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    PRINT           reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    READLINE        reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    WHILE           reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    FOR             reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    IF              reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    INT             reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    LONG            reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    FLOAT           reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    DOUBLE          reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    LLAVE_D         reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    DEF             reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    $end            reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    RETURN          reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    CASE            reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    AND             reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    OR              reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    NOT             reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    PAR_D           reduce using rule 262 (aritmetica -> VARIABLE aritmeticos VARIABLE .)


state 340

    (260) aritmetica -> VARIABLE aritmeticos numeros .

    IGUAL_COMPARACION reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    DIFERENTE       reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    MAYOR           reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    MENOR           reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    MENOS           reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    MAS             reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    MULTIPLICACION  reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    DIVISION        reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    MOD             reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    VAR             reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    VAL             reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    VARIABLE        reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    PRINTLN         reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    PRINT           reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    READLINE        reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    WHILE           reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    FOR             reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    IF              reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    INT             reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    LONG            reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    FLOAT           reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    DOUBLE          reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    LLAVE_D         reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    DEF             reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    $end            reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    RETURN          reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    CASE            reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    AND             reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    OR              reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    NOT             reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)
    PAR_D           reduce using rule 260 (aritmetica -> VARIABLE aritmeticos numeros .)


state 341

    (243) relacional -> booleanos comparacion booleanos .

    AND             reduce using rule 243 (relacional -> booleanos comparacion booleanos .)
    OR              reduce using rule 243 (relacional -> booleanos comparacion booleanos .)
    NOT             reduce using rule 243 (relacional -> booleanos comparacion booleanos .)
    PAR_D           reduce using rule 243 (relacional -> booleanos comparacion booleanos .)


state 342

    (249) relacional -> booleanos comparacion VARIABLE .

    AND             reduce using rule 249 (relacional -> booleanos comparacion VARIABLE .)
    OR              reduce using rule 249 (relacional -> booleanos comparacion VARIABLE .)
    NOT             reduce using rule 249 (relacional -> booleanos comparacion VARIABLE .)
    PAR_D           reduce using rule 249 (relacional -> booleanos comparacion VARIABLE .)


state 343

    (239) relacional -> numeros comparacion numeros .
    (259) aritmetica -> numeros . aritmeticos numeros
    (261) aritmetica -> numeros . aritmeticos VARIABLE
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD

    AND             reduce using rule 239 (relacional -> numeros comparacion numeros .)
    OR              reduce using rule 239 (relacional -> numeros comparacion numeros .)
    NOT             reduce using rule 239 (relacional -> numeros comparacion numeros .)
    PAR_D           reduce using rule 239 (relacional -> numeros comparacion numeros .)
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    aritmeticos                    shift and go to state 229

state 344

    (242) relacional -> numeros comparacion aritmetica .
    (263) aritmetica -> aritmetica . aritmeticos numeros
    (264) aritmetica -> aritmetica . aritmeticos VARIABLE
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD

    AND             reduce using rule 242 (relacional -> numeros comparacion aritmetica .)
    OR              reduce using rule 242 (relacional -> numeros comparacion aritmetica .)
    NOT             reduce using rule 242 (relacional -> numeros comparacion aritmetica .)
    PAR_D           reduce using rule 242 (relacional -> numeros comparacion aritmetica .)
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    aritmeticos                    shift and go to state 231

state 345

    (247) relacional -> numeros comparacion VARIABLE .
    (260) aritmetica -> VARIABLE . aritmeticos numeros
    (262) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD

    AND             reduce using rule 247 (relacional -> numeros comparacion VARIABLE .)
    OR              reduce using rule 247 (relacional -> numeros comparacion VARIABLE .)
    NOT             reduce using rule 247 (relacional -> numeros comparacion VARIABLE .)
    PAR_D           reduce using rule 247 (relacional -> numeros comparacion VARIABLE .)
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    aritmeticos                    shift and go to state 214

state 346

    (259) aritmetica -> numeros aritmeticos numeros .

    IGUAL_COMPARACION reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    DIFERENTE       reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    MAYOR           reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    MENOR           reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    MENOS           reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    MAS             reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    MULTIPLICACION  reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    DIVISION        reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    MOD             reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    VAR             reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    VAL             reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    VARIABLE        reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    PRINTLN         reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    PRINT           reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    READLINE        reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    WHILE           reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    FOR             reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    IF              reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    INT             reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    LONG            reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    FLOAT           reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    DOUBLE          reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    LLAVE_D         reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    DEF             reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    $end            reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    RETURN          reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    CASE            reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    AND             reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    OR              reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    NOT             reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)
    PAR_D           reduce using rule 259 (aritmetica -> numeros aritmeticos numeros .)


state 347

    (261) aritmetica -> numeros aritmeticos VARIABLE .

    IGUAL_COMPARACION reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    DIFERENTE       reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    MAYOR           reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    MENOR           reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    MENOS           reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    MAS             reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    MULTIPLICACION  reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    DIVISION        reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    MOD             reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    VAR             reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    VAL             reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    VARIABLE        reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    PRINTLN         reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    PRINT           reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    READLINE        reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    WHILE           reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    FOR             reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    IF              reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    INT             reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    LONG            reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    FLOAT           reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    DOUBLE          reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    LLAVE_D         reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    DEF             reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    $end            reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    RETURN          reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    CASE            reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    AND             reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    OR              reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    NOT             reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)
    PAR_D           reduce using rule 261 (aritmetica -> numeros aritmeticos VARIABLE .)


state 348

    (240) relacional -> aritmetica comparacion aritmetica .
    (263) aritmetica -> aritmetica . aritmeticos numeros
    (264) aritmetica -> aritmetica . aritmeticos VARIABLE
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD

    AND             reduce using rule 240 (relacional -> aritmetica comparacion aritmetica .)
    OR              reduce using rule 240 (relacional -> aritmetica comparacion aritmetica .)
    NOT             reduce using rule 240 (relacional -> aritmetica comparacion aritmetica .)
    PAR_D           reduce using rule 240 (relacional -> aritmetica comparacion aritmetica .)
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    aritmeticos                    shift and go to state 231

state 349

    (241) relacional -> aritmetica comparacion numeros .
    (259) aritmetica -> numeros . aritmeticos numeros
    (261) aritmetica -> numeros . aritmeticos VARIABLE
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD

    AND             reduce using rule 241 (relacional -> aritmetica comparacion numeros .)
    OR              reduce using rule 241 (relacional -> aritmetica comparacion numeros .)
    NOT             reduce using rule 241 (relacional -> aritmetica comparacion numeros .)
    PAR_D           reduce using rule 241 (relacional -> aritmetica comparacion numeros .)
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    aritmeticos                    shift and go to state 229

state 350

    (260) aritmetica -> VARIABLE . aritmeticos numeros
    (262) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD

    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    aritmeticos                    shift and go to state 214

state 351

    (263) aritmetica -> aritmetica aritmeticos numeros .

    IGUAL_COMPARACION reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    DIFERENTE       reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    MAYOR           reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    MENOR           reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    MENOS           reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    MAS             reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    MULTIPLICACION  reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    DIVISION        reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    MOD             reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    VAR             reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    VAL             reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    VARIABLE        reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    PRINTLN         reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    PRINT           reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    READLINE        reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    WHILE           reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    FOR             reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    IF              reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    INT             reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    LONG            reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    FLOAT           reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    DOUBLE          reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    LLAVE_D         reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    DEF             reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    $end            reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    RETURN          reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    CASE            reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    AND             reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    OR              reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    NOT             reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)
    PAR_D           reduce using rule 263 (aritmetica -> aritmetica aritmeticos numeros .)


state 352

    (264) aritmetica -> aritmetica aritmeticos VARIABLE .

    IGUAL_COMPARACION reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    DIFERENTE       reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    MAYOR           reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    MENOR           reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    MENOS           reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    MAS             reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    MULTIPLICACION  reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    DIVISION        reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    MOD             reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    VAR             reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    VAL             reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    VARIABLE        reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    PRINTLN         reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    PRINT           reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    READLINE        reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    WHILE           reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    FOR             reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    IF              reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    INT             reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    LONG            reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    FLOAT           reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    DOUBLE          reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    LLAVE_D         reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    DEF             reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    $end            reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    RETURN          reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    CASE            reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    AND             reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    OR              reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    NOT             reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    PAR_D           reduce using rule 264 (aritmetica -> aritmetica aritmeticos VARIABLE .)


state 353

    (244) relacional -> STRING comparacion STRING .

    AND             reduce using rule 244 (relacional -> STRING comparacion STRING .)
    OR              reduce using rule 244 (relacional -> STRING comparacion STRING .)
    NOT             reduce using rule 244 (relacional -> STRING comparacion STRING .)
    PAR_D           reduce using rule 244 (relacional -> STRING comparacion STRING .)


state 354

    (251) relacional -> STRING comparacion VARIABLE .

    AND             reduce using rule 251 (relacional -> STRING comparacion VARIABLE .)
    OR              reduce using rule 251 (relacional -> STRING comparacion VARIABLE .)
    NOT             reduce using rule 251 (relacional -> STRING comparacion VARIABLE .)
    PAR_D           reduce using rule 251 (relacional -> STRING comparacion VARIABLE .)


state 355

    (245) relacional -> CHAR comparacion CHAR .

    AND             reduce using rule 245 (relacional -> CHAR comparacion CHAR .)
    OR              reduce using rule 245 (relacional -> CHAR comparacion CHAR .)
    NOT             reduce using rule 245 (relacional -> CHAR comparacion CHAR .)
    PAR_D           reduce using rule 245 (relacional -> CHAR comparacion CHAR .)


state 356

    (253) relacional -> CHAR comparacion VARIABLE .

    AND             reduce using rule 253 (relacional -> CHAR comparacion VARIABLE .)
    OR              reduce using rule 253 (relacional -> CHAR comparacion VARIABLE .)
    NOT             reduce using rule 253 (relacional -> CHAR comparacion VARIABLE .)
    PAR_D           reduce using rule 253 (relacional -> CHAR comparacion VARIABLE .)


state 357

    (176) for -> FOR PAR_I VAR VARIABLE ITERATOR . VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> FOR PAR_I VAR VARIABLE ITERATOR . INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> FOR PAR_I VAR VARIABLE ITERATOR . INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D

    VARIABLE        shift and go to state 445
    INT             shift and go to state 446


state 358

    (177) for -> FOR PAR_I VARIABLE ITERATOR VARIABLE . PAR_D LLAVE_I contenido LLAVE_D

    PAR_D           shift and go to state 447


state 359

    (178) for -> FOR PAR_I VARIABLE ITERATOR INT . TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> FOR PAR_I VARIABLE ITERATOR INT . UNTIL INT PAR_D LLAVE_I contenido LLAVE_D

    TO              shift and go to state 448
    UNTIL           shift and go to state 449


state 360

    (221) if -> IF PAR_I condicional PAR_D LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 450
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 361

    (218) defcase -> CASE SUBGUION . FUNCION_FLECHA codeBlock

    FUNCION_FLECHA  shift and go to state 451


state 362

    (190) caseInt -> CASE INT FUNCION_FLECHA . codeBlock
    (219) codeBlock -> . contenidoLine
    (220) codeBlock -> . LLAVE_I contenido LLAVE_D
    (40) contenidoLine -> . asignacion
    (41) contenidoLine -> . reasignacion
    (42) contenidoLine -> . funcall
    (43) contenidoLine -> . impresion
    (44) contenidoLine -> . entrada
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_I         shift and go to state 454
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 460
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18

    codeBlock                      shift and go to state 452
    contenidoLine                  shift and go to state 453
    asignacion                     shift and go to state 455
    reasignacion                   shift and go to state 456
    funcall                        shift and go to state 457
    impresion                      shift and go to state 458
    entrada                        shift and go to state 459
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 363

    (194) caseLgn -> CASE LONG FUNCION_FLECHA . codeBlock
    (219) codeBlock -> . contenidoLine
    (220) codeBlock -> . LLAVE_I contenido LLAVE_D
    (40) contenidoLine -> . asignacion
    (41) contenidoLine -> . reasignacion
    (42) contenidoLine -> . funcall
    (43) contenidoLine -> . impresion
    (44) contenidoLine -> . entrada
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_I         shift and go to state 454
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 460
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18

    codeBlock                      shift and go to state 461
    contenidoLine                  shift and go to state 453
    asignacion                     shift and go to state 455
    reasignacion                   shift and go to state 456
    funcall                        shift and go to state 457
    impresion                      shift and go to state 458
    entrada                        shift and go to state 459
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 364

    (198) caseFlt -> CASE FLOAT FUNCION_FLECHA . codeBlock
    (219) codeBlock -> . contenidoLine
    (220) codeBlock -> . LLAVE_I contenido LLAVE_D
    (40) contenidoLine -> . asignacion
    (41) contenidoLine -> . reasignacion
    (42) contenidoLine -> . funcall
    (43) contenidoLine -> . impresion
    (44) contenidoLine -> . entrada
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_I         shift and go to state 454
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 460
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18

    codeBlock                      shift and go to state 462
    contenidoLine                  shift and go to state 453
    asignacion                     shift and go to state 455
    reasignacion                   shift and go to state 456
    funcall                        shift and go to state 457
    impresion                      shift and go to state 458
    entrada                        shift and go to state 459
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 365

    (202) caseDob -> CASE DOUBLE FUNCION_FLECHA . codeBlock
    (219) codeBlock -> . contenidoLine
    (220) codeBlock -> . LLAVE_I contenido LLAVE_D
    (40) contenidoLine -> . asignacion
    (41) contenidoLine -> . reasignacion
    (42) contenidoLine -> . funcall
    (43) contenidoLine -> . impresion
    (44) contenidoLine -> . entrada
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_I         shift and go to state 454
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 460
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18

    codeBlock                      shift and go to state 463
    contenidoLine                  shift and go to state 453
    asignacion                     shift and go to state 455
    reasignacion                   shift and go to state 456
    funcall                        shift and go to state 457
    impresion                      shift and go to state 458
    entrada                        shift and go to state 459
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 366

    (206) caseStr -> CASE STRING FUNCION_FLECHA . codeBlock
    (219) codeBlock -> . contenidoLine
    (220) codeBlock -> . LLAVE_I contenido LLAVE_D
    (40) contenidoLine -> . asignacion
    (41) contenidoLine -> . reasignacion
    (42) contenidoLine -> . funcall
    (43) contenidoLine -> . impresion
    (44) contenidoLine -> . entrada
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_I         shift and go to state 454
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 460
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18

    codeBlock                      shift and go to state 464
    contenidoLine                  shift and go to state 453
    asignacion                     shift and go to state 455
    reasignacion                   shift and go to state 456
    funcall                        shift and go to state 457
    impresion                      shift and go to state 458
    entrada                        shift and go to state 459
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 367

    (210) caseChar -> CASE CHAR FUNCION_FLECHA . codeBlock
    (219) codeBlock -> . contenidoLine
    (220) codeBlock -> . LLAVE_I contenido LLAVE_D
    (40) contenidoLine -> . asignacion
    (41) contenidoLine -> . reasignacion
    (42) contenidoLine -> . funcall
    (43) contenidoLine -> . impresion
    (44) contenidoLine -> . entrada
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_I         shift and go to state 454
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 460
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18

    codeBlock                      shift and go to state 465
    contenidoLine                  shift and go to state 453
    asignacion                     shift and go to state 455
    reasignacion                   shift and go to state 456
    funcall                        shift and go to state 457
    impresion                      shift and go to state 458
    entrada                        shift and go to state 459
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 368

    (214) caseBool -> CASE booleanos FUNCION_FLECHA . codeBlock
    (219) codeBlock -> . contenidoLine
    (220) codeBlock -> . LLAVE_I contenido LLAVE_D
    (40) contenidoLine -> . asignacion
    (41) contenidoLine -> . reasignacion
    (42) contenidoLine -> . funcall
    (43) contenidoLine -> . impresion
    (44) contenidoLine -> . entrada
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_I         shift and go to state 454
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 460
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18

    codeBlock                      shift and go to state 466
    contenidoLine                  shift and go to state 453
    asignacion                     shift and go to state 455
    reasignacion                   shift and go to state 456
    funcall                        shift and go to state 457
    impresion                      shift and go to state 458
    entrada                        shift and go to state 459
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 369

    (108) valor -> VARIABLE PAR_I VARIABLE PAR_D .

    COMA            reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    PAR_D           reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    MAS             reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    VAR             reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    VAL             reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    VARIABLE        reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    PRINTLN         reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    PRINT           reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    READLINE        reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    WHILE           reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    FOR             reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    IF              reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    INT             reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    LONG            reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    FLOAT           reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    DOUBLE          reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    LLAVE_D         reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    RETURN          reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    CASE            reduce using rule 108 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)


state 370

    (109) valor -> VARIABLE PAR_I INT PAR_D .

    COMA            reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)
    PAR_D           reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)
    MAS             reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)
    VAR             reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)
    VAL             reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)
    VARIABLE        reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)
    PRINTLN         reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)
    PRINT           reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)
    READLINE        reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)
    WHILE           reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)
    FOR             reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)
    IF              reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)
    INT             reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)
    LONG            reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)
    FLOAT           reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)
    DOUBLE          reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)
    LLAVE_D         reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)
    RETURN          reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)
    CASE            reduce using rule 109 (valor -> VARIABLE PAR_I INT PAR_D .)


state 371

    (4) io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE . PUNTO READLINE

    PUNTO           shift and go to state 467


state 372

    (224) elseif -> ELSE IF PAR_I condicional PAR_D . LLAVE_I contenido LLAVE_D
    (225) elseif -> ELSE IF PAR_I condicional PAR_D . LLAVE_I contenido LLAVE_D elseif

    LLAVE_I         shift and go to state 468


state 373

    (105) valor -> VARIABLE .
    (108) valor -> VARIABLE . PAR_I VARIABLE PAR_D
    (109) valor -> VARIABLE . PAR_I INT PAR_D
    (260) aritmetica -> VARIABLE . aritmeticos numeros
    (262) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (156) castingcall -> VARIABLE . PUNTO castingfun
    (146) funcall -> VARIABLE . varparen
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD
    (147) varparen -> . PAR_I valores PAR_D
    (148) varparen -> . PAR_I PAR_D
    (149) varparen -> . varparen PAR_I valores PAR_D
    (150) varparen -> . varparen PAR_I PAR_D

    VAR             reduce using rule 105 (valor -> VARIABLE .)
    VAL             reduce using rule 105 (valor -> VARIABLE .)
    VARIABLE        reduce using rule 105 (valor -> VARIABLE .)
    PRINTLN         reduce using rule 105 (valor -> VARIABLE .)
    PRINT           reduce using rule 105 (valor -> VARIABLE .)
    READLINE        reduce using rule 105 (valor -> VARIABLE .)
    WHILE           reduce using rule 105 (valor -> VARIABLE .)
    FOR             reduce using rule 105 (valor -> VARIABLE .)
    IF              reduce using rule 105 (valor -> VARIABLE .)
    INT             reduce using rule 105 (valor -> VARIABLE .)
    LONG            reduce using rule 105 (valor -> VARIABLE .)
    FLOAT           reduce using rule 105 (valor -> VARIABLE .)
    DOUBLE          reduce using rule 105 (valor -> VARIABLE .)
    LLAVE_D         reduce using rule 105 (valor -> VARIABLE .)
    RETURN          reduce using rule 105 (valor -> VARIABLE .)
    CASE            reduce using rule 105 (valor -> VARIABLE .)
    PAR_I           shift and go to state 469
    PUNTO           shift and go to state 304
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    aritmeticos                    shift and go to state 214
    varparen                       shift and go to state 36

state 374

    (90) reasignacion -> VARIABLE IGUAL valor .

    VAR             reduce using rule 90 (reasignacion -> VARIABLE IGUAL valor .)
    VAL             reduce using rule 90 (reasignacion -> VARIABLE IGUAL valor .)
    VARIABLE        reduce using rule 90 (reasignacion -> VARIABLE IGUAL valor .)
    PRINTLN         reduce using rule 90 (reasignacion -> VARIABLE IGUAL valor .)
    PRINT           reduce using rule 90 (reasignacion -> VARIABLE IGUAL valor .)
    READLINE        reduce using rule 90 (reasignacion -> VARIABLE IGUAL valor .)
    WHILE           reduce using rule 90 (reasignacion -> VARIABLE IGUAL valor .)
    FOR             reduce using rule 90 (reasignacion -> VARIABLE IGUAL valor .)
    IF              reduce using rule 90 (reasignacion -> VARIABLE IGUAL valor .)
    INT             reduce using rule 90 (reasignacion -> VARIABLE IGUAL valor .)
    LONG            reduce using rule 90 (reasignacion -> VARIABLE IGUAL valor .)
    FLOAT           reduce using rule 90 (reasignacion -> VARIABLE IGUAL valor .)
    DOUBLE          reduce using rule 90 (reasignacion -> VARIABLE IGUAL valor .)
    LLAVE_D         reduce using rule 90 (reasignacion -> VARIABLE IGUAL valor .)
    RETURN          reduce using rule 90 (reasignacion -> VARIABLE IGUAL valor .)
    CASE            reduce using rule 90 (reasignacion -> VARIABLE IGUAL valor .)


state 375

    (91) reasignacion -> VARIABLE IGUAL returnfun .

    VAR             reduce using rule 91 (reasignacion -> VARIABLE IGUAL returnfun .)
    VAL             reduce using rule 91 (reasignacion -> VARIABLE IGUAL returnfun .)
    VARIABLE        reduce using rule 91 (reasignacion -> VARIABLE IGUAL returnfun .)
    PRINTLN         reduce using rule 91 (reasignacion -> VARIABLE IGUAL returnfun .)
    PRINT           reduce using rule 91 (reasignacion -> VARIABLE IGUAL returnfun .)
    READLINE        reduce using rule 91 (reasignacion -> VARIABLE IGUAL returnfun .)
    WHILE           reduce using rule 91 (reasignacion -> VARIABLE IGUAL returnfun .)
    FOR             reduce using rule 91 (reasignacion -> VARIABLE IGUAL returnfun .)
    IF              reduce using rule 91 (reasignacion -> VARIABLE IGUAL returnfun .)
    INT             reduce using rule 91 (reasignacion -> VARIABLE IGUAL returnfun .)
    LONG            reduce using rule 91 (reasignacion -> VARIABLE IGUAL returnfun .)
    FLOAT           reduce using rule 91 (reasignacion -> VARIABLE IGUAL returnfun .)
    DOUBLE          reduce using rule 91 (reasignacion -> VARIABLE IGUAL returnfun .)
    LLAVE_D         reduce using rule 91 (reasignacion -> VARIABLE IGUAL returnfun .)
    RETURN          reduce using rule 91 (reasignacion -> VARIABLE IGUAL returnfun .)
    CASE            reduce using rule 91 (reasignacion -> VARIABLE IGUAL returnfun .)


state 376

    (92) reasignacion -> VARIABLE IGUAL aritmetica .
    (263) aritmetica -> aritmetica . aritmeticos numeros
    (264) aritmetica -> aritmetica . aritmeticos VARIABLE
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD

    VAR             reduce using rule 92 (reasignacion -> VARIABLE IGUAL aritmetica .)
    VAL             reduce using rule 92 (reasignacion -> VARIABLE IGUAL aritmetica .)
    VARIABLE        reduce using rule 92 (reasignacion -> VARIABLE IGUAL aritmetica .)
    PRINTLN         reduce using rule 92 (reasignacion -> VARIABLE IGUAL aritmetica .)
    PRINT           reduce using rule 92 (reasignacion -> VARIABLE IGUAL aritmetica .)
    READLINE        reduce using rule 92 (reasignacion -> VARIABLE IGUAL aritmetica .)
    WHILE           reduce using rule 92 (reasignacion -> VARIABLE IGUAL aritmetica .)
    FOR             reduce using rule 92 (reasignacion -> VARIABLE IGUAL aritmetica .)
    IF              reduce using rule 92 (reasignacion -> VARIABLE IGUAL aritmetica .)
    INT             reduce using rule 92 (reasignacion -> VARIABLE IGUAL aritmetica .)
    LONG            reduce using rule 92 (reasignacion -> VARIABLE IGUAL aritmetica .)
    FLOAT           reduce using rule 92 (reasignacion -> VARIABLE IGUAL aritmetica .)
    DOUBLE          reduce using rule 92 (reasignacion -> VARIABLE IGUAL aritmetica .)
    LLAVE_D         reduce using rule 92 (reasignacion -> VARIABLE IGUAL aritmetica .)
    RETURN          reduce using rule 92 (reasignacion -> VARIABLE IGUAL aritmetica .)
    CASE            reduce using rule 92 (reasignacion -> VARIABLE IGUAL aritmetica .)
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    aritmeticos                    shift and go to state 231

state 377

    (106) valor -> numeros .
    (259) aritmetica -> numeros . aritmeticos numeros
    (261) aritmetica -> numeros . aritmeticos VARIABLE
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD

    VAR             reduce using rule 106 (valor -> numeros .)
    VAL             reduce using rule 106 (valor -> numeros .)
    VARIABLE        reduce using rule 106 (valor -> numeros .)
    PRINTLN         reduce using rule 106 (valor -> numeros .)
    PRINT           reduce using rule 106 (valor -> numeros .)
    READLINE        reduce using rule 106 (valor -> numeros .)
    WHILE           reduce using rule 106 (valor -> numeros .)
    FOR             reduce using rule 106 (valor -> numeros .)
    IF              reduce using rule 106 (valor -> numeros .)
    INT             reduce using rule 106 (valor -> numeros .)
    LONG            reduce using rule 106 (valor -> numeros .)
    FLOAT           reduce using rule 106 (valor -> numeros .)
    DOUBLE          reduce using rule 106 (valor -> numeros .)
    LLAVE_D         reduce using rule 106 (valor -> numeros .)
    RETURN          reduce using rule 106 (valor -> numeros .)
    CASE            reduce using rule 106 (valor -> numeros .)
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    aritmeticos                    shift and go to state 229

state 378

    (93) reasignacion -> VARIABLE PAR_I INT . PAR_D IGUAL valor
    (112) numeros -> INT .

  ! shift/reduce conflict for PAR_D resolved as shift
    PAR_D           shift and go to state 470
    COMA            reduce using rule 112 (numeros -> INT .)

  ! PAR_D           [ reduce using rule 112 (numeros -> INT .) ]


state 379

    (116) funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 471


state 380

    (117) funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .

    DEF             reduce using rule 117 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 117 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 117 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 117 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 117 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 117 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 117 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 117 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 117 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 117 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 117 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 117 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)


state 381

    (124) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I . contenido RETURN valor LLAVE_D
    (125) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I . contenido RETURN VARIABLE LLAVE_D
    (126) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I . contenido RETURN returnfun LLAVE_D
    (127) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I . contenido RETURN aritmetica LLAVE_D
    (128) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I . RETURN valor LLAVE_D
    (129) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I . RETURN VARIABLE LLAVE_D
    (130) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I . RETURN returnfun LLAVE_D
    (131) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I . RETURN aritmetica LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    RETURN          shift and go to state 473
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 472
    aritmetica                     shift and go to state 141
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 382

    (132) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I . contenido RETURN tuple LLAVE_D
    (133) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I . contenido RETURN VARIABLE LLAVE_D
    (134) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I . contenido RETURN returnfun LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 474
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 383

    (136) dectipoTupla -> DOBLE_PUNTO PAR_I tipos . PAR_D

    PAR_D           shift and go to state 475


state 384

    (137) tipos -> tipo .
    (138) tipos -> tipo . tiposentry
    (139) tiposentry -> . COMA tipo
    (140) tiposentry -> . COMA tipo tiposentry

    PAR_D           reduce using rule 137 (tipos -> tipo .)
    COMA            shift and go to state 477

    tiposentry                     shift and go to state 476

state 385

    (101) tipo -> ARRAYCLASS CORCHETE_I . tipo CORCHETE_D
    (94) tipo -> . CHARCLASS
    (95) tipo -> . STRINGCLASS
    (96) tipo -> . BOOLCLASS
    (97) tipo -> . INTCLASS
    (98) tipo -> . LONGCLASS
    (99) tipo -> . DOUBLECLASS
    (100) tipo -> . FLOATCLASS
    (101) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (102) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    CHARCLASS       shift and go to state 292
    STRINGCLASS     shift and go to state 293
    BOOLCLASS       shift and go to state 294
    INTCLASS        shift and go to state 295
    LONGCLASS       shift and go to state 296
    DOUBLECLASS     shift and go to state 297
    FLOATCLASS      shift and go to state 298
    ARRAYCLASS      shift and go to state 299
    LISTCLASS       shift and go to state 300

    tipo                           shift and go to state 478

state 386

    (102) tipo -> LISTCLASS CORCHETE_I . tipo CORCHETE_D
    (94) tipo -> . CHARCLASS
    (95) tipo -> . STRINGCLASS
    (96) tipo -> . BOOLCLASS
    (97) tipo -> . INTCLASS
    (98) tipo -> . LONGCLASS
    (99) tipo -> . DOUBLECLASS
    (100) tipo -> . FLOATCLASS
    (101) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (102) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    CHARCLASS       shift and go to state 292
    STRINGCLASS     shift and go to state 293
    BOOLCLASS       shift and go to state 294
    INTCLASS        shift and go to state 295
    LONGCLASS       shift and go to state 296
    DOUBLECLASS     shift and go to state 297
    FLOATCLASS      shift and go to state 298
    ARRAYCLASS      shift and go to state 299
    LISTCLASS       shift and go to state 300

    tipo                           shift and go to state 479

state 387

    (122) parametros -> PAR_I . declaracion PAR_D
    (123) parametros -> PAR_I . declaracion PAR_D parametros
    (118) declaracion -> . VARIABLE DOBLE_PUNTO tipo
    (119) declaracion -> . VARIABLE DOBLE_PUNTO tipo IGUAL valor

    VARIABLE        shift and go to state 151

    declaracion                    shift and go to state 150

state 388

    (123) parametros -> PAR_I declaracion PAR_D parametros .

    IGUAL           reduce using rule 123 (parametros -> PAR_I declaracion PAR_D parametros .)
    LLAVE_I         reduce using rule 123 (parametros -> PAR_I declaracion PAR_D parametros .)
    DOBLE_PUNTO     reduce using rule 123 (parametros -> PAR_I declaracion PAR_D parametros .)


state 389

    (118) declaracion -> VARIABLE DOBLE_PUNTO tipo .
    (119) declaracion -> VARIABLE DOBLE_PUNTO tipo . IGUAL valor

    PAR_D           reduce using rule 118 (declaracion -> VARIABLE DOBLE_PUNTO tipo .)
    IGUAL           shift and go to state 480


state 390

    (156) castingcall -> VARIABLE PUNTO castingfun .

    DEF             reduce using rule 156 (castingcall -> VARIABLE PUNTO castingfun .)
    VARIABLE        reduce using rule 156 (castingcall -> VARIABLE PUNTO castingfun .)
    PRINTLN         reduce using rule 156 (castingcall -> VARIABLE PUNTO castingfun .)
    PRINT           reduce using rule 156 (castingcall -> VARIABLE PUNTO castingfun .)
    READLINE        reduce using rule 156 (castingcall -> VARIABLE PUNTO castingfun .)
    VAR             reduce using rule 156 (castingcall -> VARIABLE PUNTO castingfun .)
    VAL             reduce using rule 156 (castingcall -> VARIABLE PUNTO castingfun .)
    WHILE           reduce using rule 156 (castingcall -> VARIABLE PUNTO castingfun .)
    FOR             reduce using rule 156 (castingcall -> VARIABLE PUNTO castingfun .)
    IF              reduce using rule 156 (castingcall -> VARIABLE PUNTO castingfun .)
    $end            reduce using rule 156 (castingcall -> VARIABLE PUNTO castingfun .)
    LLAVE_D         reduce using rule 156 (castingcall -> VARIABLE PUNTO castingfun .)
    INT             reduce using rule 156 (castingcall -> VARIABLE PUNTO castingfun .)
    LONG            reduce using rule 156 (castingcall -> VARIABLE PUNTO castingfun .)
    FLOAT           reduce using rule 156 (castingcall -> VARIABLE PUNTO castingfun .)
    DOUBLE          reduce using rule 156 (castingcall -> VARIABLE PUNTO castingfun .)
    RETURN          reduce using rule 156 (castingcall -> VARIABLE PUNTO castingfun .)
    CASE            reduce using rule 156 (castingcall -> VARIABLE PUNTO castingfun .)


state 391

    (157) castingfun -> TO_INT .

    DEF             reduce using rule 157 (castingfun -> TO_INT .)
    VARIABLE        reduce using rule 157 (castingfun -> TO_INT .)
    PRINTLN         reduce using rule 157 (castingfun -> TO_INT .)
    PRINT           reduce using rule 157 (castingfun -> TO_INT .)
    READLINE        reduce using rule 157 (castingfun -> TO_INT .)
    VAR             reduce using rule 157 (castingfun -> TO_INT .)
    VAL             reduce using rule 157 (castingfun -> TO_INT .)
    WHILE           reduce using rule 157 (castingfun -> TO_INT .)
    FOR             reduce using rule 157 (castingfun -> TO_INT .)
    IF              reduce using rule 157 (castingfun -> TO_INT .)
    $end            reduce using rule 157 (castingfun -> TO_INT .)
    LLAVE_D         reduce using rule 157 (castingfun -> TO_INT .)
    INT             reduce using rule 157 (castingfun -> TO_INT .)
    LONG            reduce using rule 157 (castingfun -> TO_INT .)
    FLOAT           reduce using rule 157 (castingfun -> TO_INT .)
    DOUBLE          reduce using rule 157 (castingfun -> TO_INT .)
    RETURN          reduce using rule 157 (castingfun -> TO_INT .)
    CASE            reduce using rule 157 (castingfun -> TO_INT .)


state 392

    (158) castingfun -> TO_DOUBLE .

    DEF             reduce using rule 158 (castingfun -> TO_DOUBLE .)
    VARIABLE        reduce using rule 158 (castingfun -> TO_DOUBLE .)
    PRINTLN         reduce using rule 158 (castingfun -> TO_DOUBLE .)
    PRINT           reduce using rule 158 (castingfun -> TO_DOUBLE .)
    READLINE        reduce using rule 158 (castingfun -> TO_DOUBLE .)
    VAR             reduce using rule 158 (castingfun -> TO_DOUBLE .)
    VAL             reduce using rule 158 (castingfun -> TO_DOUBLE .)
    WHILE           reduce using rule 158 (castingfun -> TO_DOUBLE .)
    FOR             reduce using rule 158 (castingfun -> TO_DOUBLE .)
    IF              reduce using rule 158 (castingfun -> TO_DOUBLE .)
    $end            reduce using rule 158 (castingfun -> TO_DOUBLE .)
    LLAVE_D         reduce using rule 158 (castingfun -> TO_DOUBLE .)
    INT             reduce using rule 158 (castingfun -> TO_DOUBLE .)
    LONG            reduce using rule 158 (castingfun -> TO_DOUBLE .)
    FLOAT           reduce using rule 158 (castingfun -> TO_DOUBLE .)
    DOUBLE          reduce using rule 158 (castingfun -> TO_DOUBLE .)
    RETURN          reduce using rule 158 (castingfun -> TO_DOUBLE .)
    CASE            reduce using rule 158 (castingfun -> TO_DOUBLE .)


state 393

    (159) castingfun -> TO_FLOAT .

    DEF             reduce using rule 159 (castingfun -> TO_FLOAT .)
    VARIABLE        reduce using rule 159 (castingfun -> TO_FLOAT .)
    PRINTLN         reduce using rule 159 (castingfun -> TO_FLOAT .)
    PRINT           reduce using rule 159 (castingfun -> TO_FLOAT .)
    READLINE        reduce using rule 159 (castingfun -> TO_FLOAT .)
    VAR             reduce using rule 159 (castingfun -> TO_FLOAT .)
    VAL             reduce using rule 159 (castingfun -> TO_FLOAT .)
    WHILE           reduce using rule 159 (castingfun -> TO_FLOAT .)
    FOR             reduce using rule 159 (castingfun -> TO_FLOAT .)
    IF              reduce using rule 159 (castingfun -> TO_FLOAT .)
    $end            reduce using rule 159 (castingfun -> TO_FLOAT .)
    LLAVE_D         reduce using rule 159 (castingfun -> TO_FLOAT .)
    INT             reduce using rule 159 (castingfun -> TO_FLOAT .)
    LONG            reduce using rule 159 (castingfun -> TO_FLOAT .)
    FLOAT           reduce using rule 159 (castingfun -> TO_FLOAT .)
    DOUBLE          reduce using rule 159 (castingfun -> TO_FLOAT .)
    RETURN          reduce using rule 159 (castingfun -> TO_FLOAT .)
    CASE            reduce using rule 159 (castingfun -> TO_FLOAT .)


state 394

    (160) castingfun -> TO_LONG .

    DEF             reduce using rule 160 (castingfun -> TO_LONG .)
    VARIABLE        reduce using rule 160 (castingfun -> TO_LONG .)
    PRINTLN         reduce using rule 160 (castingfun -> TO_LONG .)
    PRINT           reduce using rule 160 (castingfun -> TO_LONG .)
    READLINE        reduce using rule 160 (castingfun -> TO_LONG .)
    VAR             reduce using rule 160 (castingfun -> TO_LONG .)
    VAL             reduce using rule 160 (castingfun -> TO_LONG .)
    WHILE           reduce using rule 160 (castingfun -> TO_LONG .)
    FOR             reduce using rule 160 (castingfun -> TO_LONG .)
    IF              reduce using rule 160 (castingfun -> TO_LONG .)
    $end            reduce using rule 160 (castingfun -> TO_LONG .)
    LLAVE_D         reduce using rule 160 (castingfun -> TO_LONG .)
    INT             reduce using rule 160 (castingfun -> TO_LONG .)
    LONG            reduce using rule 160 (castingfun -> TO_LONG .)
    FLOAT           reduce using rule 160 (castingfun -> TO_LONG .)
    DOUBLE          reduce using rule 160 (castingfun -> TO_LONG .)
    RETURN          reduce using rule 160 (castingfun -> TO_LONG .)
    CASE            reduce using rule 160 (castingfun -> TO_LONG .)


state 395

    (161) array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores . PAR_D

    PAR_D           shift and go to state 481


state 396

    (172) tuple -> PAR_I valores PAR_D .

    DEF             reduce using rule 172 (tuple -> PAR_I valores PAR_D .)
    VARIABLE        reduce using rule 172 (tuple -> PAR_I valores PAR_D .)
    PRINTLN         reduce using rule 172 (tuple -> PAR_I valores PAR_D .)
    PRINT           reduce using rule 172 (tuple -> PAR_I valores PAR_D .)
    READLINE        reduce using rule 172 (tuple -> PAR_I valores PAR_D .)
    VAR             reduce using rule 172 (tuple -> PAR_I valores PAR_D .)
    VAL             reduce using rule 172 (tuple -> PAR_I valores PAR_D .)
    WHILE           reduce using rule 172 (tuple -> PAR_I valores PAR_D .)
    FOR             reduce using rule 172 (tuple -> PAR_I valores PAR_D .)
    IF              reduce using rule 172 (tuple -> PAR_I valores PAR_D .)
    $end            reduce using rule 172 (tuple -> PAR_I valores PAR_D .)
    LLAVE_D         reduce using rule 172 (tuple -> PAR_I valores PAR_D .)
    INT             reduce using rule 172 (tuple -> PAR_I valores PAR_D .)
    LONG            reduce using rule 172 (tuple -> PAR_I valores PAR_D .)
    FLOAT           reduce using rule 172 (tuple -> PAR_I valores PAR_D .)
    DOUBLE          reduce using rule 172 (tuple -> PAR_I valores PAR_D .)
    RETURN          reduce using rule 172 (tuple -> PAR_I valores PAR_D .)
    CASE            reduce using rule 172 (tuple -> PAR_I valores PAR_D .)


state 397

    (155) castingcall -> returnCastable PUNTO castingfun .

    DEF             reduce using rule 155 (castingcall -> returnCastable PUNTO castingfun .)
    VARIABLE        reduce using rule 155 (castingcall -> returnCastable PUNTO castingfun .)
    PRINTLN         reduce using rule 155 (castingcall -> returnCastable PUNTO castingfun .)
    PRINT           reduce using rule 155 (castingcall -> returnCastable PUNTO castingfun .)
    READLINE        reduce using rule 155 (castingcall -> returnCastable PUNTO castingfun .)
    VAR             reduce using rule 155 (castingcall -> returnCastable PUNTO castingfun .)
    VAL             reduce using rule 155 (castingcall -> returnCastable PUNTO castingfun .)
    WHILE           reduce using rule 155 (castingcall -> returnCastable PUNTO castingfun .)
    FOR             reduce using rule 155 (castingcall -> returnCastable PUNTO castingfun .)
    IF              reduce using rule 155 (castingcall -> returnCastable PUNTO castingfun .)
    $end            reduce using rule 155 (castingcall -> returnCastable PUNTO castingfun .)
    LLAVE_D         reduce using rule 155 (castingcall -> returnCastable PUNTO castingfun .)
    INT             reduce using rule 155 (castingcall -> returnCastable PUNTO castingfun .)
    LONG            reduce using rule 155 (castingcall -> returnCastable PUNTO castingfun .)
    FLOAT           reduce using rule 155 (castingcall -> returnCastable PUNTO castingfun .)
    DOUBLE          reduce using rule 155 (castingcall -> returnCastable PUNTO castingfun .)
    RETURN          reduce using rule 155 (castingcall -> returnCastable PUNTO castingfun .)
    CASE            reduce using rule 155 (castingcall -> returnCastable PUNTO castingfun .)


state 398

    (60) asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .

    DEF             reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    IF              reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    $end            reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    INT             reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)


state 399

    (299) asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .

    DEF             reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    VARIABLE        reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    PRINTLN         reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    PRINT           reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    READLINE        reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    VAR             reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    VAL             reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    WHILE           reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    FOR             reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    IF              reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    $end            reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    LLAVE_D         reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    INT             reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    LONG            reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    FLOAT           reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    DOUBLE          reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    RETURN          reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    CASE            reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)


state 400

    (302) longvalues -> INT .

    DEF             reduce using rule 302 (longvalues -> INT .)
    VARIABLE        reduce using rule 302 (longvalues -> INT .)
    PRINTLN         reduce using rule 302 (longvalues -> INT .)
    PRINT           reduce using rule 302 (longvalues -> INT .)
    READLINE        reduce using rule 302 (longvalues -> INT .)
    VAR             reduce using rule 302 (longvalues -> INT .)
    VAL             reduce using rule 302 (longvalues -> INT .)
    WHILE           reduce using rule 302 (longvalues -> INT .)
    FOR             reduce using rule 302 (longvalues -> INT .)
    IF              reduce using rule 302 (longvalues -> INT .)
    $end            reduce using rule 302 (longvalues -> INT .)
    LLAVE_D         reduce using rule 302 (longvalues -> INT .)
    INT             reduce using rule 302 (longvalues -> INT .)
    LONG            reduce using rule 302 (longvalues -> INT .)
    FLOAT           reduce using rule 302 (longvalues -> INT .)
    DOUBLE          reduce using rule 302 (longvalues -> INT .)
    RETURN          reduce using rule 302 (longvalues -> INT .)
    CASE            reduce using rule 302 (longvalues -> INT .)


state 401

    (303) longvalues -> LONG .

    DEF             reduce using rule 303 (longvalues -> LONG .)
    VARIABLE        reduce using rule 303 (longvalues -> LONG .)
    PRINTLN         reduce using rule 303 (longvalues -> LONG .)
    PRINT           reduce using rule 303 (longvalues -> LONG .)
    READLINE        reduce using rule 303 (longvalues -> LONG .)
    VAR             reduce using rule 303 (longvalues -> LONG .)
    VAL             reduce using rule 303 (longvalues -> LONG .)
    WHILE           reduce using rule 303 (longvalues -> LONG .)
    FOR             reduce using rule 303 (longvalues -> LONG .)
    IF              reduce using rule 303 (longvalues -> LONG .)
    $end            reduce using rule 303 (longvalues -> LONG .)
    LLAVE_D         reduce using rule 303 (longvalues -> LONG .)
    INT             reduce using rule 303 (longvalues -> LONG .)
    LONG            reduce using rule 303 (longvalues -> LONG .)
    FLOAT           reduce using rule 303 (longvalues -> LONG .)
    DOUBLE          reduce using rule 303 (longvalues -> LONG .)
    RETURN          reduce using rule 303 (longvalues -> LONG .)
    CASE            reduce using rule 303 (longvalues -> LONG .)


state 402

    (66) asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .

    DEF             reduce using rule 66 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 66 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 66 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 66 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 66 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 66 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 66 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 66 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 66 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    IF              reduce using rule 66 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    $end            reduce using rule 66 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 66 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    INT             reduce using rule 66 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 66 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 66 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 66 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 66 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 66 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)


state 403

    (63) asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .

    DEF             reduce using rule 63 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    VARIABLE        reduce using rule 63 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    PRINTLN         reduce using rule 63 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    PRINT           reduce using rule 63 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    READLINE        reduce using rule 63 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    VAR             reduce using rule 63 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    VAL             reduce using rule 63 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    WHILE           reduce using rule 63 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    FOR             reduce using rule 63 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    IF              reduce using rule 63 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    $end            reduce using rule 63 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    LLAVE_D         reduce using rule 63 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    INT             reduce using rule 63 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    LONG            reduce using rule 63 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    FLOAT           reduce using rule 63 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    DOUBLE          reduce using rule 63 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    RETURN          reduce using rule 63 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    CASE            reduce using rule 63 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)


state 404

    (68) asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .

    DEF             reduce using rule 68 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 68 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 68 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 68 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 68 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 68 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 68 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 68 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 68 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    IF              reduce using rule 68 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    $end            reduce using rule 68 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 68 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    INT             reduce using rule 68 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 68 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 68 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 68 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 68 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 68 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)


state 405

    (305) asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .

    DEF             reduce using rule 305 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    VARIABLE        reduce using rule 305 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    PRINTLN         reduce using rule 305 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    PRINT           reduce using rule 305 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    READLINE        reduce using rule 305 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    VAR             reduce using rule 305 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    VAL             reduce using rule 305 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    WHILE           reduce using rule 305 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    FOR             reduce using rule 305 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    IF              reduce using rule 305 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    $end            reduce using rule 305 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    LLAVE_D         reduce using rule 305 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    INT             reduce using rule 305 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    LONG            reduce using rule 305 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    FLOAT           reduce using rule 305 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    DOUBLE          reduce using rule 305 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    RETURN          reduce using rule 305 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    CASE            reduce using rule 305 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)


state 406

    (308) floatvalues -> FLOAT .

    DEF             reduce using rule 308 (floatvalues -> FLOAT .)
    VARIABLE        reduce using rule 308 (floatvalues -> FLOAT .)
    PRINTLN         reduce using rule 308 (floatvalues -> FLOAT .)
    PRINT           reduce using rule 308 (floatvalues -> FLOAT .)
    READLINE        reduce using rule 308 (floatvalues -> FLOAT .)
    VAR             reduce using rule 308 (floatvalues -> FLOAT .)
    VAL             reduce using rule 308 (floatvalues -> FLOAT .)
    WHILE           reduce using rule 308 (floatvalues -> FLOAT .)
    FOR             reduce using rule 308 (floatvalues -> FLOAT .)
    IF              reduce using rule 308 (floatvalues -> FLOAT .)
    $end            reduce using rule 308 (floatvalues -> FLOAT .)
    LLAVE_D         reduce using rule 308 (floatvalues -> FLOAT .)
    INT             reduce using rule 308 (floatvalues -> FLOAT .)
    LONG            reduce using rule 308 (floatvalues -> FLOAT .)
    FLOAT           reduce using rule 308 (floatvalues -> FLOAT .)
    DOUBLE          reduce using rule 308 (floatvalues -> FLOAT .)
    RETURN          reduce using rule 308 (floatvalues -> FLOAT .)
    CASE            reduce using rule 308 (floatvalues -> FLOAT .)


state 407

    (309) floatvalues -> longvalues .

    DEF             reduce using rule 309 (floatvalues -> longvalues .)
    VARIABLE        reduce using rule 309 (floatvalues -> longvalues .)
    PRINTLN         reduce using rule 309 (floatvalues -> longvalues .)
    PRINT           reduce using rule 309 (floatvalues -> longvalues .)
    READLINE        reduce using rule 309 (floatvalues -> longvalues .)
    VAR             reduce using rule 309 (floatvalues -> longvalues .)
    VAL             reduce using rule 309 (floatvalues -> longvalues .)
    WHILE           reduce using rule 309 (floatvalues -> longvalues .)
    FOR             reduce using rule 309 (floatvalues -> longvalues .)
    IF              reduce using rule 309 (floatvalues -> longvalues .)
    $end            reduce using rule 309 (floatvalues -> longvalues .)
    LLAVE_D         reduce using rule 309 (floatvalues -> longvalues .)
    INT             reduce using rule 309 (floatvalues -> longvalues .)
    LONG            reduce using rule 309 (floatvalues -> longvalues .)
    FLOAT           reduce using rule 309 (floatvalues -> longvalues .)
    DOUBLE          reduce using rule 309 (floatvalues -> longvalues .)
    RETURN          reduce using rule 309 (floatvalues -> longvalues .)
    CASE            reduce using rule 309 (floatvalues -> longvalues .)


state 408

    (70) asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .

    DEF             reduce using rule 70 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 70 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 70 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 70 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 70 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    VAR             reduce using rule 70 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    VAL             reduce using rule 70 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 70 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    FOR             reduce using rule 70 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    IF              reduce using rule 70 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    $end            reduce using rule 70 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 70 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    INT             reduce using rule 70 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    LONG            reduce using rule 70 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 70 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 70 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 70 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    CASE            reduce using rule 70 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)


state 409

    (311) asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .

    DEF             reduce using rule 311 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    VARIABLE        reduce using rule 311 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    PRINTLN         reduce using rule 311 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    PRINT           reduce using rule 311 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    READLINE        reduce using rule 311 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    VAR             reduce using rule 311 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    VAL             reduce using rule 311 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    WHILE           reduce using rule 311 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    FOR             reduce using rule 311 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    IF              reduce using rule 311 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    $end            reduce using rule 311 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    LLAVE_D         reduce using rule 311 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    INT             reduce using rule 311 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    LONG            reduce using rule 311 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    FLOAT           reduce using rule 311 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    DOUBLE          reduce using rule 311 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    RETURN          reduce using rule 311 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    CASE            reduce using rule 311 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)


state 410

    (314) doublevalues -> DOUBLE .

    DEF             reduce using rule 314 (doublevalues -> DOUBLE .)
    VARIABLE        reduce using rule 314 (doublevalues -> DOUBLE .)
    PRINTLN         reduce using rule 314 (doublevalues -> DOUBLE .)
    PRINT           reduce using rule 314 (doublevalues -> DOUBLE .)
    READLINE        reduce using rule 314 (doublevalues -> DOUBLE .)
    VAR             reduce using rule 314 (doublevalues -> DOUBLE .)
    VAL             reduce using rule 314 (doublevalues -> DOUBLE .)
    WHILE           reduce using rule 314 (doublevalues -> DOUBLE .)
    FOR             reduce using rule 314 (doublevalues -> DOUBLE .)
    IF              reduce using rule 314 (doublevalues -> DOUBLE .)
    $end            reduce using rule 314 (doublevalues -> DOUBLE .)
    LLAVE_D         reduce using rule 314 (doublevalues -> DOUBLE .)
    INT             reduce using rule 314 (doublevalues -> DOUBLE .)
    LONG            reduce using rule 314 (doublevalues -> DOUBLE .)
    FLOAT           reduce using rule 314 (doublevalues -> DOUBLE .)
    DOUBLE          reduce using rule 314 (doublevalues -> DOUBLE .)
    RETURN          reduce using rule 314 (doublevalues -> DOUBLE .)
    CASE            reduce using rule 314 (doublevalues -> DOUBLE .)


state 411

    (315) doublevalues -> floatvalues .

    DEF             reduce using rule 315 (doublevalues -> floatvalues .)
    VARIABLE        reduce using rule 315 (doublevalues -> floatvalues .)
    PRINTLN         reduce using rule 315 (doublevalues -> floatvalues .)
    PRINT           reduce using rule 315 (doublevalues -> floatvalues .)
    READLINE        reduce using rule 315 (doublevalues -> floatvalues .)
    VAR             reduce using rule 315 (doublevalues -> floatvalues .)
    VAL             reduce using rule 315 (doublevalues -> floatvalues .)
    WHILE           reduce using rule 315 (doublevalues -> floatvalues .)
    FOR             reduce using rule 315 (doublevalues -> floatvalues .)
    IF              reduce using rule 315 (doublevalues -> floatvalues .)
    $end            reduce using rule 315 (doublevalues -> floatvalues .)
    LLAVE_D         reduce using rule 315 (doublevalues -> floatvalues .)
    INT             reduce using rule 315 (doublevalues -> floatvalues .)
    LONG            reduce using rule 315 (doublevalues -> floatvalues .)
    FLOAT           reduce using rule 315 (doublevalues -> floatvalues .)
    DOUBLE          reduce using rule 315 (doublevalues -> floatvalues .)
    RETURN          reduce using rule 315 (doublevalues -> floatvalues .)
    CASE            reduce using rule 315 (doublevalues -> floatvalues .)


state 412

    (76) asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .

    DEF             reduce using rule 76 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 76 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 76 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 76 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 76 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 76 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 76 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 76 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 76 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    IF              reduce using rule 76 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    $end            reduce using rule 76 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 76 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    INT             reduce using rule 76 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 76 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 76 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 76 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 76 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 76 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)


state 413

    (73) asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .

    DEF             reduce using rule 73 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    VARIABLE        reduce using rule 73 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    PRINTLN         reduce using rule 73 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    PRINT           reduce using rule 73 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    READLINE        reduce using rule 73 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    VAR             reduce using rule 73 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    VAL             reduce using rule 73 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    WHILE           reduce using rule 73 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    FOR             reduce using rule 73 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    IF              reduce using rule 73 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    $end            reduce using rule 73 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    LLAVE_D         reduce using rule 73 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    INT             reduce using rule 73 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    LONG            reduce using rule 73 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    FLOAT           reduce using rule 73 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    DOUBLE          reduce using rule 73 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    RETURN          reduce using rule 73 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    CASE            reduce using rule 73 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)


state 414

    (82) asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .

    DEF             reduce using rule 82 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 82 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 82 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 82 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 82 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 82 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 82 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 82 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 82 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    IF              reduce using rule 82 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    $end            reduce using rule 82 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 82 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    INT             reduce using rule 82 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 82 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 82 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 82 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 82 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 82 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)


state 415

    (79) asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .

    DEF             reduce using rule 79 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    VARIABLE        reduce using rule 79 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    PRINTLN         reduce using rule 79 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    PRINT           reduce using rule 79 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    READLINE        reduce using rule 79 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    VAR             reduce using rule 79 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    VAL             reduce using rule 79 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    WHILE           reduce using rule 79 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    FOR             reduce using rule 79 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    IF              reduce using rule 79 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    $end            reduce using rule 79 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    LLAVE_D         reduce using rule 79 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    INT             reduce using rule 79 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    LONG            reduce using rule 79 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    FLOAT           reduce using rule 79 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    DOUBLE          reduce using rule 79 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    RETURN          reduce using rule 79 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    CASE            reduce using rule 79 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)


state 416

    (88) asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .

    DEF             reduce using rule 88 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 88 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 88 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 88 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 88 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 88 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 88 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 88 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 88 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    IF              reduce using rule 88 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    $end            reduce using rule 88 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 88 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    INT             reduce using rule 88 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 88 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 88 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 88 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 88 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 88 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)


state 417

    (85) asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .

    DEF             reduce using rule 85 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    VARIABLE        reduce using rule 85 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    PRINTLN         reduce using rule 85 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    PRINT           reduce using rule 85 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    READLINE        reduce using rule 85 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    VAR             reduce using rule 85 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    VAL             reduce using rule 85 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    WHILE           reduce using rule 85 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    FOR             reduce using rule 85 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    IF              reduce using rule 85 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    $end            reduce using rule 85 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    LLAVE_D         reduce using rule 85 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    INT             reduce using rule 85 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    LONG            reduce using rule 85 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    FLOAT           reduce using rule 85 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    DOUBLE          reduce using rule 85 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    RETURN          reduce using rule 85 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    CASE            reduce using rule 85 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)


state 418

    (162) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo . CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    CORCHETE_D      shift and go to state 482


state 419

    (270) arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS . CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (97) tipo -> INTCLASS .

  ! shift/reduce conflict for CORCHETE_D resolved as shift
    CORCHETE_D      shift and go to state 483

  ! CORCHETE_D      [ reduce using rule 97 (tipo -> INTCLASS .) ]


state 420

    (271) arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS . CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D
    (99) tipo -> DOUBLECLASS .

  ! shift/reduce conflict for CORCHETE_D resolved as shift
    CORCHETE_D      shift and go to state 484

  ! CORCHETE_D      [ reduce using rule 99 (tipo -> DOUBLECLASS .) ]


state 421

    (278) dectupla -> PAR_I STRINGCLASS COMA . INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D
    (279) dectupla -> PAR_I STRINGCLASS COMA . LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D
    (280) dectupla -> PAR_I STRINGCLASS COMA . DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D
    (281) dectupla -> PAR_I STRINGCLASS COMA . FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D

    INTCLASS        shift and go to state 485
    LONGCLASS       shift and go to state 486
    DOUBLECLASS     shift and go to state 487
    FLOATCLASS      shift and go to state 488


state 422

    (294) dectupla -> PAR_I INTCLASS COMA . STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D
    (295) dectupla -> PAR_I INTCLASS COMA . LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D
    (296) dectupla -> PAR_I INTCLASS COMA . DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D
    (297) dectupla -> PAR_I INTCLASS COMA . FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D

    STRINGCLASS     shift and go to state 489
    LONGCLASS       shift and go to state 490
    DOUBLECLASS     shift and go to state 491
    FLOATCLASS      shift and go to state 492


state 423

    (290) dectupla -> PAR_I LONGCLASS COMA . STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D
    (291) dectupla -> PAR_I LONGCLASS COMA . INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D
    (292) dectupla -> PAR_I LONGCLASS COMA . DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D
    (293) dectupla -> PAR_I LONGCLASS COMA . FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D

    STRINGCLASS     shift and go to state 493
    INTCLASS        shift and go to state 494
    DOUBLECLASS     shift and go to state 495
    FLOATCLASS      shift and go to state 496


state 424

    (286) dectupla -> PAR_I DOUBLECLASS COMA . STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D
    (287) dectupla -> PAR_I DOUBLECLASS COMA . LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D
    (288) dectupla -> PAR_I DOUBLECLASS COMA . FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D
    (289) dectupla -> PAR_I DOUBLECLASS COMA . INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D

    STRINGCLASS     shift and go to state 497
    LONGCLASS       shift and go to state 498
    FLOATCLASS      shift and go to state 499
    INTCLASS        shift and go to state 500


state 425

    (282) dectupla -> PAR_I FLOATCLASS COMA . STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D
    (283) dectupla -> PAR_I FLOATCLASS COMA . LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D
    (284) dectupla -> PAR_I FLOATCLASS COMA . DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D
    (285) dectupla -> PAR_I FLOATCLASS COMA . INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D

    STRINGCLASS     shift and go to state 501
    LONGCLASS       shift and go to state 502
    DOUBLECLASS     shift and go to state 503
    INTCLASS        shift and go to state 504


state 426

    (163) array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores . PAR_D

    PAR_D           shift and go to state 505


state 427

    (167) list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores . PAR_D

    PAR_D           shift and go to state 506


state 428

    (61) asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .

    DEF             reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    IF              reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    $end            reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    INT             reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)


state 429

    (301) asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .

    DEF             reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    VARIABLE        reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    PRINTLN         reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    PRINT           reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    READLINE        reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    VAR             reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    VAL             reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    WHILE           reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    FOR             reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    IF              reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    $end            reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    LLAVE_D         reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    INT             reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    LONG            reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    FLOAT           reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    DOUBLE          reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    RETURN          reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    CASE            reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)


state 430

    (67) asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .

    DEF             reduce using rule 67 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 67 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 67 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 67 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 67 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 67 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 67 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 67 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 67 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    IF              reduce using rule 67 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    $end            reduce using rule 67 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 67 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    INT             reduce using rule 67 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 67 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 67 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 67 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 67 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 67 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE .)


state 431

    (65) asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .

    DEF             reduce using rule 65 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    VARIABLE        reduce using rule 65 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    PRINTLN         reduce using rule 65 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    PRINT           reduce using rule 65 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    READLINE        reduce using rule 65 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    VAR             reduce using rule 65 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    VAL             reduce using rule 65 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    WHILE           reduce using rule 65 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    FOR             reduce using rule 65 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    IF              reduce using rule 65 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    $end            reduce using rule 65 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    LLAVE_D         reduce using rule 65 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    INT             reduce using rule 65 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    LONG            reduce using rule 65 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    FLOAT           reduce using rule 65 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    DOUBLE          reduce using rule 65 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    RETURN          reduce using rule 65 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)
    CASE            reduce using rule 65 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT .)


state 432

    (69) asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .

    DEF             reduce using rule 69 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 69 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 69 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 69 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 69 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 69 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 69 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 69 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 69 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    IF              reduce using rule 69 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    $end            reduce using rule 69 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 69 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    INT             reduce using rule 69 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 69 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 69 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 69 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 69 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 69 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)


state 433

    (307) asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .

    DEF             reduce using rule 307 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    VARIABLE        reduce using rule 307 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    PRINTLN         reduce using rule 307 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    PRINT           reduce using rule 307 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    READLINE        reduce using rule 307 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    VAR             reduce using rule 307 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    VAL             reduce using rule 307 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    WHILE           reduce using rule 307 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    FOR             reduce using rule 307 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    IF              reduce using rule 307 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    $end            reduce using rule 307 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    LLAVE_D         reduce using rule 307 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    INT             reduce using rule 307 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    LONG            reduce using rule 307 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    FLOAT           reduce using rule 307 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    DOUBLE          reduce using rule 307 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    RETURN          reduce using rule 307 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    CASE            reduce using rule 307 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)


state 434

    (71) asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .

    DEF             reduce using rule 71 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 71 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 71 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 71 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 71 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    VAR             reduce using rule 71 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    VAL             reduce using rule 71 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 71 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    FOR             reduce using rule 71 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    IF              reduce using rule 71 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    $end            reduce using rule 71 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 71 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    INT             reduce using rule 71 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    LONG            reduce using rule 71 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 71 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 71 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 71 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    CASE            reduce using rule 71 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)


state 435

    (313) asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .

    DEF             reduce using rule 313 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    VARIABLE        reduce using rule 313 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    PRINTLN         reduce using rule 313 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    PRINT           reduce using rule 313 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    READLINE        reduce using rule 313 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    VAR             reduce using rule 313 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    VAL             reduce using rule 313 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    WHILE           reduce using rule 313 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    FOR             reduce using rule 313 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    IF              reduce using rule 313 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    $end            reduce using rule 313 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    LLAVE_D         reduce using rule 313 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    INT             reduce using rule 313 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    LONG            reduce using rule 313 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    FLOAT           reduce using rule 313 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    DOUBLE          reduce using rule 313 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    RETURN          reduce using rule 313 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    CASE            reduce using rule 313 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)


state 436

    (77) asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .

    DEF             reduce using rule 77 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 77 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 77 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 77 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 77 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 77 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 77 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 77 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 77 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    IF              reduce using rule 77 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    $end            reduce using rule 77 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 77 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    INT             reduce using rule 77 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 77 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 77 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 77 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 77 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 77 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)


state 437

    (75) asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .

    DEF             reduce using rule 75 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    VARIABLE        reduce using rule 75 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    PRINTLN         reduce using rule 75 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    PRINT           reduce using rule 75 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    READLINE        reduce using rule 75 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    VAR             reduce using rule 75 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    VAL             reduce using rule 75 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    WHILE           reduce using rule 75 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    FOR             reduce using rule 75 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    IF              reduce using rule 75 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    $end            reduce using rule 75 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    LLAVE_D         reduce using rule 75 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    INT             reduce using rule 75 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    LONG            reduce using rule 75 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    FLOAT           reduce using rule 75 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    DOUBLE          reduce using rule 75 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    RETURN          reduce using rule 75 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    CASE            reduce using rule 75 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)


state 438

    (83) asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .

    DEF             reduce using rule 83 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 83 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 83 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 83 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 83 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 83 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 83 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 83 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 83 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    IF              reduce using rule 83 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    $end            reduce using rule 83 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 83 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    INT             reduce using rule 83 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 83 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 83 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 83 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 83 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 83 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)


state 439

    (81) asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .

    DEF             reduce using rule 81 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    VARIABLE        reduce using rule 81 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    PRINTLN         reduce using rule 81 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    PRINT           reduce using rule 81 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    READLINE        reduce using rule 81 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    VAR             reduce using rule 81 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    VAL             reduce using rule 81 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    WHILE           reduce using rule 81 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    FOR             reduce using rule 81 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    IF              reduce using rule 81 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    $end            reduce using rule 81 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    LLAVE_D         reduce using rule 81 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    INT             reduce using rule 81 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    LONG            reduce using rule 81 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    FLOAT           reduce using rule 81 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    DOUBLE          reduce using rule 81 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    RETURN          reduce using rule 81 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    CASE            reduce using rule 81 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)


state 440

    (89) asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .

    DEF             reduce using rule 89 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 89 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 89 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 89 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 89 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 89 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 89 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 89 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 89 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    IF              reduce using rule 89 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    $end            reduce using rule 89 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 89 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    INT             reduce using rule 89 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 89 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 89 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 89 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 89 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 89 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)


state 441

    (87) asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .

    DEF             reduce using rule 87 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    VARIABLE        reduce using rule 87 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    PRINTLN         reduce using rule 87 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    PRINT           reduce using rule 87 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    READLINE        reduce using rule 87 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    VAR             reduce using rule 87 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    VAL             reduce using rule 87 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    WHILE           reduce using rule 87 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    FOR             reduce using rule 87 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    IF              reduce using rule 87 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    $end            reduce using rule 87 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    LLAVE_D         reduce using rule 87 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    INT             reduce using rule 87 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    LONG            reduce using rule 87 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    FLOAT           reduce using rule 87 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    DOUBLE          reduce using rule 87 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    RETURN          reduce using rule 87 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    CASE            reduce using rule 87 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)


state 442

    (164) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo . CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    CORCHETE_D      shift and go to state 507


state 443

    (168) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo . CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo . CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D

    CORCHETE_D      shift and go to state 508


state 444

    (175) while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 509


state 445

    (176) for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE . PAR_D LLAVE_I contenido LLAVE_D

    PAR_D           shift and go to state 510


state 446

    (180) for -> FOR PAR_I VAR VARIABLE ITERATOR INT . TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> FOR PAR_I VAR VARIABLE ITERATOR INT . UNTIL INT PAR_D LLAVE_I contenido LLAVE_D

    TO              shift and go to state 511
    UNTIL           shift and go to state 512


state 447

    (177) for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 513


state 448

    (178) for -> FOR PAR_I VARIABLE ITERATOR INT TO . INT PAR_D LLAVE_I contenido LLAVE_D

    INT             shift and go to state 514


state 449

    (179) for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL . INT PAR_D LLAVE_I contenido LLAVE_D

    INT             shift and go to state 515


state 450

    (221) if -> IF PAR_I condicional PAR_D LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 516


state 451

    (218) defcase -> CASE SUBGUION FUNCION_FLECHA . codeBlock
    (219) codeBlock -> . contenidoLine
    (220) codeBlock -> . LLAVE_I contenido LLAVE_D
    (40) contenidoLine -> . asignacion
    (41) contenidoLine -> . reasignacion
    (42) contenidoLine -> . funcall
    (43) contenidoLine -> . impresion
    (44) contenidoLine -> . entrada
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_I         shift and go to state 454
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 460
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18

    codeBlock                      shift and go to state 517
    contenidoLine                  shift and go to state 453
    asignacion                     shift and go to state 455
    reasignacion                   shift and go to state 456
    funcall                        shift and go to state 457
    impresion                      shift and go to state 458
    entrada                        shift and go to state 459
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 452

    (190) caseInt -> CASE INT FUNCION_FLECHA codeBlock .

    CASE            reduce using rule 190 (caseInt -> CASE INT FUNCION_FLECHA codeBlock .)
    LLAVE_D         reduce using rule 190 (caseInt -> CASE INT FUNCION_FLECHA codeBlock .)


state 453

    (219) codeBlock -> contenidoLine .

    CASE            reduce using rule 219 (codeBlock -> contenidoLine .)
    LLAVE_D         reduce using rule 219 (codeBlock -> contenidoLine .)


state 454

    (220) codeBlock -> LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 518
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 455

    (40) contenidoLine -> asignacion .

    CASE            reduce using rule 40 (contenidoLine -> asignacion .)
    LLAVE_D         reduce using rule 40 (contenidoLine -> asignacion .)


state 456

    (41) contenidoLine -> reasignacion .

    CASE            reduce using rule 41 (contenidoLine -> reasignacion .)
    LLAVE_D         reduce using rule 41 (contenidoLine -> reasignacion .)


state 457

    (42) contenidoLine -> funcall .

    CASE            reduce using rule 42 (contenidoLine -> funcall .)
    LLAVE_D         reduce using rule 42 (contenidoLine -> funcall .)


state 458

    (43) contenidoLine -> impresion .

    CASE            reduce using rule 43 (contenidoLine -> impresion .)
    LLAVE_D         reduce using rule 43 (contenidoLine -> impresion .)


state 459

    (44) contenidoLine -> entrada .

    CASE            reduce using rule 44 (contenidoLine -> entrada .)
    LLAVE_D         reduce using rule 44 (contenidoLine -> entrada .)


state 460

    (90) reasignacion -> VARIABLE . IGUAL valor
    (91) reasignacion -> VARIABLE . IGUAL returnfun
    (92) reasignacion -> VARIABLE . IGUAL aritmetica
    (93) reasignacion -> VARIABLE . PAR_I INT PAR_D IGUAL valor
    (146) funcall -> VARIABLE . varparen
    (147) varparen -> . PAR_I valores PAR_D
    (148) varparen -> . PAR_I PAR_D
    (149) varparen -> . varparen PAR_I valores PAR_D
    (150) varparen -> . varparen PAR_I PAR_D

    IGUAL           shift and go to state 284
    PAR_I           shift and go to state 285

    varparen                       shift and go to state 36

state 461

    (194) caseLgn -> CASE LONG FUNCION_FLECHA codeBlock .

    CASE            reduce using rule 194 (caseLgn -> CASE LONG FUNCION_FLECHA codeBlock .)
    LLAVE_D         reduce using rule 194 (caseLgn -> CASE LONG FUNCION_FLECHA codeBlock .)


state 462

    (198) caseFlt -> CASE FLOAT FUNCION_FLECHA codeBlock .

    CASE            reduce using rule 198 (caseFlt -> CASE FLOAT FUNCION_FLECHA codeBlock .)
    LLAVE_D         reduce using rule 198 (caseFlt -> CASE FLOAT FUNCION_FLECHA codeBlock .)


state 463

    (202) caseDob -> CASE DOUBLE FUNCION_FLECHA codeBlock .

    CASE            reduce using rule 202 (caseDob -> CASE DOUBLE FUNCION_FLECHA codeBlock .)
    LLAVE_D         reduce using rule 202 (caseDob -> CASE DOUBLE FUNCION_FLECHA codeBlock .)


state 464

    (206) caseStr -> CASE STRING FUNCION_FLECHA codeBlock .

    CASE            reduce using rule 206 (caseStr -> CASE STRING FUNCION_FLECHA codeBlock .)
    LLAVE_D         reduce using rule 206 (caseStr -> CASE STRING FUNCION_FLECHA codeBlock .)


state 465

    (210) caseChar -> CASE CHAR FUNCION_FLECHA codeBlock .

    CASE            reduce using rule 210 (caseChar -> CASE CHAR FUNCION_FLECHA codeBlock .)
    LLAVE_D         reduce using rule 210 (caseChar -> CASE CHAR FUNCION_FLECHA codeBlock .)


state 466

    (214) caseBool -> CASE booleanos FUNCION_FLECHA codeBlock .

    CASE            reduce using rule 214 (caseBool -> CASE booleanos FUNCION_FLECHA codeBlock .)
    LLAVE_D         reduce using rule 214 (caseBool -> CASE booleanos FUNCION_FLECHA codeBlock .)


state 467

    (4) io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO . READLINE

    READLINE        shift and go to state 519


state 468

    (224) elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I . contenido LLAVE_D
    (225) elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I . contenido LLAVE_D elseif
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 520
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 469

    (108) valor -> VARIABLE PAR_I . VARIABLE PAR_D
    (109) valor -> VARIABLE PAR_I . INT PAR_D
    (147) varparen -> PAR_I . valores PAR_D
    (148) varparen -> PAR_I . PAR_D
    (170) valores -> . valor
    (171) valores -> . valor COMA valores
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    VARIABLE        shift and go to state 521
    INT             shift and go to state 522
    PAR_D           shift and go to state 63
    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valores                        shift and go to state 62
    valor                          shift and go to state 64
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 470

    (93) reasignacion -> VARIABLE PAR_I INT PAR_D . IGUAL valor

    IGUAL           shift and go to state 523


state 471

    (116) funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .

    DEF             reduce using rule 116 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 116 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 116 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 116 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 116 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 116 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 116 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 116 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 116 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 116 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 116 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 116 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)


state 472

    (124) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido . RETURN valor LLAVE_D
    (125) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido . RETURN VARIABLE LLAVE_D
    (126) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido . RETURN returnfun LLAVE_D
    (127) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido . RETURN aritmetica LLAVE_D

    RETURN          shift and go to state 524


state 473

    (128) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN . valor LLAVE_D
    (129) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN . VARIABLE LLAVE_D
    (130) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN . returnfun LLAVE_D
    (131) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN . aritmetica LLAVE_D
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (151) returnfun -> . returnCastable
    (152) returnfun -> . castingcall
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE
    (153) returnCastable -> . entrada
    (154) returnCastable -> . funcall
    (155) castingcall -> . returnCastable PUNTO castingfun
    (156) castingcall -> . VARIABLE PUNTO castingfun
    (145) entrada -> . READLINE PAR_I PAR_D
    (146) funcall -> . VARIABLE varparen

    VARIABLE        shift and go to state 525
    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    READLINE        shift and go to state 18

    valor                          shift and go to state 526
    returnfun                      shift and go to state 527
    aritmetica                     shift and go to state 528
    numeros                        shift and go to state 377
    booleanos                      shift and go to state 69
    returnCastable                 shift and go to state 168
    castingcall                    shift and go to state 169
    entrada                        shift and go to state 173
    funcall                        shift and go to state 174

state 474

    (132) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido . RETURN tuple LLAVE_D
    (133) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido . RETURN VARIABLE LLAVE_D
    (134) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido . RETURN returnfun LLAVE_D

    RETURN          shift and go to state 529


state 475

    (136) dectipoTupla -> DOBLE_PUNTO PAR_I tipos PAR_D .

    IGUAL           reduce using rule 136 (dectipoTupla -> DOBLE_PUNTO PAR_I tipos PAR_D .)


state 476

    (138) tipos -> tipo tiposentry .

    PAR_D           reduce using rule 138 (tipos -> tipo tiposentry .)


state 477

    (139) tiposentry -> COMA . tipo
    (140) tiposentry -> COMA . tipo tiposentry
    (94) tipo -> . CHARCLASS
    (95) tipo -> . STRINGCLASS
    (96) tipo -> . BOOLCLASS
    (97) tipo -> . INTCLASS
    (98) tipo -> . LONGCLASS
    (99) tipo -> . DOUBLECLASS
    (100) tipo -> . FLOATCLASS
    (101) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (102) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    CHARCLASS       shift and go to state 292
    STRINGCLASS     shift and go to state 293
    BOOLCLASS       shift and go to state 294
    INTCLASS        shift and go to state 295
    LONGCLASS       shift and go to state 296
    DOUBLECLASS     shift and go to state 297
    FLOATCLASS      shift and go to state 298
    ARRAYCLASS      shift and go to state 299
    LISTCLASS       shift and go to state 300

    tipo                           shift and go to state 530

state 478

    (101) tipo -> ARRAYCLASS CORCHETE_I tipo . CORCHETE_D

    CORCHETE_D      shift and go to state 531


state 479

    (102) tipo -> LISTCLASS CORCHETE_I tipo . CORCHETE_D

    CORCHETE_D      shift and go to state 532


state 480

    (119) declaracion -> VARIABLE DOBLE_PUNTO tipo IGUAL . valor
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valor                          shift and go to state 533
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 481

    (161) array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .

    DEF             reduce using rule 161 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    VARIABLE        reduce using rule 161 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    PRINTLN         reduce using rule 161 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    PRINT           reduce using rule 161 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    READLINE        reduce using rule 161 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    VAR             reduce using rule 161 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    VAL             reduce using rule 161 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    WHILE           reduce using rule 161 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    FOR             reduce using rule 161 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    IF              reduce using rule 161 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    $end            reduce using rule 161 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    LLAVE_D         reduce using rule 161 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    INT             reduce using rule 161 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    LONG            reduce using rule 161 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    FLOAT           reduce using rule 161 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    DOUBLE          reduce using rule 161 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    RETURN          reduce using rule 161 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    CASE            reduce using rule 161 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)


state 482

    (162) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D . IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    IGUAL           shift and go to state 534


state 483

    (270) arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D . IGUAL ARRAYCLASS PAR_I valoresInt PAR_D

    IGUAL           shift and go to state 535


state 484

    (271) arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D . IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    IGUAL           shift and go to state 536


state 485

    (278) dectupla -> PAR_I STRINGCLASS COMA INTCLASS . PAR_D IGUAL PAR_I STRING COMA INT PAR_D

    PAR_D           shift and go to state 537


state 486

    (279) dectupla -> PAR_I STRINGCLASS COMA LONGCLASS . PAR_D IGUAL PAR_I STRING COMA LONG PAR_D

    PAR_D           shift and go to state 538


state 487

    (280) dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS . PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D

    PAR_D           shift and go to state 539


state 488

    (281) dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS . PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D

    PAR_D           shift and go to state 540


state 489

    (294) dectupla -> PAR_I INTCLASS COMA STRINGCLASS . PAR_D IGUAL PAR_I INT COMA STRING PAR_D

    PAR_D           shift and go to state 541


state 490

    (295) dectupla -> PAR_I INTCLASS COMA LONGCLASS . PAR_D IGUAL PAR_I INT COMA LONG PAR_D

    PAR_D           shift and go to state 542


state 491

    (296) dectupla -> PAR_I INTCLASS COMA DOUBLECLASS . PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D

    PAR_D           shift and go to state 543


state 492

    (297) dectupla -> PAR_I INTCLASS COMA FLOATCLASS . PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D

    PAR_D           shift and go to state 544


state 493

    (290) dectupla -> PAR_I LONGCLASS COMA STRINGCLASS . PAR_D IGUAL PAR_I LONG COMA STRING PAR_D

    PAR_D           shift and go to state 545


state 494

    (291) dectupla -> PAR_I LONGCLASS COMA INTCLASS . PAR_D IGUAL PAR_I LONG COMA INT PAR_D

    PAR_D           shift and go to state 546


state 495

    (292) dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS . PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D

    PAR_D           shift and go to state 547


state 496

    (293) dectupla -> PAR_I LONGCLASS COMA FLOATCLASS . PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D

    PAR_D           shift and go to state 548


state 497

    (286) dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS . PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D

    PAR_D           shift and go to state 549


state 498

    (287) dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS . PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D

    PAR_D           shift and go to state 550


state 499

    (288) dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS . PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D

    PAR_D           shift and go to state 551


state 500

    (289) dectupla -> PAR_I DOUBLECLASS COMA INTCLASS . PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D

    PAR_D           shift and go to state 552


state 501

    (282) dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS . PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D

    PAR_D           shift and go to state 553


state 502

    (283) dectupla -> PAR_I FLOATCLASS COMA LONGCLASS . PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D

    PAR_D           shift and go to state 554


state 503

    (284) dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS . PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D

    PAR_D           shift and go to state 555


state 504

    (285) dectupla -> PAR_I FLOATCLASS COMA INTCLASS . PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D

    PAR_D           shift and go to state 556


state 505

    (163) array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .

    DEF             reduce using rule 163 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    VARIABLE        reduce using rule 163 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    PRINTLN         reduce using rule 163 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    PRINT           reduce using rule 163 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    READLINE        reduce using rule 163 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    VAR             reduce using rule 163 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    VAL             reduce using rule 163 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    WHILE           reduce using rule 163 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    FOR             reduce using rule 163 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    IF              reduce using rule 163 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    $end            reduce using rule 163 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    LLAVE_D         reduce using rule 163 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    INT             reduce using rule 163 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    LONG            reduce using rule 163 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    FLOAT           reduce using rule 163 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    DOUBLE          reduce using rule 163 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    RETURN          reduce using rule 163 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    CASE            reduce using rule 163 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)


state 506

    (167) list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .

    DEF             reduce using rule 167 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    VARIABLE        reduce using rule 167 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    PRINTLN         reduce using rule 167 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    PRINT           reduce using rule 167 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    READLINE        reduce using rule 167 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    VAR             reduce using rule 167 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    VAL             reduce using rule 167 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    WHILE           reduce using rule 167 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    FOR             reduce using rule 167 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    IF              reduce using rule 167 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    $end            reduce using rule 167 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    LLAVE_D         reduce using rule 167 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    INT             reduce using rule 167 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    LONG            reduce using rule 167 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    FLOAT           reduce using rule 167 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    DOUBLE          reduce using rule 167 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    RETURN          reduce using rule 167 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    CASE            reduce using rule 167 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)


state 507

    (164) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D . IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    IGUAL           shift and go to state 557


state 508

    (168) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D . IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D . IGUAL LISTCLASS PAR_I valores PAR_D

    IGUAL           shift and go to state 558


state 509

    (175) while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .

    DEF             reduce using rule 175 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 175 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 175 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 175 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 175 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 175 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 175 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 175 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 175 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 175 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 175 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 175 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 175 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 175 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 175 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 175 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 175 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)


state 510

    (176) for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 559


state 511

    (180) for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO . INT PAR_D LLAVE_I contenido LLAVE_D

    INT             shift and go to state 560


state 512

    (181) for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL . INT PAR_D LLAVE_I contenido LLAVE_D

    INT             shift and go to state 561


state 513

    (177) for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 562
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 514

    (178) for -> FOR PAR_I VARIABLE ITERATOR INT TO INT . PAR_D LLAVE_I contenido LLAVE_D

    PAR_D           shift and go to state 563


state 515

    (179) for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT . PAR_D LLAVE_I contenido LLAVE_D

    PAR_D           shift and go to state 564


state 516

    (221) if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .

    ELSE            reduce using rule 221 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    DEF             reduce using rule 221 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 221 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 221 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 221 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 221 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 221 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 221 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 221 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 221 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 221 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 221 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 221 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 221 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 221 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 221 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 221 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 221 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)


state 517

    (218) defcase -> CASE SUBGUION FUNCION_FLECHA codeBlock .

    LLAVE_D         reduce using rule 218 (defcase -> CASE SUBGUION FUNCION_FLECHA codeBlock .)


state 518

    (220) codeBlock -> LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 565


state 519

    (4) io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .

    OBJECT          reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    IMPORT          reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    DEF             reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    VARIABLE        reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    PRINTLN         reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    PRINT           reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    READLINE        reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    VAR             reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    VAL             reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    WHILE           reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    FOR             reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    IF              reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)


state 520

    (224) elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido . LLAVE_D
    (225) elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido . LLAVE_D elseif

    LLAVE_D         shift and go to state 566


state 521

    (108) valor -> VARIABLE PAR_I VARIABLE . PAR_D
    (105) valor -> VARIABLE .
    (108) valor -> VARIABLE . PAR_I VARIABLE PAR_D
    (109) valor -> VARIABLE . PAR_I INT PAR_D

  ! shift/reduce conflict for PAR_D resolved as shift
    PAR_D           shift and go to state 369
    COMA            reduce using rule 105 (valor -> VARIABLE .)
    PAR_I           shift and go to state 128

  ! PAR_D           [ reduce using rule 105 (valor -> VARIABLE .) ]


state 522

    (109) valor -> VARIABLE PAR_I INT . PAR_D
    (112) numeros -> INT .

  ! shift/reduce conflict for PAR_D resolved as shift
    PAR_D           shift and go to state 370
    COMA            reduce using rule 112 (numeros -> INT .)

  ! PAR_D           [ reduce using rule 112 (numeros -> INT .) ]


state 523

    (93) reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL . valor
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valor                          shift and go to state 567
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 524

    (124) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN . valor LLAVE_D
    (125) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN . VARIABLE LLAVE_D
    (126) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN . returnfun LLAVE_D
    (127) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN . aritmetica LLAVE_D
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (151) returnfun -> . returnCastable
    (152) returnfun -> . castingcall
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE
    (153) returnCastable -> . entrada
    (154) returnCastable -> . funcall
    (155) castingcall -> . returnCastable PUNTO castingfun
    (156) castingcall -> . VARIABLE PUNTO castingfun
    (145) entrada -> . READLINE PAR_I PAR_D
    (146) funcall -> . VARIABLE varparen

    VARIABLE        shift and go to state 568
    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    READLINE        shift and go to state 18

    valor                          shift and go to state 569
    returnfun                      shift and go to state 570
    aritmetica                     shift and go to state 571
    numeros                        shift and go to state 377
    booleanos                      shift and go to state 69
    returnCastable                 shift and go to state 168
    castingcall                    shift and go to state 169
    entrada                        shift and go to state 173
    funcall                        shift and go to state 174

state 525

    (129) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE . LLAVE_D
    (105) valor -> VARIABLE .
    (108) valor -> VARIABLE . PAR_I VARIABLE PAR_D
    (109) valor -> VARIABLE . PAR_I INT PAR_D
    (260) aritmetica -> VARIABLE . aritmeticos numeros
    (262) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (156) castingcall -> VARIABLE . PUNTO castingfun
    (146) funcall -> VARIABLE . varparen
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD
    (147) varparen -> . PAR_I valores PAR_D
    (148) varparen -> . PAR_I PAR_D
    (149) varparen -> . varparen PAR_I valores PAR_D
    (150) varparen -> . varparen PAR_I PAR_D

  ! shift/reduce conflict for LLAVE_D resolved as shift
    LLAVE_D         shift and go to state 572
    PAR_I           shift and go to state 469
    PUNTO           shift and go to state 304
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

  ! LLAVE_D         [ reduce using rule 105 (valor -> VARIABLE .) ]

    aritmeticos                    shift and go to state 214
    varparen                       shift and go to state 36

state 526

    (128) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor . LLAVE_D

    LLAVE_D         shift and go to state 573


state 527

    (130) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun . LLAVE_D

    LLAVE_D         shift and go to state 574


state 528

    (131) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica . LLAVE_D
    (263) aritmetica -> aritmetica . aritmeticos numeros
    (264) aritmetica -> aritmetica . aritmeticos VARIABLE
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD

    LLAVE_D         shift and go to state 575
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    aritmeticos                    shift and go to state 231

state 529

    (132) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN . tuple LLAVE_D
    (133) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN . VARIABLE LLAVE_D
    (134) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN . returnfun LLAVE_D
    (172) tuple -> . PAR_I valores PAR_D
    (151) returnfun -> . returnCastable
    (152) returnfun -> . castingcall
    (153) returnCastable -> . entrada
    (154) returnCastable -> . funcall
    (155) castingcall -> . returnCastable PUNTO castingfun
    (156) castingcall -> . VARIABLE PUNTO castingfun
    (145) entrada -> . READLINE PAR_I PAR_D
    (146) funcall -> . VARIABLE varparen

    VARIABLE        shift and go to state 576
    PAR_I           shift and go to state 167
    READLINE        shift and go to state 18

    tuple                          shift and go to state 577
    returnfun                      shift and go to state 578
    returnCastable                 shift and go to state 168
    castingcall                    shift and go to state 169
    entrada                        shift and go to state 173
    funcall                        shift and go to state 174

state 530

    (139) tiposentry -> COMA tipo .
    (140) tiposentry -> COMA tipo . tiposentry
    (139) tiposentry -> . COMA tipo
    (140) tiposentry -> . COMA tipo tiposentry

    PAR_D           reduce using rule 139 (tiposentry -> COMA tipo .)
    COMA            shift and go to state 477

    tiposentry                     shift and go to state 579

state 531

    (101) tipo -> ARRAYCLASS CORCHETE_I tipo CORCHETE_D .

    IGUAL           reduce using rule 101 (tipo -> ARRAYCLASS CORCHETE_I tipo CORCHETE_D .)
    COMA            reduce using rule 101 (tipo -> ARRAYCLASS CORCHETE_I tipo CORCHETE_D .)
    PAR_D           reduce using rule 101 (tipo -> ARRAYCLASS CORCHETE_I tipo CORCHETE_D .)
    CORCHETE_D      reduce using rule 101 (tipo -> ARRAYCLASS CORCHETE_I tipo CORCHETE_D .)


state 532

    (102) tipo -> LISTCLASS CORCHETE_I tipo CORCHETE_D .

    IGUAL           reduce using rule 102 (tipo -> LISTCLASS CORCHETE_I tipo CORCHETE_D .)
    COMA            reduce using rule 102 (tipo -> LISTCLASS CORCHETE_I tipo CORCHETE_D .)
    PAR_D           reduce using rule 102 (tipo -> LISTCLASS CORCHETE_I tipo CORCHETE_D .)
    CORCHETE_D      reduce using rule 102 (tipo -> LISTCLASS CORCHETE_I tipo CORCHETE_D .)


state 533

    (119) declaracion -> VARIABLE DOBLE_PUNTO tipo IGUAL valor .

    PAR_D           reduce using rule 119 (declaracion -> VARIABLE DOBLE_PUNTO tipo IGUAL valor .)


state 534

    (162) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL . NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    NEW             shift and go to state 580


state 535

    (270) arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL . ARRAYCLASS PAR_I valoresInt PAR_D

    ARRAYCLASS      shift and go to state 581


state 536

    (271) arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL . ARRAYCLASS PAR_I valoresDouble PAR_D

    ARRAYCLASS      shift and go to state 582


state 537

    (278) dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D . IGUAL PAR_I STRING COMA INT PAR_D

    IGUAL           shift and go to state 583


state 538

    (279) dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D . IGUAL PAR_I STRING COMA LONG PAR_D

    IGUAL           shift and go to state 584


state 539

    (280) dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D . IGUAL PAR_I STRING COMA DOUBLE PAR_D

    IGUAL           shift and go to state 585


state 540

    (281) dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D . IGUAL PAR_I STRING COMA FLOAT PAR_D

    IGUAL           shift and go to state 586


state 541

    (294) dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D . IGUAL PAR_I INT COMA STRING PAR_D

    IGUAL           shift and go to state 587


state 542

    (295) dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D . IGUAL PAR_I INT COMA LONG PAR_D

    IGUAL           shift and go to state 588


state 543

    (296) dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D . IGUAL PAR_I INT COMA DOUBLE PAR_D

    IGUAL           shift and go to state 589


state 544

    (297) dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D . IGUAL PAR_I INT COMA FLOAT PAR_D

    IGUAL           shift and go to state 590


state 545

    (290) dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D . IGUAL PAR_I LONG COMA STRING PAR_D

    IGUAL           shift and go to state 591


state 546

    (291) dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D . IGUAL PAR_I LONG COMA INT PAR_D

    IGUAL           shift and go to state 592


state 547

    (292) dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D . IGUAL PAR_I LONG COMA DOUBLE PAR_D

    IGUAL           shift and go to state 593


state 548

    (293) dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D . IGUAL PAR_I LONG COMA FLOAT PAR_D

    IGUAL           shift and go to state 594


state 549

    (286) dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D . IGUAL PAR_I DOUBLE COMA STRING PAR_D

    IGUAL           shift and go to state 595


state 550

    (287) dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D . IGUAL PAR_I DOUBLE COMA LONG PAR_D

    IGUAL           shift and go to state 596


state 551

    (288) dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D . IGUAL PAR_I DOUBLE COMA FLOAT PAR_D

    IGUAL           shift and go to state 597


state 552

    (289) dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D . IGUAL PAR_I DOUBLE COMA INT PAR_D

    IGUAL           shift and go to state 598


state 553

    (282) dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D . IGUAL PAR_I FLOAT COMA STRING PAR_D

    IGUAL           shift and go to state 599


state 554

    (283) dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D . IGUAL PAR_I FLOAT COMA LONG PAR_D

    IGUAL           shift and go to state 600


state 555

    (284) dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D . IGUAL PAR_I FLOAT COMA DOUBLE PAR_D

    IGUAL           shift and go to state 601


state 556

    (285) dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D . IGUAL PAR_I FLOAT COMA INT PAR_D

    IGUAL           shift and go to state 602


state 557

    (164) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL . NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    NEW             shift and go to state 603


state 558

    (168) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL . NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL . LISTCLASS PAR_I valores PAR_D

    NEW             shift and go to state 605
    LISTCLASS       shift and go to state 604


state 559

    (176) for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 606
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 560

    (180) for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT . PAR_D LLAVE_I contenido LLAVE_D

    PAR_D           shift and go to state 607


state 561

    (181) for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT . PAR_D LLAVE_I contenido LLAVE_D

    PAR_D           shift and go to state 608


state 562

    (177) for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 609


state 563

    (178) for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 610


state 564

    (179) for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 611


state 565

    (220) codeBlock -> LLAVE_I contenido LLAVE_D .

    CASE            reduce using rule 220 (codeBlock -> LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 220 (codeBlock -> LLAVE_I contenido LLAVE_D .)


state 566

    (224) elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .
    (225) elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D . elseif
    (224) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (225) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif

  ! shift/reduce conflict for ELSE resolved as shift
    DEF             reduce using rule 224 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 224 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 224 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 224 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 224 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 224 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 224 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 224 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 224 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 224 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 224 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 224 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 224 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 224 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 224 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 224 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 224 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    ELSE            shift and go to state 612

  ! ELSE            [ reduce using rule 224 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .) ]

    elseif                         shift and go to state 613

state 567

    (93) reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .

    VAR             reduce using rule 93 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    VAL             reduce using rule 93 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    VARIABLE        reduce using rule 93 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    PRINTLN         reduce using rule 93 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    PRINT           reduce using rule 93 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    READLINE        reduce using rule 93 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    WHILE           reduce using rule 93 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    FOR             reduce using rule 93 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    IF              reduce using rule 93 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    INT             reduce using rule 93 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    LONG            reduce using rule 93 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    FLOAT           reduce using rule 93 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    DOUBLE          reduce using rule 93 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    LLAVE_D         reduce using rule 93 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    RETURN          reduce using rule 93 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    CASE            reduce using rule 93 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)


state 568

    (125) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE . LLAVE_D
    (105) valor -> VARIABLE .
    (108) valor -> VARIABLE . PAR_I VARIABLE PAR_D
    (109) valor -> VARIABLE . PAR_I INT PAR_D
    (260) aritmetica -> VARIABLE . aritmeticos numeros
    (262) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (156) castingcall -> VARIABLE . PUNTO castingfun
    (146) funcall -> VARIABLE . varparen
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD
    (147) varparen -> . PAR_I valores PAR_D
    (148) varparen -> . PAR_I PAR_D
    (149) varparen -> . varparen PAR_I valores PAR_D
    (150) varparen -> . varparen PAR_I PAR_D

  ! shift/reduce conflict for LLAVE_D resolved as shift
    LLAVE_D         shift and go to state 614
    PAR_I           shift and go to state 469
    PUNTO           shift and go to state 304
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

  ! LLAVE_D         [ reduce using rule 105 (valor -> VARIABLE .) ]

    aritmeticos                    shift and go to state 214
    varparen                       shift and go to state 36

state 569

    (124) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor . LLAVE_D

    LLAVE_D         shift and go to state 615


state 570

    (126) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun . LLAVE_D

    LLAVE_D         shift and go to state 616


state 571

    (127) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica . LLAVE_D
    (263) aritmetica -> aritmetica . aritmeticos numeros
    (264) aritmetica -> aritmetica . aritmeticos VARIABLE
    (265) aritmeticos -> . MENOS
    (266) aritmeticos -> . MAS
    (267) aritmeticos -> . MULTIPLICACION
    (268) aritmeticos -> . DIVISION
    (269) aritmeticos -> . MOD

    LLAVE_D         shift and go to state 617
    MENOS           shift and go to state 219
    MAS             shift and go to state 220
    MULTIPLICACION  shift and go to state 221
    DIVISION        shift and go to state 222
    MOD             shift and go to state 223

    aritmeticos                    shift and go to state 231

state 572

    (129) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .

    DEF             reduce using rule 129 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    VARIABLE        reduce using rule 129 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    PRINTLN         reduce using rule 129 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    PRINT           reduce using rule 129 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    READLINE        reduce using rule 129 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    VAR             reduce using rule 129 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    VAL             reduce using rule 129 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    WHILE           reduce using rule 129 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    FOR             reduce using rule 129 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    IF              reduce using rule 129 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    $end            reduce using rule 129 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    LLAVE_D         reduce using rule 129 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)


state 573

    (128) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .

    DEF             reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    VARIABLE        reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    PRINTLN         reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    PRINT           reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    READLINE        reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    VAR             reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    VAL             reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    WHILE           reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    FOR             reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    IF              reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    $end            reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    LLAVE_D         reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)


state 574

    (130) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .

    DEF             reduce using rule 130 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    VARIABLE        reduce using rule 130 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    PRINTLN         reduce using rule 130 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    PRINT           reduce using rule 130 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    READLINE        reduce using rule 130 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    VAR             reduce using rule 130 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    VAL             reduce using rule 130 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    WHILE           reduce using rule 130 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    FOR             reduce using rule 130 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    IF              reduce using rule 130 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    $end            reduce using rule 130 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    LLAVE_D         reduce using rule 130 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)


state 575

    (131) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .

    DEF             reduce using rule 131 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    VARIABLE        reduce using rule 131 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    PRINTLN         reduce using rule 131 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    PRINT           reduce using rule 131 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    READLINE        reduce using rule 131 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    VAR             reduce using rule 131 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    VAL             reduce using rule 131 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    WHILE           reduce using rule 131 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    FOR             reduce using rule 131 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    IF              reduce using rule 131 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    $end            reduce using rule 131 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    LLAVE_D         reduce using rule 131 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)


state 576

    (133) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE . LLAVE_D
    (156) castingcall -> VARIABLE . PUNTO castingfun
    (146) funcall -> VARIABLE . varparen
    (147) varparen -> . PAR_I valores PAR_D
    (148) varparen -> . PAR_I PAR_D
    (149) varparen -> . varparen PAR_I valores PAR_D
    (150) varparen -> . varparen PAR_I PAR_D

    LLAVE_D         shift and go to state 618
    PUNTO           shift and go to state 304
    PAR_I           shift and go to state 38

    varparen                       shift and go to state 36

state 577

    (132) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple . LLAVE_D

    LLAVE_D         shift and go to state 619


state 578

    (134) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun . LLAVE_D

    LLAVE_D         shift and go to state 620


state 579

    (140) tiposentry -> COMA tipo tiposentry .

    PAR_D           reduce using rule 140 (tiposentry -> COMA tipo tiposentry .)


state 580

    (162) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW . ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    ARRAYCLASS      shift and go to state 621


state 581

    (270) arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS . PAR_I valoresInt PAR_D

    PAR_I           shift and go to state 622


state 582

    (271) arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS . PAR_I valoresDouble PAR_D

    PAR_I           shift and go to state 623


state 583

    (278) dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL . PAR_I STRING COMA INT PAR_D

    PAR_I           shift and go to state 624


state 584

    (279) dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL . PAR_I STRING COMA LONG PAR_D

    PAR_I           shift and go to state 625


state 585

    (280) dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL . PAR_I STRING COMA DOUBLE PAR_D

    PAR_I           shift and go to state 626


state 586

    (281) dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL . PAR_I STRING COMA FLOAT PAR_D

    PAR_I           shift and go to state 627


state 587

    (294) dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL . PAR_I INT COMA STRING PAR_D

    PAR_I           shift and go to state 628


state 588

    (295) dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL . PAR_I INT COMA LONG PAR_D

    PAR_I           shift and go to state 629


state 589

    (296) dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL . PAR_I INT COMA DOUBLE PAR_D

    PAR_I           shift and go to state 630


state 590

    (297) dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL . PAR_I INT COMA FLOAT PAR_D

    PAR_I           shift and go to state 631


state 591

    (290) dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL . PAR_I LONG COMA STRING PAR_D

    PAR_I           shift and go to state 632


state 592

    (291) dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL . PAR_I LONG COMA INT PAR_D

    PAR_I           shift and go to state 633


state 593

    (292) dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL . PAR_I LONG COMA DOUBLE PAR_D

    PAR_I           shift and go to state 634


state 594

    (293) dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL . PAR_I LONG COMA FLOAT PAR_D

    PAR_I           shift and go to state 635


state 595

    (286) dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL . PAR_I DOUBLE COMA STRING PAR_D

    PAR_I           shift and go to state 636


state 596

    (287) dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL . PAR_I DOUBLE COMA LONG PAR_D

    PAR_I           shift and go to state 637


state 597

    (288) dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL . PAR_I DOUBLE COMA FLOAT PAR_D

    PAR_I           shift and go to state 638


state 598

    (289) dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL . PAR_I DOUBLE COMA INT PAR_D

    PAR_I           shift and go to state 639


state 599

    (282) dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL . PAR_I FLOAT COMA STRING PAR_D

    PAR_I           shift and go to state 640


state 600

    (283) dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL . PAR_I FLOAT COMA LONG PAR_D

    PAR_I           shift and go to state 641


state 601

    (284) dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL . PAR_I FLOAT COMA DOUBLE PAR_D

    PAR_I           shift and go to state 642


state 602

    (285) dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL . PAR_I FLOAT COMA INT PAR_D

    PAR_I           shift and go to state 643


state 603

    (164) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW . ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    ARRAYCLASS      shift and go to state 644


state 604

    (169) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS . PAR_I valores PAR_D

    PAR_I           shift and go to state 645


state 605

    (168) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW . LISTCLASS PAR_I valores PAR_D

    LISTCLASS       shift and go to state 646


state 606

    (176) for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 647


state 607

    (180) for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 648


state 608

    (181) for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 649


state 609

    (177) for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .

    DEF             reduce using rule 177 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 177 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 177 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 177 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 177 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 177 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 177 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 177 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 177 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 177 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 177 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 177 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 177 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 177 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 177 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 177 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 177 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)


state 610

    (178) for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 650
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 611

    (179) for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 651
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 612

    (224) elseif -> ELSE . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (225) elseif -> ELSE . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif

    IF              shift and go to state 81


state 613

    (225) elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .

    ELSE            reduce using rule 225 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    DEF             reduce using rule 225 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    VARIABLE        reduce using rule 225 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    PRINTLN         reduce using rule 225 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    PRINT           reduce using rule 225 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    READLINE        reduce using rule 225 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    VAR             reduce using rule 225 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    VAL             reduce using rule 225 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    WHILE           reduce using rule 225 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    FOR             reduce using rule 225 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    IF              reduce using rule 225 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    $end            reduce using rule 225 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    LLAVE_D         reduce using rule 225 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    INT             reduce using rule 225 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    LONG            reduce using rule 225 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    FLOAT           reduce using rule 225 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    DOUBLE          reduce using rule 225 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    RETURN          reduce using rule 225 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)


state 614

    (125) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .

    DEF             reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    VARIABLE        reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    PRINTLN         reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    PRINT           reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    READLINE        reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    VAR             reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    VAL             reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    WHILE           reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    FOR             reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    IF              reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    $end            reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    LLAVE_D         reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)


state 615

    (124) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .

    DEF             reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    VARIABLE        reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    PRINTLN         reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    PRINT           reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    READLINE        reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    VAR             reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    VAL             reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    WHILE           reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    FOR             reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    IF              reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    $end            reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    LLAVE_D         reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)


state 616

    (126) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .

    DEF             reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    VARIABLE        reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    PRINTLN         reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    PRINT           reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    READLINE        reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    VAR             reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    VAL             reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    WHILE           reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    FOR             reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    IF              reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    $end            reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    LLAVE_D         reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)


state 617

    (127) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .

    DEF             reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    VARIABLE        reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    PRINTLN         reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    PRINT           reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    READLINE        reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    VAR             reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    VAL             reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    WHILE           reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    FOR             reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    IF              reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    $end            reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    LLAVE_D         reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)


state 618

    (133) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .

    DEF             reduce using rule 133 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    VARIABLE        reduce using rule 133 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    PRINTLN         reduce using rule 133 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    PRINT           reduce using rule 133 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    READLINE        reduce using rule 133 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    VAR             reduce using rule 133 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    VAL             reduce using rule 133 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    WHILE           reduce using rule 133 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    FOR             reduce using rule 133 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    IF              reduce using rule 133 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    $end            reduce using rule 133 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    LLAVE_D         reduce using rule 133 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)


state 619

    (132) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .

    DEF             reduce using rule 132 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    VARIABLE        reduce using rule 132 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    PRINTLN         reduce using rule 132 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    PRINT           reduce using rule 132 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    READLINE        reduce using rule 132 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    VAR             reduce using rule 132 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    VAL             reduce using rule 132 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    WHILE           reduce using rule 132 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    FOR             reduce using rule 132 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    IF              reduce using rule 132 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    $end            reduce using rule 132 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    LLAVE_D         reduce using rule 132 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)


state 620

    (134) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .

    DEF             reduce using rule 134 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    VARIABLE        reduce using rule 134 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    PRINTLN         reduce using rule 134 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    PRINT           reduce using rule 134 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    READLINE        reduce using rule 134 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    VAR             reduce using rule 134 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    VAL             reduce using rule 134 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    WHILE           reduce using rule 134 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    FOR             reduce using rule 134 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    IF              reduce using rule 134 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    $end            reduce using rule 134 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    LLAVE_D         reduce using rule 134 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)


state 621

    (162) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS . CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    CORCHETE_I      shift and go to state 652


state 622

    (270) arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I . valoresInt PAR_D
    (272) valoresInt -> . INT
    (273) valoresInt -> . valoresInt COMA INT

    INT             shift and go to state 654

    valoresInt                     shift and go to state 653

state 623

    (271) arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I . valoresDouble PAR_D
    (274) valoresDouble -> . DOUBLE
    (275) valoresDouble -> . valoresDouble COMA DOUBLE

    DOUBLE          shift and go to state 656

    valoresDouble                  shift and go to state 655

state 624

    (278) dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I . STRING COMA INT PAR_D

    STRING          shift and go to state 657


state 625

    (279) dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I . STRING COMA LONG PAR_D

    STRING          shift and go to state 658


state 626

    (280) dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I . STRING COMA DOUBLE PAR_D

    STRING          shift and go to state 659


state 627

    (281) dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I . STRING COMA FLOAT PAR_D

    STRING          shift and go to state 660


state 628

    (294) dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I . INT COMA STRING PAR_D

    INT             shift and go to state 661


state 629

    (295) dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I . INT COMA LONG PAR_D

    INT             shift and go to state 662


state 630

    (296) dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I . INT COMA DOUBLE PAR_D

    INT             shift and go to state 663


state 631

    (297) dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I . INT COMA FLOAT PAR_D

    INT             shift and go to state 664


state 632

    (290) dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I . LONG COMA STRING PAR_D

    LONG            shift and go to state 665


state 633

    (291) dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I . LONG COMA INT PAR_D

    LONG            shift and go to state 666


state 634

    (292) dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I . LONG COMA DOUBLE PAR_D

    LONG            shift and go to state 667


state 635

    (293) dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I . LONG COMA FLOAT PAR_D

    LONG            shift and go to state 668


state 636

    (286) dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I . DOUBLE COMA STRING PAR_D

    DOUBLE          shift and go to state 669


state 637

    (287) dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I . DOUBLE COMA LONG PAR_D

    DOUBLE          shift and go to state 670


state 638

    (288) dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I . DOUBLE COMA FLOAT PAR_D

    DOUBLE          shift and go to state 671


state 639

    (289) dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I . DOUBLE COMA INT PAR_D

    DOUBLE          shift and go to state 672


state 640

    (282) dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I . FLOAT COMA STRING PAR_D

    FLOAT           shift and go to state 673


state 641

    (283) dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I . FLOAT COMA LONG PAR_D

    FLOAT           shift and go to state 674


state 642

    (284) dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I . FLOAT COMA DOUBLE PAR_D

    FLOAT           shift and go to state 675


state 643

    (285) dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I . FLOAT COMA INT PAR_D

    FLOAT           shift and go to state 676


state 644

    (164) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS . CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    CORCHETE_I      shift and go to state 677


state 645

    (169) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I . valores PAR_D
    (170) valores -> . valor
    (171) valores -> . valor COMA valores
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valores                        shift and go to state 678
    valor                          shift and go to state 64
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 646

    (168) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS . PAR_I valores PAR_D

    PAR_I           shift and go to state 679


state 647

    (176) for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .

    DEF             reduce using rule 176 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 176 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 176 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 176 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 176 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 176 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 176 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 176 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 176 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 176 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 176 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 176 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 176 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 176 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 176 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 176 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 176 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)


state 648

    (180) for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 680
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 649

    (181) for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (173) asignacion -> . VAR VARIABLE IGUAL tuple
    (174) asignacion -> . VAL VARIABLE IGUAL tuple
    (276) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (277) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (90) reasignacion -> . VARIABLE IGUAL valor
    (91) reasignacion -> . VARIABLE IGUAL returnfun
    (92) reasignacion -> . VARIABLE IGUAL aritmetica
    (93) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (146) funcall -> . VARIABLE varparen
    (141) impresion -> . PRINTLN PAR_I valorI PAR_D
    (142) impresion -> . PRINT PAR_I valorI PAR_D
    (145) entrada -> . READLINE PAR_I PAR_D
    (175) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (176) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (177) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (178) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (179) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (180) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (181) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (182) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (221) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) if -> . if elseif
    (223) if -> . if else
    (259) aritmetica -> . numeros aritmeticos numeros
    (260) aritmetica -> . VARIABLE aritmeticos numeros
    (261) aritmetica -> . numeros aritmeticos VARIABLE
    (262) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (263) aritmetica -> . aritmetica aritmeticos numeros
    (264) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (62) asignacionInt -> . VAR VARIABLE IGUAL INT
    (63) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (64) asignacionInt -> . VAL VARIABLE IGUAL INT
    (65) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL INT
    (66) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (67) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL VARIABLE
    (68) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (69) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (304) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (305) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (306) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (70) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (71) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (310) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (311) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (312) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (72) asignacionString -> . VAR VARIABLE IGUAL STRING
    (73) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (74) asignacionString -> . VAL VARIABLE IGUAL STRING
    (75) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (76) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (77) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (78) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (79) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (80) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (81) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (82) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (83) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (84) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (85) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (86) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (87) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (88) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (89) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (161) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (162) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (163) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (164) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (165) array -> . arrayInt
    (166) array -> . arrayDouble
    (167) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (168) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (169) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (270) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (271) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 681
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 650

    (178) for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 682


state 651

    (179) for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 683


state 652

    (162) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I . tipo CORCHETE_D PAR_I INT PAR_D
    (94) tipo -> . CHARCLASS
    (95) tipo -> . STRINGCLASS
    (96) tipo -> . BOOLCLASS
    (97) tipo -> . INTCLASS
    (98) tipo -> . LONGCLASS
    (99) tipo -> . DOUBLECLASS
    (100) tipo -> . FLOATCLASS
    (101) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (102) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    CHARCLASS       shift and go to state 292
    STRINGCLASS     shift and go to state 293
    BOOLCLASS       shift and go to state 294
    INTCLASS        shift and go to state 295
    LONGCLASS       shift and go to state 296
    DOUBLECLASS     shift and go to state 297
    FLOATCLASS      shift and go to state 298
    ARRAYCLASS      shift and go to state 299
    LISTCLASS       shift and go to state 300

    tipo                           shift and go to state 684

state 653

    (270) arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt . PAR_D
    (273) valoresInt -> valoresInt . COMA INT

    PAR_D           shift and go to state 685
    COMA            shift and go to state 686


state 654

    (272) valoresInt -> INT .

    PAR_D           reduce using rule 272 (valoresInt -> INT .)
    COMA            reduce using rule 272 (valoresInt -> INT .)


state 655

    (271) arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble . PAR_D
    (275) valoresDouble -> valoresDouble . COMA DOUBLE

    PAR_D           shift and go to state 687
    COMA            shift and go to state 688


state 656

    (274) valoresDouble -> DOUBLE .

    PAR_D           reduce using rule 274 (valoresDouble -> DOUBLE .)
    COMA            reduce using rule 274 (valoresDouble -> DOUBLE .)


state 657

    (278) dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING . COMA INT PAR_D

    COMA            shift and go to state 689


state 658

    (279) dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING . COMA LONG PAR_D

    COMA            shift and go to state 690


state 659

    (280) dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING . COMA DOUBLE PAR_D

    COMA            shift and go to state 691


state 660

    (281) dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING . COMA FLOAT PAR_D

    COMA            shift and go to state 692


state 661

    (294) dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT . COMA STRING PAR_D

    COMA            shift and go to state 693


state 662

    (295) dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT . COMA LONG PAR_D

    COMA            shift and go to state 694


state 663

    (296) dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT . COMA DOUBLE PAR_D

    COMA            shift and go to state 695


state 664

    (297) dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT . COMA FLOAT PAR_D

    COMA            shift and go to state 696


state 665

    (290) dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG . COMA STRING PAR_D

    COMA            shift and go to state 697


state 666

    (291) dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG . COMA INT PAR_D

    COMA            shift and go to state 698


state 667

    (292) dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG . COMA DOUBLE PAR_D

    COMA            shift and go to state 699


state 668

    (293) dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG . COMA FLOAT PAR_D

    COMA            shift and go to state 700


state 669

    (286) dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE . COMA STRING PAR_D

    COMA            shift and go to state 701


state 670

    (287) dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE . COMA LONG PAR_D

    COMA            shift and go to state 702


state 671

    (288) dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE . COMA FLOAT PAR_D

    COMA            shift and go to state 703


state 672

    (289) dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE . COMA INT PAR_D

    COMA            shift and go to state 704


state 673

    (282) dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT . COMA STRING PAR_D

    COMA            shift and go to state 705


state 674

    (283) dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT . COMA LONG PAR_D

    COMA            shift and go to state 706


state 675

    (284) dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT . COMA DOUBLE PAR_D

    COMA            shift and go to state 707


state 676

    (285) dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT . COMA INT PAR_D

    COMA            shift and go to state 708


state 677

    (164) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I . tipo CORCHETE_D PAR_I INT PAR_D
    (94) tipo -> . CHARCLASS
    (95) tipo -> . STRINGCLASS
    (96) tipo -> . BOOLCLASS
    (97) tipo -> . INTCLASS
    (98) tipo -> . LONGCLASS
    (99) tipo -> . DOUBLECLASS
    (100) tipo -> . FLOATCLASS
    (101) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (102) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    CHARCLASS       shift and go to state 292
    STRINGCLASS     shift and go to state 293
    BOOLCLASS       shift and go to state 294
    INTCLASS        shift and go to state 295
    LONGCLASS       shift and go to state 296
    DOUBLECLASS     shift and go to state 297
    FLOATCLASS      shift and go to state 298
    ARRAYCLASS      shift and go to state 299
    LISTCLASS       shift and go to state 300

    tipo                           shift and go to state 709

state 678

    (169) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores . PAR_D

    PAR_D           shift and go to state 710


state 679

    (168) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I . valores PAR_D
    (170) valores -> . valor
    (171) valores -> . valor COMA valores
    (103) valor -> . STRING
    (104) valor -> . CHAR
    (105) valor -> . VARIABLE
    (106) valor -> . numeros
    (107) valor -> . booleanos
    (108) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (109) valor -> . VARIABLE PAR_I INT PAR_D
    (112) numeros -> . INT
    (113) numeros -> . LONG
    (114) numeros -> . FLOAT
    (115) numeros -> . DOUBLE
    (110) booleanos -> . TRUE
    (111) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valores                        shift and go to state 711
    valor                          shift and go to state 64
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 680

    (180) for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 712


state 681

    (181) for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 713


state 682

    (178) for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .

    DEF             reduce using rule 178 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 178 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 178 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 178 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 178 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 178 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 178 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 178 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 178 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 178 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 178 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 178 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 178 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 178 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 178 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 178 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 178 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)


state 683

    (179) for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .

    DEF             reduce using rule 179 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 179 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 179 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 179 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 179 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 179 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 179 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 179 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 179 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 179 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 179 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 179 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 179 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 179 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 179 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 179 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 179 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)


state 684

    (162) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo . CORCHETE_D PAR_I INT PAR_D

    CORCHETE_D      shift and go to state 714


state 685

    (270) arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .

    DEF             reduce using rule 270 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    VARIABLE        reduce using rule 270 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    PRINTLN         reduce using rule 270 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    PRINT           reduce using rule 270 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    READLINE        reduce using rule 270 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    VAR             reduce using rule 270 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    VAL             reduce using rule 270 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    WHILE           reduce using rule 270 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    FOR             reduce using rule 270 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    IF              reduce using rule 270 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    $end            reduce using rule 270 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    LLAVE_D         reduce using rule 270 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    INT             reduce using rule 270 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    LONG            reduce using rule 270 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    FLOAT           reduce using rule 270 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    DOUBLE          reduce using rule 270 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    RETURN          reduce using rule 270 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    CASE            reduce using rule 270 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)


state 686

    (273) valoresInt -> valoresInt COMA . INT

    INT             shift and go to state 715


state 687

    (271) arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .

    DEF             reduce using rule 271 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    VARIABLE        reduce using rule 271 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    PRINTLN         reduce using rule 271 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    PRINT           reduce using rule 271 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    READLINE        reduce using rule 271 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    VAR             reduce using rule 271 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    VAL             reduce using rule 271 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    WHILE           reduce using rule 271 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    FOR             reduce using rule 271 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    IF              reduce using rule 271 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    $end            reduce using rule 271 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    LLAVE_D         reduce using rule 271 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    INT             reduce using rule 271 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    LONG            reduce using rule 271 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    FLOAT           reduce using rule 271 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    DOUBLE          reduce using rule 271 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    RETURN          reduce using rule 271 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    CASE            reduce using rule 271 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)


state 688

    (275) valoresDouble -> valoresDouble COMA . DOUBLE

    DOUBLE          shift and go to state 716


state 689

    (278) dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA . INT PAR_D

    INT             shift and go to state 717


state 690

    (279) dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA . LONG PAR_D

    LONG            shift and go to state 718


state 691

    (280) dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA . DOUBLE PAR_D

    DOUBLE          shift and go to state 719


state 692

    (281) dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA . FLOAT PAR_D

    FLOAT           shift and go to state 720


state 693

    (294) dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA . STRING PAR_D

    STRING          shift and go to state 721


state 694

    (295) dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA . LONG PAR_D

    LONG            shift and go to state 722


state 695

    (296) dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA . DOUBLE PAR_D

    DOUBLE          shift and go to state 723


state 696

    (297) dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA . FLOAT PAR_D

    FLOAT           shift and go to state 724


state 697

    (290) dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA . STRING PAR_D

    STRING          shift and go to state 725


state 698

    (291) dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA . INT PAR_D

    INT             shift and go to state 726


state 699

    (292) dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA . DOUBLE PAR_D

    DOUBLE          shift and go to state 727


state 700

    (293) dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA . FLOAT PAR_D

    FLOAT           shift and go to state 728


state 701

    (286) dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA . STRING PAR_D

    STRING          shift and go to state 729


state 702

    (287) dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA . LONG PAR_D

    LONG            shift and go to state 730


state 703

    (288) dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA . FLOAT PAR_D

    FLOAT           shift and go to state 731


state 704

    (289) dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA . INT PAR_D

    INT             shift and go to state 732


state 705

    (282) dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA . STRING PAR_D

    STRING          shift and go to state 733


state 706

    (283) dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA . LONG PAR_D

    LONG            shift and go to state 734


state 707

    (284) dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA . DOUBLE PAR_D

    DOUBLE          shift and go to state 735


state 708

    (285) dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA . INT PAR_D

    INT             shift and go to state 736


state 709

    (164) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo . CORCHETE_D PAR_I INT PAR_D

    CORCHETE_D      shift and go to state 737


state 710

    (169) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .

    DEF             reduce using rule 169 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    VARIABLE        reduce using rule 169 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    PRINTLN         reduce using rule 169 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    PRINT           reduce using rule 169 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    READLINE        reduce using rule 169 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    VAR             reduce using rule 169 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    VAL             reduce using rule 169 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    WHILE           reduce using rule 169 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    FOR             reduce using rule 169 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    IF              reduce using rule 169 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    $end            reduce using rule 169 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    LLAVE_D         reduce using rule 169 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    INT             reduce using rule 169 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    LONG            reduce using rule 169 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    FLOAT           reduce using rule 169 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    DOUBLE          reduce using rule 169 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    RETURN          reduce using rule 169 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    CASE            reduce using rule 169 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)


state 711

    (168) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores . PAR_D

    PAR_D           shift and go to state 738


state 712

    (180) for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .

    DEF             reduce using rule 180 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 180 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 180 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 180 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 180 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 180 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 180 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 180 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 180 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 180 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 180 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 180 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 180 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 180 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 180 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 180 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 180 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)


state 713

    (181) for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .

    DEF             reduce using rule 181 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 181 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 181 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 181 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 181 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 181 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 181 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 181 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 181 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 181 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 181 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 181 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 181 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 181 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 181 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 181 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 181 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)


state 714

    (162) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D . PAR_I INT PAR_D

    PAR_I           shift and go to state 739


state 715

    (273) valoresInt -> valoresInt COMA INT .

    PAR_D           reduce using rule 273 (valoresInt -> valoresInt COMA INT .)
    COMA            reduce using rule 273 (valoresInt -> valoresInt COMA INT .)


state 716

    (275) valoresDouble -> valoresDouble COMA DOUBLE .

    PAR_D           reduce using rule 275 (valoresDouble -> valoresDouble COMA DOUBLE .)
    COMA            reduce using rule 275 (valoresDouble -> valoresDouble COMA DOUBLE .)


state 717

    (278) dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT . PAR_D

    PAR_D           shift and go to state 740


state 718

    (279) dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG . PAR_D

    PAR_D           shift and go to state 741


state 719

    (280) dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE . PAR_D

    PAR_D           shift and go to state 742


state 720

    (281) dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT . PAR_D

    PAR_D           shift and go to state 743


state 721

    (294) dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING . PAR_D

    PAR_D           shift and go to state 744


state 722

    (295) dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG . PAR_D

    PAR_D           shift and go to state 745


state 723

    (296) dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE . PAR_D

    PAR_D           shift and go to state 746


state 724

    (297) dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT . PAR_D

    PAR_D           shift and go to state 747


state 725

    (290) dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING . PAR_D

    PAR_D           shift and go to state 748


state 726

    (291) dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT . PAR_D

    PAR_D           shift and go to state 749


state 727

    (292) dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE . PAR_D

    PAR_D           shift and go to state 750


state 728

    (293) dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT . PAR_D

    PAR_D           shift and go to state 751


state 729

    (286) dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING . PAR_D

    PAR_D           shift and go to state 752


state 730

    (287) dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG . PAR_D

    PAR_D           shift and go to state 753


state 731

    (288) dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT . PAR_D

    PAR_D           shift and go to state 754


state 732

    (289) dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT . PAR_D

    PAR_D           shift and go to state 755


state 733

    (282) dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING . PAR_D

    PAR_D           shift and go to state 756


state 734

    (283) dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG . PAR_D

    PAR_D           shift and go to state 757


state 735

    (284) dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE . PAR_D

    PAR_D           shift and go to state 758


state 736

    (285) dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT . PAR_D

    PAR_D           shift and go to state 759


state 737

    (164) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D . PAR_I INT PAR_D

    PAR_I           shift and go to state 760


state 738

    (168) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .

    DEF             reduce using rule 168 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    VARIABLE        reduce using rule 168 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    PRINTLN         reduce using rule 168 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    PRINT           reduce using rule 168 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    READLINE        reduce using rule 168 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    VAR             reduce using rule 168 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    VAL             reduce using rule 168 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    WHILE           reduce using rule 168 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    FOR             reduce using rule 168 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    IF              reduce using rule 168 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    $end            reduce using rule 168 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    LLAVE_D         reduce using rule 168 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    INT             reduce using rule 168 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    LONG            reduce using rule 168 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    FLOAT           reduce using rule 168 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    DOUBLE          reduce using rule 168 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    RETURN          reduce using rule 168 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    CASE            reduce using rule 168 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)


state 739

    (162) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I . INT PAR_D

    INT             shift and go to state 761


state 740

    (278) dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .

    DEF             reduce using rule 278 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    VARIABLE        reduce using rule 278 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    PRINTLN         reduce using rule 278 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    PRINT           reduce using rule 278 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    READLINE        reduce using rule 278 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    VAR             reduce using rule 278 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    VAL             reduce using rule 278 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    WHILE           reduce using rule 278 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    FOR             reduce using rule 278 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    IF              reduce using rule 278 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    $end            reduce using rule 278 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    LLAVE_D         reduce using rule 278 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    INT             reduce using rule 278 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    LONG            reduce using rule 278 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    FLOAT           reduce using rule 278 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    DOUBLE          reduce using rule 278 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    RETURN          reduce using rule 278 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    CASE            reduce using rule 278 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)


state 741

    (279) dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .

    DEF             reduce using rule 279 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    VARIABLE        reduce using rule 279 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    PRINTLN         reduce using rule 279 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    PRINT           reduce using rule 279 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    READLINE        reduce using rule 279 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    VAR             reduce using rule 279 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    VAL             reduce using rule 279 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    WHILE           reduce using rule 279 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    FOR             reduce using rule 279 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    IF              reduce using rule 279 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    $end            reduce using rule 279 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    LLAVE_D         reduce using rule 279 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    INT             reduce using rule 279 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    LONG            reduce using rule 279 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    FLOAT           reduce using rule 279 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    DOUBLE          reduce using rule 279 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    RETURN          reduce using rule 279 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    CASE            reduce using rule 279 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)


state 742

    (280) dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .

    DEF             reduce using rule 280 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    VARIABLE        reduce using rule 280 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    PRINTLN         reduce using rule 280 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    PRINT           reduce using rule 280 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    READLINE        reduce using rule 280 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    VAR             reduce using rule 280 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    VAL             reduce using rule 280 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    WHILE           reduce using rule 280 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    FOR             reduce using rule 280 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    IF              reduce using rule 280 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    $end            reduce using rule 280 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    LLAVE_D         reduce using rule 280 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    INT             reduce using rule 280 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    LONG            reduce using rule 280 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    FLOAT           reduce using rule 280 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    DOUBLE          reduce using rule 280 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    RETURN          reduce using rule 280 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    CASE            reduce using rule 280 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)


state 743

    (281) dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .

    DEF             reduce using rule 281 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    VARIABLE        reduce using rule 281 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    PRINTLN         reduce using rule 281 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    PRINT           reduce using rule 281 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    READLINE        reduce using rule 281 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    VAR             reduce using rule 281 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    VAL             reduce using rule 281 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    WHILE           reduce using rule 281 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    FOR             reduce using rule 281 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    IF              reduce using rule 281 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    $end            reduce using rule 281 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    LLAVE_D         reduce using rule 281 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    INT             reduce using rule 281 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    LONG            reduce using rule 281 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    FLOAT           reduce using rule 281 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    DOUBLE          reduce using rule 281 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    RETURN          reduce using rule 281 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    CASE            reduce using rule 281 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)


state 744

    (294) dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .

    DEF             reduce using rule 294 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    VARIABLE        reduce using rule 294 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    PRINTLN         reduce using rule 294 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    PRINT           reduce using rule 294 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    READLINE        reduce using rule 294 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    VAR             reduce using rule 294 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    VAL             reduce using rule 294 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    WHILE           reduce using rule 294 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    FOR             reduce using rule 294 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    IF              reduce using rule 294 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    $end            reduce using rule 294 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    LLAVE_D         reduce using rule 294 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    INT             reduce using rule 294 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    LONG            reduce using rule 294 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    FLOAT           reduce using rule 294 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    DOUBLE          reduce using rule 294 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    RETURN          reduce using rule 294 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    CASE            reduce using rule 294 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)


state 745

    (295) dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .

    DEF             reduce using rule 295 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    VARIABLE        reduce using rule 295 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    PRINTLN         reduce using rule 295 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    PRINT           reduce using rule 295 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    READLINE        reduce using rule 295 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    VAR             reduce using rule 295 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    VAL             reduce using rule 295 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    WHILE           reduce using rule 295 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    FOR             reduce using rule 295 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    IF              reduce using rule 295 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    $end            reduce using rule 295 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    LLAVE_D         reduce using rule 295 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    INT             reduce using rule 295 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    LONG            reduce using rule 295 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    FLOAT           reduce using rule 295 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    DOUBLE          reduce using rule 295 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    RETURN          reduce using rule 295 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    CASE            reduce using rule 295 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)


state 746

    (296) dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .

    DEF             reduce using rule 296 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    VARIABLE        reduce using rule 296 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    PRINTLN         reduce using rule 296 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    PRINT           reduce using rule 296 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    READLINE        reduce using rule 296 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    VAR             reduce using rule 296 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    VAL             reduce using rule 296 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    WHILE           reduce using rule 296 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    FOR             reduce using rule 296 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    IF              reduce using rule 296 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    $end            reduce using rule 296 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    LLAVE_D         reduce using rule 296 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    INT             reduce using rule 296 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    LONG            reduce using rule 296 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    FLOAT           reduce using rule 296 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    DOUBLE          reduce using rule 296 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    RETURN          reduce using rule 296 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    CASE            reduce using rule 296 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)


state 747

    (297) dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .

    DEF             reduce using rule 297 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    VARIABLE        reduce using rule 297 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    PRINTLN         reduce using rule 297 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    PRINT           reduce using rule 297 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    READLINE        reduce using rule 297 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    VAR             reduce using rule 297 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    VAL             reduce using rule 297 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    WHILE           reduce using rule 297 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    FOR             reduce using rule 297 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    IF              reduce using rule 297 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    $end            reduce using rule 297 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    LLAVE_D         reduce using rule 297 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    INT             reduce using rule 297 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    LONG            reduce using rule 297 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    FLOAT           reduce using rule 297 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    DOUBLE          reduce using rule 297 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    RETURN          reduce using rule 297 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    CASE            reduce using rule 297 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)


state 748

    (290) dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .

    DEF             reduce using rule 290 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    VARIABLE        reduce using rule 290 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    PRINTLN         reduce using rule 290 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    PRINT           reduce using rule 290 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    READLINE        reduce using rule 290 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    VAR             reduce using rule 290 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    VAL             reduce using rule 290 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    WHILE           reduce using rule 290 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    FOR             reduce using rule 290 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    IF              reduce using rule 290 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    $end            reduce using rule 290 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    LLAVE_D         reduce using rule 290 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    INT             reduce using rule 290 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    LONG            reduce using rule 290 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    FLOAT           reduce using rule 290 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    DOUBLE          reduce using rule 290 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    RETURN          reduce using rule 290 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    CASE            reduce using rule 290 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)


state 749

    (291) dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .

    DEF             reduce using rule 291 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    VARIABLE        reduce using rule 291 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    PRINTLN         reduce using rule 291 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    PRINT           reduce using rule 291 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    READLINE        reduce using rule 291 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    VAR             reduce using rule 291 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    VAL             reduce using rule 291 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    WHILE           reduce using rule 291 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    FOR             reduce using rule 291 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    IF              reduce using rule 291 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    $end            reduce using rule 291 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    LLAVE_D         reduce using rule 291 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    INT             reduce using rule 291 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    LONG            reduce using rule 291 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    FLOAT           reduce using rule 291 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    DOUBLE          reduce using rule 291 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    RETURN          reduce using rule 291 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    CASE            reduce using rule 291 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)


state 750

    (292) dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .

    DEF             reduce using rule 292 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    VARIABLE        reduce using rule 292 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    PRINTLN         reduce using rule 292 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    PRINT           reduce using rule 292 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    READLINE        reduce using rule 292 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    VAR             reduce using rule 292 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    VAL             reduce using rule 292 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    WHILE           reduce using rule 292 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    FOR             reduce using rule 292 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    IF              reduce using rule 292 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    $end            reduce using rule 292 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    LLAVE_D         reduce using rule 292 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    INT             reduce using rule 292 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    LONG            reduce using rule 292 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    FLOAT           reduce using rule 292 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    DOUBLE          reduce using rule 292 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    RETURN          reduce using rule 292 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    CASE            reduce using rule 292 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)


state 751

    (293) dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .

    DEF             reduce using rule 293 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    VARIABLE        reduce using rule 293 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    PRINTLN         reduce using rule 293 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    PRINT           reduce using rule 293 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    READLINE        reduce using rule 293 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    VAR             reduce using rule 293 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    VAL             reduce using rule 293 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    WHILE           reduce using rule 293 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    FOR             reduce using rule 293 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    IF              reduce using rule 293 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    $end            reduce using rule 293 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    LLAVE_D         reduce using rule 293 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    INT             reduce using rule 293 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    LONG            reduce using rule 293 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    FLOAT           reduce using rule 293 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    DOUBLE          reduce using rule 293 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    RETURN          reduce using rule 293 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    CASE            reduce using rule 293 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)


state 752

    (286) dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .

    DEF             reduce using rule 286 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    VARIABLE        reduce using rule 286 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    PRINTLN         reduce using rule 286 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    PRINT           reduce using rule 286 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    READLINE        reduce using rule 286 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    VAR             reduce using rule 286 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    VAL             reduce using rule 286 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    WHILE           reduce using rule 286 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    FOR             reduce using rule 286 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    IF              reduce using rule 286 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    $end            reduce using rule 286 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    LLAVE_D         reduce using rule 286 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    INT             reduce using rule 286 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    LONG            reduce using rule 286 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    FLOAT           reduce using rule 286 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    DOUBLE          reduce using rule 286 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    RETURN          reduce using rule 286 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    CASE            reduce using rule 286 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)


state 753

    (287) dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .

    DEF             reduce using rule 287 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    VARIABLE        reduce using rule 287 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    PRINTLN         reduce using rule 287 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    PRINT           reduce using rule 287 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    READLINE        reduce using rule 287 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    VAR             reduce using rule 287 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    VAL             reduce using rule 287 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    WHILE           reduce using rule 287 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    FOR             reduce using rule 287 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    IF              reduce using rule 287 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    $end            reduce using rule 287 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    LLAVE_D         reduce using rule 287 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    INT             reduce using rule 287 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    LONG            reduce using rule 287 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    FLOAT           reduce using rule 287 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    DOUBLE          reduce using rule 287 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    RETURN          reduce using rule 287 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    CASE            reduce using rule 287 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)


state 754

    (288) dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .

    DEF             reduce using rule 288 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    VARIABLE        reduce using rule 288 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    PRINTLN         reduce using rule 288 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    PRINT           reduce using rule 288 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    READLINE        reduce using rule 288 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    VAR             reduce using rule 288 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    VAL             reduce using rule 288 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    WHILE           reduce using rule 288 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    FOR             reduce using rule 288 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    IF              reduce using rule 288 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    $end            reduce using rule 288 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    LLAVE_D         reduce using rule 288 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    INT             reduce using rule 288 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    LONG            reduce using rule 288 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    FLOAT           reduce using rule 288 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    DOUBLE          reduce using rule 288 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    RETURN          reduce using rule 288 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    CASE            reduce using rule 288 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)


state 755

    (289) dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .

    DEF             reduce using rule 289 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    VARIABLE        reduce using rule 289 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    PRINTLN         reduce using rule 289 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    PRINT           reduce using rule 289 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    READLINE        reduce using rule 289 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    VAR             reduce using rule 289 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    VAL             reduce using rule 289 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    WHILE           reduce using rule 289 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    FOR             reduce using rule 289 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    IF              reduce using rule 289 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    $end            reduce using rule 289 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    LLAVE_D         reduce using rule 289 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    INT             reduce using rule 289 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    LONG            reduce using rule 289 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    FLOAT           reduce using rule 289 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    DOUBLE          reduce using rule 289 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    RETURN          reduce using rule 289 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    CASE            reduce using rule 289 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)


state 756

    (282) dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .

    DEF             reduce using rule 282 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    VARIABLE        reduce using rule 282 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    PRINTLN         reduce using rule 282 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    PRINT           reduce using rule 282 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    READLINE        reduce using rule 282 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    VAR             reduce using rule 282 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    VAL             reduce using rule 282 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    WHILE           reduce using rule 282 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    FOR             reduce using rule 282 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    IF              reduce using rule 282 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    $end            reduce using rule 282 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    LLAVE_D         reduce using rule 282 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    INT             reduce using rule 282 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    LONG            reduce using rule 282 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    FLOAT           reduce using rule 282 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    DOUBLE          reduce using rule 282 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    RETURN          reduce using rule 282 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    CASE            reduce using rule 282 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)


state 757

    (283) dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .

    DEF             reduce using rule 283 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    VARIABLE        reduce using rule 283 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    PRINTLN         reduce using rule 283 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    PRINT           reduce using rule 283 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    READLINE        reduce using rule 283 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    VAR             reduce using rule 283 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    VAL             reduce using rule 283 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    WHILE           reduce using rule 283 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    FOR             reduce using rule 283 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    IF              reduce using rule 283 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    $end            reduce using rule 283 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    LLAVE_D         reduce using rule 283 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    INT             reduce using rule 283 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    LONG            reduce using rule 283 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    FLOAT           reduce using rule 283 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    DOUBLE          reduce using rule 283 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    RETURN          reduce using rule 283 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    CASE            reduce using rule 283 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)


state 758

    (284) dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .

    DEF             reduce using rule 284 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    VARIABLE        reduce using rule 284 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    PRINTLN         reduce using rule 284 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    PRINT           reduce using rule 284 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    READLINE        reduce using rule 284 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    VAR             reduce using rule 284 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    VAL             reduce using rule 284 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    WHILE           reduce using rule 284 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    FOR             reduce using rule 284 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    IF              reduce using rule 284 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    $end            reduce using rule 284 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    LLAVE_D         reduce using rule 284 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    INT             reduce using rule 284 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    LONG            reduce using rule 284 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    FLOAT           reduce using rule 284 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    DOUBLE          reduce using rule 284 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    RETURN          reduce using rule 284 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    CASE            reduce using rule 284 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)


state 759

    (285) dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .

    DEF             reduce using rule 285 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    VARIABLE        reduce using rule 285 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    PRINTLN         reduce using rule 285 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    PRINT           reduce using rule 285 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    READLINE        reduce using rule 285 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    VAR             reduce using rule 285 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    VAL             reduce using rule 285 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    WHILE           reduce using rule 285 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    FOR             reduce using rule 285 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    IF              reduce using rule 285 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    $end            reduce using rule 285 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    LLAVE_D         reduce using rule 285 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    INT             reduce using rule 285 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    LONG            reduce using rule 285 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    FLOAT           reduce using rule 285 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    DOUBLE          reduce using rule 285 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    RETURN          reduce using rule 285 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    CASE            reduce using rule 285 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)


state 760

    (164) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I . INT PAR_D

    INT             shift and go to state 762


state 761

    (162) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT . PAR_D

    PAR_D           shift and go to state 763


state 762

    (164) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT . PAR_D

    PAR_D           shift and go to state 764


state 763

    (162) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .

    DEF             reduce using rule 162 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    VARIABLE        reduce using rule 162 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    PRINTLN         reduce using rule 162 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    PRINT           reduce using rule 162 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    READLINE        reduce using rule 162 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    VAR             reduce using rule 162 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    VAL             reduce using rule 162 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    WHILE           reduce using rule 162 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    FOR             reduce using rule 162 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    IF              reduce using rule 162 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    $end            reduce using rule 162 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    LLAVE_D         reduce using rule 162 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    INT             reduce using rule 162 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    LONG            reduce using rule 162 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    FLOAT           reduce using rule 162 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    DOUBLE          reduce using rule 162 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    RETURN          reduce using rule 162 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    CASE            reduce using rule 162 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)


state 764

    (164) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .

    DEF             reduce using rule 164 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    VARIABLE        reduce using rule 164 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    PRINTLN         reduce using rule 164 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    PRINT           reduce using rule 164 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    READLINE        reduce using rule 164 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    VAR             reduce using rule 164 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    VAL             reduce using rule 164 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    WHILE           reduce using rule 164 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    FOR             reduce using rule 164 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    IF              reduce using rule 164 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    $end            reduce using rule 164 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    LLAVE_D         reduce using rule 164 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    INT             reduce using rule 164 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    LONG            reduce using rule 164 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    FLOAT           reduce using rule 164 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    DOUBLE          reduce using rule 164 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    RETURN          reduce using rule 164 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    CASE            reduce using rule 164 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 47 resolved as shift
WARNING: shift/reduce conflict for PAR_D in state 378 resolved as shift
WARNING: shift/reduce conflict for CORCHETE_D in state 419 resolved as shift
WARNING: shift/reduce conflict for CORCHETE_D in state 420 resolved as shift
WARNING: shift/reduce conflict for PAR_D in state 521 resolved as shift
WARNING: shift/reduce conflict for PAR_D in state 522 resolved as shift
WARNING: shift/reduce conflict for LLAVE_D in state 525 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 566 resolved as shift
WARNING: shift/reduce conflict for LLAVE_D in state 568 resolved as shift
WARNING: reduce/reduce conflict in state 159 resolved using rule (asignacionLong -> VAR VARIABLE IGUAL longvalues)
WARNING: rejected rule (floatvalues -> longvalues) in state 159
WARNING: reduce/reduce conflict in state 160 resolved using rule (asignacionInt -> VAR VARIABLE IGUAL INT)
WARNING: rejected rule (longvalues -> INT) in state 160
WARNING: reduce/reduce conflict in state 161 resolved using rule (asignacionFloat -> VAR VARIABLE IGUAL floatvalues)
WARNING: rejected rule (doublevalues -> floatvalues) in state 161
WARNING: reduce/reduce conflict in state 189 resolved using rule (asignacionLong -> VAL VARIABLE IGUAL longvalues)
WARNING: rejected rule (floatvalues -> longvalues) in state 189
WARNING: reduce/reduce conflict in state 190 resolved using rule (asignacionInt -> VAL VARIABLE IGUAL INT)
WARNING: rejected rule (longvalues -> INT) in state 190
WARNING: reduce/reduce conflict in state 191 resolved using rule (asignacionFloat -> VAL VARIABLE IGUAL floatvalues)
WARNING: rejected rule (doublevalues -> floatvalues) in state 191
