Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ARRAYCLASS
    ARROBA
    BACKTICK
    CASE
    CATCH
    CLASS
    CORCHETE_D
    CORCHETE_I
    DIVISION
    DO
    ELSE
    EXTENDS
    FINAL
    FINALLY
    FOR
    FOR_SOME
    FUNCION_FLECHA
    HASHTAG
    IF
    IMPLICIT
    IMPORT
    ITERATOR
    LAZY
    LIBRERIA_IO
    LISTCLASS
    MACRO
    MAS
    MATCH
    MAYOR_IGUAL
    MENOR_IGUAL
    MENOS
    MOD
    MULTIPLICACION
    NEW
    NULL
    OBJECT
    OVERRIDE
    PACKAGE
    PRIVATE
    PROTECTED
    PUNTO
    RETURN
    REVERSE
    SEALED
    SUBGUION
    SUPER
    THIS
    THROW
    TO_DOUBLE
    TO_FLOAT
    TO_INT
    TO_LONG
    TRAIT
    TRY
    TYPE
    WHILE
    WITH
    YIELD

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> contenido
Rule 2     cuerpo -> funcion
Rule 3     contenido -> asignacion
Rule 4     contenido -> impresion
Rule 5     contenido -> entrada
Rule 6     asignacion -> VAR VARIABLE IGUAL valor
Rule 7     asignacion -> VAL VARIABLE IGUAL valor
Rule 8     asignacion -> VAL declaracion IGUAL valor
Rule 9     asignacion -> VAR declaracion IGUAL valor
Rule 10    declaracion -> VARIABLE DOBLE_PUNTO tipo
Rule 11    tipo -> CHARCLASS
Rule 12    tipo -> STRINGCLASS
Rule 13    tipo -> BOOLCLASS
Rule 14    tipo -> INTCLASS
Rule 15    tipo -> LONGCLASS
Rule 16    tipo -> DOUBLECLASS
Rule 17    tipo -> FLOATCLASS
Rule 18    valor -> STRING
Rule 19    valor -> CHAR
Rule 20    valor -> VARIABLE
Rule 21    valor -> numeros
Rule 22    valor -> booleanos
Rule 23    booleanos -> TRUE
Rule 24    booleanos -> FLASE
Rule 25    numeros -> INT
Rule 26    numeros -> LONG
Rule 27    numeros -> FLOAT
Rule 28    numeros -> DOUBLE
Rule 29    funcion -> DEF VARIABLE PAR_I parametro PAR_D IGUAL LLAVE_I contenido LLAVE_D
Rule 30    parametro -> VARIABLE
Rule 31    parametro -> VARIABLE COMA parametro
Rule 32    impresion -> PRINTLN PAR_I valor PAR_D
Rule 33    impresion -> PRINT PAR_I valor PAR_D
Rule 34    entrada -> READLINE PAR_I PAR_D
Rule 35    condicional -> valorC logicos condicional
Rule 36    condicional -> valorC
Rule 37    valorC -> VARIABLE
Rule 38    valorC -> booleanos
Rule 39    valorC -> relacional
Rule 40    valorC -> NOT VARIABLE
Rule 41    valorC -> NOT booleanos
Rule 42    valorC -> NOT relacional
Rule 43    logicos -> AND
Rule 44    logicos -> OR
Rule 45    logicos -> NOT
Rule 46    relacional -> numeros comparacion numeros
Rule 47    relacional -> booleanos comparacion booleanos
Rule 48    relacional -> STRING comparacion STRING
Rule 49    relacional -> CHAR comparacion CHAR
Rule 50    relacional -> VARIABLE comparacion numeros
Rule 51    relacional -> numeros comparacion VARIABLE
Rule 52    relacional -> VARIABLE comparacion booleanos
Rule 53    relacional -> booleanos comparacion VARIABLE
Rule 54    relacional -> VARIABLE comparacion STRING
Rule 55    relacional -> STRING comparacion VARIABLE
Rule 56    relacional -> VARIABLE comparacion CHAR
Rule 57    relacional -> CHAR comparacion VARIABLE
Rule 58    relacional -> VARIABLE comparacion VARIABLE
Rule 59    comparacion -> IGUAL_COMPARACION
Rule 60    comparacion -> DIFERENTE
Rule 61    comparacion -> MAYOR
Rule 62    comparacion -> MENOR

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 43
ARRAYCLASS           : 
ARROBA               : 
BACKTICK             : 
BOOLCLASS            : 13
CASE                 : 
CATCH                : 
CHAR                 : 19 49 49 56 57
CHARCLASS            : 11
CLASS                : 
COMA                 : 31
CORCHETE_D           : 
CORCHETE_I           : 
DEF                  : 29
DIFERENTE            : 60
DIVISION             : 
DO                   : 
DOBLE_PUNTO          : 10
DOUBLE               : 28
DOUBLECLASS          : 16
ELSE                 : 
EXTENDS              : 
FINAL                : 
FINALLY              : 
FLASE                : 24
FLOAT                : 27
FLOATCLASS           : 17
FOR                  : 
FOR_SOME             : 
FUNCION_FLECHA       : 
HASHTAG              : 
IF                   : 
IGUAL                : 6 7 8 9 29
IGUAL_COMPARACION    : 59
IMPLICIT             : 
IMPORT               : 
INT                  : 25
INTCLASS             : 14
ITERATOR             : 
LAZY                 : 
LIBRERIA_IO          : 
LISTCLASS            : 
LLAVE_D              : 29
LLAVE_I              : 29
LONG                 : 26
LONGCLASS            : 15
MACRO                : 
MAS                  : 
MATCH                : 
MAYOR                : 61
MAYOR_IGUAL          : 
MENOR                : 62
MENOR_IGUAL          : 
MENOS                : 
MOD                  : 
MULTIPLICACION       : 
NEW                  : 
NOT                  : 40 41 42 45
NULL                 : 
OBJECT               : 
OR                   : 44
OVERRIDE             : 
PACKAGE              : 
PAR_D                : 29 32 33 34
PAR_I                : 29 32 33 34
PRINT                : 33
PRINTLN              : 32
PRIVATE              : 
PROTECTED            : 
PUNTO                : 
READLINE             : 34
RETURN               : 
REVERSE              : 
SEALED               : 
STRING               : 18 48 48 54 55
STRINGCLASS          : 12
SUBGUION             : 
SUPER                : 
THIS                 : 
THROW                : 
TO_DOUBLE            : 
TO_FLOAT             : 
TO_INT               : 
TO_LONG              : 
TRAIT                : 
TRUE                 : 23
TRY                  : 
TYPE                 : 
VAL                  : 7 8
VAR                  : 6 9
VARIABLE             : 6 7 10 20 29 30 31 37 40 50 51 52 53 54 55 56 57 58 58
WHILE                : 
WITH                 : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

asignacion           : 3
booleanos            : 22 38 41 47 47 52 53
comparacion          : 46 47 48 49 50 51 52 53 54 55 56 57 58
condicional          : 35
contenido            : 1 29
cuerpo               : 0
declaracion          : 8 9
entrada              : 5
funcion              : 2
impresion            : 4
logicos              : 35
numeros              : 21 46 46 50 51
parametro            : 29 31
relacional           : 39 42
tipo                 : 10
valor                : 6 7 8 9 32 33
valorC               : 35 36

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . contenido
    (2) cuerpo -> . funcion
    (3) contenido -> . asignacion
    (4) contenido -> . impresion
    (5) contenido -> . entrada
    (29) funcion -> . DEF VARIABLE PAR_I parametro PAR_D IGUAL LLAVE_I contenido LLAVE_D
    (6) asignacion -> . VAR VARIABLE IGUAL valor
    (7) asignacion -> . VAL VARIABLE IGUAL valor
    (8) asignacion -> . VAL declaracion IGUAL valor
    (9) asignacion -> . VAR declaracion IGUAL valor
    (32) impresion -> . PRINTLN PAR_I valor PAR_D
    (33) impresion -> . PRINT PAR_I valor PAR_D
    (34) entrada -> . READLINE PAR_I PAR_D

    DEF             shift and go to state 7
    VAR             shift and go to state 8
    VAL             shift and go to state 9
    PRINTLN         shift and go to state 10
    PRINT           shift and go to state 11
    READLINE        shift and go to state 12

    cuerpo                         shift and go to state 1
    contenido                      shift and go to state 2
    funcion                        shift and go to state 3
    asignacion                     shift and go to state 4
    impresion                      shift and go to state 5
    entrada                        shift and go to state 6

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> contenido .

    $end            reduce using rule 1 (cuerpo -> contenido .)


state 3

    (2) cuerpo -> funcion .

    $end            reduce using rule 2 (cuerpo -> funcion .)


state 4

    (3) contenido -> asignacion .

    $end            reduce using rule 3 (contenido -> asignacion .)
    LLAVE_D         reduce using rule 3 (contenido -> asignacion .)


state 5

    (4) contenido -> impresion .

    $end            reduce using rule 4 (contenido -> impresion .)
    LLAVE_D         reduce using rule 4 (contenido -> impresion .)


state 6

    (5) contenido -> entrada .

    $end            reduce using rule 5 (contenido -> entrada .)
    LLAVE_D         reduce using rule 5 (contenido -> entrada .)


state 7

    (29) funcion -> DEF . VARIABLE PAR_I parametro PAR_D IGUAL LLAVE_I contenido LLAVE_D

    VARIABLE        shift and go to state 13


state 8

    (6) asignacion -> VAR . VARIABLE IGUAL valor
    (9) asignacion -> VAR . declaracion IGUAL valor
    (10) declaracion -> . VARIABLE DOBLE_PUNTO tipo

    VARIABLE        shift and go to state 14

    declaracion                    shift and go to state 15

state 9

    (7) asignacion -> VAL . VARIABLE IGUAL valor
    (8) asignacion -> VAL . declaracion IGUAL valor
    (10) declaracion -> . VARIABLE DOBLE_PUNTO tipo

    VARIABLE        shift and go to state 16

    declaracion                    shift and go to state 17

state 10

    (32) impresion -> PRINTLN . PAR_I valor PAR_D

    PAR_I           shift and go to state 18


state 11

    (33) impresion -> PRINT . PAR_I valor PAR_D

    PAR_I           shift and go to state 19


state 12

    (34) entrada -> READLINE . PAR_I PAR_D

    PAR_I           shift and go to state 20


state 13

    (29) funcion -> DEF VARIABLE . PAR_I parametro PAR_D IGUAL LLAVE_I contenido LLAVE_D

    PAR_I           shift and go to state 21


state 14

    (6) asignacion -> VAR VARIABLE . IGUAL valor
    (10) declaracion -> VARIABLE . DOBLE_PUNTO tipo

    IGUAL           shift and go to state 22
    DOBLE_PUNTO     shift and go to state 23


state 15

    (9) asignacion -> VAR declaracion . IGUAL valor

    IGUAL           shift and go to state 24


state 16

    (7) asignacion -> VAL VARIABLE . IGUAL valor
    (10) declaracion -> VARIABLE . DOBLE_PUNTO tipo

    IGUAL           shift and go to state 25
    DOBLE_PUNTO     shift and go to state 23


state 17

    (8) asignacion -> VAL declaracion . IGUAL valor

    IGUAL           shift and go to state 26


state 18

    (32) impresion -> PRINTLN PAR_I . valor PAR_D
    (18) valor -> . STRING
    (19) valor -> . CHAR
    (20) valor -> . VARIABLE
    (21) valor -> . numeros
    (22) valor -> . booleanos
    (25) numeros -> . INT
    (26) numeros -> . LONG
    (27) numeros -> . FLOAT
    (28) numeros -> . DOUBLE
    (23) booleanos -> . TRUE
    (24) booleanos -> . FLASE

    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    VARIABLE        shift and go to state 30
    INT             shift and go to state 33
    LONG            shift and go to state 34
    FLOAT           shift and go to state 35
    DOUBLE          shift and go to state 36
    TRUE            shift and go to state 37
    FLASE           shift and go to state 38

    valor                          shift and go to state 27
    numeros                        shift and go to state 31
    booleanos                      shift and go to state 32

state 19

    (33) impresion -> PRINT PAR_I . valor PAR_D
    (18) valor -> . STRING
    (19) valor -> . CHAR
    (20) valor -> . VARIABLE
    (21) valor -> . numeros
    (22) valor -> . booleanos
    (25) numeros -> . INT
    (26) numeros -> . LONG
    (27) numeros -> . FLOAT
    (28) numeros -> . DOUBLE
    (23) booleanos -> . TRUE
    (24) booleanos -> . FLASE

    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    VARIABLE        shift and go to state 30
    INT             shift and go to state 33
    LONG            shift and go to state 34
    FLOAT           shift and go to state 35
    DOUBLE          shift and go to state 36
    TRUE            shift and go to state 37
    FLASE           shift and go to state 38

    valor                          shift and go to state 39
    numeros                        shift and go to state 31
    booleanos                      shift and go to state 32

state 20

    (34) entrada -> READLINE PAR_I . PAR_D

    PAR_D           shift and go to state 40


state 21

    (29) funcion -> DEF VARIABLE PAR_I . parametro PAR_D IGUAL LLAVE_I contenido LLAVE_D
    (30) parametro -> . VARIABLE
    (31) parametro -> . VARIABLE COMA parametro

    VARIABLE        shift and go to state 41

    parametro                      shift and go to state 42

state 22

    (6) asignacion -> VAR VARIABLE IGUAL . valor
    (18) valor -> . STRING
    (19) valor -> . CHAR
    (20) valor -> . VARIABLE
    (21) valor -> . numeros
    (22) valor -> . booleanos
    (25) numeros -> . INT
    (26) numeros -> . LONG
    (27) numeros -> . FLOAT
    (28) numeros -> . DOUBLE
    (23) booleanos -> . TRUE
    (24) booleanos -> . FLASE

    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    VARIABLE        shift and go to state 30
    INT             shift and go to state 33
    LONG            shift and go to state 34
    FLOAT           shift and go to state 35
    DOUBLE          shift and go to state 36
    TRUE            shift and go to state 37
    FLASE           shift and go to state 38

    valor                          shift and go to state 43
    numeros                        shift and go to state 31
    booleanos                      shift and go to state 32

state 23

    (10) declaracion -> VARIABLE DOBLE_PUNTO . tipo
    (11) tipo -> . CHARCLASS
    (12) tipo -> . STRINGCLASS
    (13) tipo -> . BOOLCLASS
    (14) tipo -> . INTCLASS
    (15) tipo -> . LONGCLASS
    (16) tipo -> . DOUBLECLASS
    (17) tipo -> . FLOATCLASS

    CHARCLASS       shift and go to state 45
    STRINGCLASS     shift and go to state 46
    BOOLCLASS       shift and go to state 47
    INTCLASS        shift and go to state 48
    LONGCLASS       shift and go to state 49
    DOUBLECLASS     shift and go to state 50
    FLOATCLASS      shift and go to state 51

    tipo                           shift and go to state 44

state 24

    (9) asignacion -> VAR declaracion IGUAL . valor
    (18) valor -> . STRING
    (19) valor -> . CHAR
    (20) valor -> . VARIABLE
    (21) valor -> . numeros
    (22) valor -> . booleanos
    (25) numeros -> . INT
    (26) numeros -> . LONG
    (27) numeros -> . FLOAT
    (28) numeros -> . DOUBLE
    (23) booleanos -> . TRUE
    (24) booleanos -> . FLASE

    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    VARIABLE        shift and go to state 30
    INT             shift and go to state 33
    LONG            shift and go to state 34
    FLOAT           shift and go to state 35
    DOUBLE          shift and go to state 36
    TRUE            shift and go to state 37
    FLASE           shift and go to state 38

    valor                          shift and go to state 52
    numeros                        shift and go to state 31
    booleanos                      shift and go to state 32

state 25

    (7) asignacion -> VAL VARIABLE IGUAL . valor
    (18) valor -> . STRING
    (19) valor -> . CHAR
    (20) valor -> . VARIABLE
    (21) valor -> . numeros
    (22) valor -> . booleanos
    (25) numeros -> . INT
    (26) numeros -> . LONG
    (27) numeros -> . FLOAT
    (28) numeros -> . DOUBLE
    (23) booleanos -> . TRUE
    (24) booleanos -> . FLASE

    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    VARIABLE        shift and go to state 30
    INT             shift and go to state 33
    LONG            shift and go to state 34
    FLOAT           shift and go to state 35
    DOUBLE          shift and go to state 36
    TRUE            shift and go to state 37
    FLASE           shift and go to state 38

    valor                          shift and go to state 53
    numeros                        shift and go to state 31
    booleanos                      shift and go to state 32

state 26

    (8) asignacion -> VAL declaracion IGUAL . valor
    (18) valor -> . STRING
    (19) valor -> . CHAR
    (20) valor -> . VARIABLE
    (21) valor -> . numeros
    (22) valor -> . booleanos
    (25) numeros -> . INT
    (26) numeros -> . LONG
    (27) numeros -> . FLOAT
    (28) numeros -> . DOUBLE
    (23) booleanos -> . TRUE
    (24) booleanos -> . FLASE

    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    VARIABLE        shift and go to state 30
    INT             shift and go to state 33
    LONG            shift and go to state 34
    FLOAT           shift and go to state 35
    DOUBLE          shift and go to state 36
    TRUE            shift and go to state 37
    FLASE           shift and go to state 38

    valor                          shift and go to state 54
    numeros                        shift and go to state 31
    booleanos                      shift and go to state 32

state 27

    (32) impresion -> PRINTLN PAR_I valor . PAR_D

    PAR_D           shift and go to state 55


state 28

    (18) valor -> STRING .

    PAR_D           reduce using rule 18 (valor -> STRING .)
    $end            reduce using rule 18 (valor -> STRING .)
    LLAVE_D         reduce using rule 18 (valor -> STRING .)


state 29

    (19) valor -> CHAR .

    PAR_D           reduce using rule 19 (valor -> CHAR .)
    $end            reduce using rule 19 (valor -> CHAR .)
    LLAVE_D         reduce using rule 19 (valor -> CHAR .)


state 30

    (20) valor -> VARIABLE .

    PAR_D           reduce using rule 20 (valor -> VARIABLE .)
    $end            reduce using rule 20 (valor -> VARIABLE .)
    LLAVE_D         reduce using rule 20 (valor -> VARIABLE .)


state 31

    (21) valor -> numeros .

    PAR_D           reduce using rule 21 (valor -> numeros .)
    $end            reduce using rule 21 (valor -> numeros .)
    LLAVE_D         reduce using rule 21 (valor -> numeros .)


state 32

    (22) valor -> booleanos .

    PAR_D           reduce using rule 22 (valor -> booleanos .)
    $end            reduce using rule 22 (valor -> booleanos .)
    LLAVE_D         reduce using rule 22 (valor -> booleanos .)


state 33

    (25) numeros -> INT .

    PAR_D           reduce using rule 25 (numeros -> INT .)
    $end            reduce using rule 25 (numeros -> INT .)
    LLAVE_D         reduce using rule 25 (numeros -> INT .)


state 34

    (26) numeros -> LONG .

    PAR_D           reduce using rule 26 (numeros -> LONG .)
    $end            reduce using rule 26 (numeros -> LONG .)
    LLAVE_D         reduce using rule 26 (numeros -> LONG .)


state 35

    (27) numeros -> FLOAT .

    PAR_D           reduce using rule 27 (numeros -> FLOAT .)
    $end            reduce using rule 27 (numeros -> FLOAT .)
    LLAVE_D         reduce using rule 27 (numeros -> FLOAT .)


state 36

    (28) numeros -> DOUBLE .

    PAR_D           reduce using rule 28 (numeros -> DOUBLE .)
    $end            reduce using rule 28 (numeros -> DOUBLE .)
    LLAVE_D         reduce using rule 28 (numeros -> DOUBLE .)


state 37

    (23) booleanos -> TRUE .

    PAR_D           reduce using rule 23 (booleanos -> TRUE .)
    $end            reduce using rule 23 (booleanos -> TRUE .)
    LLAVE_D         reduce using rule 23 (booleanos -> TRUE .)


state 38

    (24) booleanos -> FLASE .

    PAR_D           reduce using rule 24 (booleanos -> FLASE .)
    $end            reduce using rule 24 (booleanos -> FLASE .)
    LLAVE_D         reduce using rule 24 (booleanos -> FLASE .)


state 39

    (33) impresion -> PRINT PAR_I valor . PAR_D

    PAR_D           shift and go to state 56


state 40

    (34) entrada -> READLINE PAR_I PAR_D .

    $end            reduce using rule 34 (entrada -> READLINE PAR_I PAR_D .)
    LLAVE_D         reduce using rule 34 (entrada -> READLINE PAR_I PAR_D .)


state 41

    (30) parametro -> VARIABLE .
    (31) parametro -> VARIABLE . COMA parametro

    PAR_D           reduce using rule 30 (parametro -> VARIABLE .)
    COMA            shift and go to state 57


state 42

    (29) funcion -> DEF VARIABLE PAR_I parametro . PAR_D IGUAL LLAVE_I contenido LLAVE_D

    PAR_D           shift and go to state 58


state 43

    (6) asignacion -> VAR VARIABLE IGUAL valor .

    $end            reduce using rule 6 (asignacion -> VAR VARIABLE IGUAL valor .)
    LLAVE_D         reduce using rule 6 (asignacion -> VAR VARIABLE IGUAL valor .)


state 44

    (10) declaracion -> VARIABLE DOBLE_PUNTO tipo .

    IGUAL           reduce using rule 10 (declaracion -> VARIABLE DOBLE_PUNTO tipo .)


state 45

    (11) tipo -> CHARCLASS .

    IGUAL           reduce using rule 11 (tipo -> CHARCLASS .)


state 46

    (12) tipo -> STRINGCLASS .

    IGUAL           reduce using rule 12 (tipo -> STRINGCLASS .)


state 47

    (13) tipo -> BOOLCLASS .

    IGUAL           reduce using rule 13 (tipo -> BOOLCLASS .)


state 48

    (14) tipo -> INTCLASS .

    IGUAL           reduce using rule 14 (tipo -> INTCLASS .)


state 49

    (15) tipo -> LONGCLASS .

    IGUAL           reduce using rule 15 (tipo -> LONGCLASS .)


state 50

    (16) tipo -> DOUBLECLASS .

    IGUAL           reduce using rule 16 (tipo -> DOUBLECLASS .)


state 51

    (17) tipo -> FLOATCLASS .

    IGUAL           reduce using rule 17 (tipo -> FLOATCLASS .)


state 52

    (9) asignacion -> VAR declaracion IGUAL valor .

    $end            reduce using rule 9 (asignacion -> VAR declaracion IGUAL valor .)
    LLAVE_D         reduce using rule 9 (asignacion -> VAR declaracion IGUAL valor .)


state 53

    (7) asignacion -> VAL VARIABLE IGUAL valor .

    $end            reduce using rule 7 (asignacion -> VAL VARIABLE IGUAL valor .)
    LLAVE_D         reduce using rule 7 (asignacion -> VAL VARIABLE IGUAL valor .)


state 54

    (8) asignacion -> VAL declaracion IGUAL valor .

    $end            reduce using rule 8 (asignacion -> VAL declaracion IGUAL valor .)
    LLAVE_D         reduce using rule 8 (asignacion -> VAL declaracion IGUAL valor .)


state 55

    (32) impresion -> PRINTLN PAR_I valor PAR_D .

    $end            reduce using rule 32 (impresion -> PRINTLN PAR_I valor PAR_D .)
    LLAVE_D         reduce using rule 32 (impresion -> PRINTLN PAR_I valor PAR_D .)


state 56

    (33) impresion -> PRINT PAR_I valor PAR_D .

    $end            reduce using rule 33 (impresion -> PRINT PAR_I valor PAR_D .)
    LLAVE_D         reduce using rule 33 (impresion -> PRINT PAR_I valor PAR_D .)


state 57

    (31) parametro -> VARIABLE COMA . parametro
    (30) parametro -> . VARIABLE
    (31) parametro -> . VARIABLE COMA parametro

    VARIABLE        shift and go to state 41

    parametro                      shift and go to state 59

state 58

    (29) funcion -> DEF VARIABLE PAR_I parametro PAR_D . IGUAL LLAVE_I contenido LLAVE_D

    IGUAL           shift and go to state 60


state 59

    (31) parametro -> VARIABLE COMA parametro .

    PAR_D           reduce using rule 31 (parametro -> VARIABLE COMA parametro .)


state 60

    (29) funcion -> DEF VARIABLE PAR_I parametro PAR_D IGUAL . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 61


state 61

    (29) funcion -> DEF VARIABLE PAR_I parametro PAR_D IGUAL LLAVE_I . contenido LLAVE_D
    (3) contenido -> . asignacion
    (4) contenido -> . impresion
    (5) contenido -> . entrada
    (6) asignacion -> . VAR VARIABLE IGUAL valor
    (7) asignacion -> . VAL VARIABLE IGUAL valor
    (8) asignacion -> . VAL declaracion IGUAL valor
    (9) asignacion -> . VAR declaracion IGUAL valor
    (32) impresion -> . PRINTLN PAR_I valor PAR_D
    (33) impresion -> . PRINT PAR_I valor PAR_D
    (34) entrada -> . READLINE PAR_I PAR_D

    VAR             shift and go to state 8
    VAL             shift and go to state 9
    PRINTLN         shift and go to state 10
    PRINT           shift and go to state 11
    READLINE        shift and go to state 12

    contenido                      shift and go to state 62
    asignacion                     shift and go to state 4
    impresion                      shift and go to state 5
    entrada                        shift and go to state 6

state 62

    (29) funcion -> DEF VARIABLE PAR_I parametro PAR_D IGUAL LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 63


state 63

    (29) funcion -> DEF VARIABLE PAR_I parametro PAR_D IGUAL LLAVE_I contenido LLAVE_D .

    $end            reduce using rule 29 (funcion -> DEF VARIABLE PAR_I parametro PAR_D IGUAL LLAVE_I contenido LLAVE_D .)

