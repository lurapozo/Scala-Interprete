Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    ARROBA
    BACKTICK
    CASE
    CATCH
    CLASS
    CORCHETE_D
    CORCHETE_I
    DIFERENTE
    DIVISION
    DO
    ELSE
    EXTENDS
    FINAL
    FINALLY
    FOR
    FOR_SOME
    FUNCION_FLECHA
    HASHTAG
    IF
    IGUAL_COMPARACION
    IMPLICIT
    IMPORT
    ITERATOR
    LAZY
    LIBRERIA_IO
    MACRO
    MAS
    MATCH
    MAYOR
    MAYOR_IGUAL
    MENOR
    MENOR_IGUAL
    MENOS
    MOD
    MULTIPLICACION
    NEW
    NOT
    NULL
    OBJECT
    OR
    OVERRIDE
    PACKAGE
    PRIVATE
    PROTECTED
    PUNTO
    RETURN
    REVERSE
    SEALED
    SUBGUION
    SUPER
    THIS
    THROW
    TO_DOUBLE
    TO_FLOAT
    TO_INT
    TO_LONG
    TRAIT
    TRY
    TYPE
    WHILE
    WITH
    YIELD

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> contenido
Rule 2     cuerpo -> funcion
Rule 3     contenido -> asignacion
Rule 4     contenido -> impresion
Rule 5     contenido -> entrada
Rule 6     asignacion -> VAR VARIABLE IGUAL valor
Rule 7     asignacion -> VAL VARIABLE IGUAL valor
Rule 8     asignacion -> VAL VARIABLE DOBLE_PUNTO tipo IGUAL valor
Rule 9     asignacion -> VAR VARIABLE DOBLE_PUNTO tipo IGUAL valor
Rule 10    tipo -> INTCLASS
Rule 11    tipo -> LONGCLASS
Rule 12    tipo -> DOUBLECLASS
Rule 13    tipo -> FLOATCLASS
Rule 14    tipo -> CHARCLASS
Rule 15    tipo -> STRINGCLASS
Rule 16    tipo -> LISTCLASS
Rule 17    tipo -> ARRAYCLASS
Rule 18    tipo -> BOOLCLASS
Rule 19    valor -> INT
Rule 20    valor -> LONG
Rule 21    valor -> FLOAT
Rule 22    valor -> DOUBLE
Rule 23    valor -> STRING
Rule 24    valor -> CHAR
Rule 25    valor -> VARIABLE
Rule 26    valor -> TRUE
Rule 27    valor -> FLASE
Rule 28    funcion -> DEF VARIABLE PAR_I parametro PAR_D IGUAL LLAVE_I contenido LLAVE_D
Rule 29    parametro -> VARIABLE
Rule 30    parametro -> VARIABLE COMA parametro
Rule 31    impresion -> PRINTLN PAR_I valor PAR_D
Rule 32    impresion -> PRINT PAR_I valor PAR_D
Rule 33    entrada -> READLINE PAR_I PAR_D

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
ARRAYCLASS           : 17
ARROBA               : 
BACKTICK             : 
BOOLCLASS            : 18
CASE                 : 
CATCH                : 
CHAR                 : 24
CHARCLASS            : 14
CLASS                : 
COMA                 : 30
CORCHETE_D           : 
CORCHETE_I           : 
DEF                  : 28
DIFERENTE            : 
DIVISION             : 
DO                   : 
DOBLE_PUNTO          : 8 9
DOUBLE               : 22
DOUBLECLASS          : 12
ELSE                 : 
EXTENDS              : 
FINAL                : 
FINALLY              : 
FLASE                : 27
FLOAT                : 21
FLOATCLASS           : 13
FOR                  : 
FOR_SOME             : 
FUNCION_FLECHA       : 
HASHTAG              : 
IF                   : 
IGUAL                : 6 7 8 9 28
IGUAL_COMPARACION    : 
IMPLICIT             : 
IMPORT               : 
INT                  : 19
INTCLASS             : 10
ITERATOR             : 
LAZY                 : 
LIBRERIA_IO          : 
LISTCLASS            : 16
LLAVE_D              : 28
LLAVE_I              : 28
LONG                 : 20
LONGCLASS            : 11
MACRO                : 
MAS                  : 
MATCH                : 
MAYOR                : 
MAYOR_IGUAL          : 
MENOR                : 
MENOR_IGUAL          : 
MENOS                : 
MOD                  : 
MULTIPLICACION       : 
NEW                  : 
NOT                  : 
NULL                 : 
OBJECT               : 
OR                   : 
OVERRIDE             : 
PACKAGE              : 
PAR_D                : 28 31 32 33
PAR_I                : 28 31 32 33
PRINT                : 32
PRINTLN              : 31
PRIVATE              : 
PROTECTED            : 
PUNTO                : 
READLINE             : 33
RETURN               : 
REVERSE              : 
SEALED               : 
STRING               : 23
STRINGCLASS          : 15
SUBGUION             : 
SUPER                : 
THIS                 : 
THROW                : 
TO_DOUBLE            : 
TO_FLOAT             : 
TO_INT               : 
TO_LONG              : 
TRAIT                : 
TRUE                 : 26
TRY                  : 
TYPE                 : 
VAL                  : 7 8
VAR                  : 6 9
VARIABLE             : 6 7 8 9 25 28 29 30
WHILE                : 
WITH                 : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

asignacion           : 3
contenido            : 1 28
cuerpo               : 0
entrada              : 5
funcion              : 2
impresion            : 4
parametro            : 28 30
tipo                 : 8 9
valor                : 6 7 8 9 31 32

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . contenido
    (2) cuerpo -> . funcion
    (3) contenido -> . asignacion
    (4) contenido -> . impresion
    (5) contenido -> . entrada
    (28) funcion -> . DEF VARIABLE PAR_I parametro PAR_D IGUAL LLAVE_I contenido LLAVE_D
    (6) asignacion -> . VAR VARIABLE IGUAL valor
    (7) asignacion -> . VAL VARIABLE IGUAL valor
    (8) asignacion -> . VAL VARIABLE DOBLE_PUNTO tipo IGUAL valor
    (9) asignacion -> . VAR VARIABLE DOBLE_PUNTO tipo IGUAL valor
    (31) impresion -> . PRINTLN PAR_I valor PAR_D
    (32) impresion -> . PRINT PAR_I valor PAR_D
    (33) entrada -> . READLINE PAR_I PAR_D

    DEF             shift and go to state 7
    VAR             shift and go to state 8
    VAL             shift and go to state 9
    PRINTLN         shift and go to state 10
    PRINT           shift and go to state 11
    READLINE        shift and go to state 12

    cuerpo                         shift and go to state 1
    contenido                      shift and go to state 2
    funcion                        shift and go to state 3
    asignacion                     shift and go to state 4
    impresion                      shift and go to state 5
    entrada                        shift and go to state 6

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> contenido .

    $end            reduce using rule 1 (cuerpo -> contenido .)


state 3

    (2) cuerpo -> funcion .

    $end            reduce using rule 2 (cuerpo -> funcion .)


state 4

    (3) contenido -> asignacion .

    $end            reduce using rule 3 (contenido -> asignacion .)
    LLAVE_D         reduce using rule 3 (contenido -> asignacion .)


state 5

    (4) contenido -> impresion .

    $end            reduce using rule 4 (contenido -> impresion .)
    LLAVE_D         reduce using rule 4 (contenido -> impresion .)


state 6

    (5) contenido -> entrada .

    $end            reduce using rule 5 (contenido -> entrada .)
    LLAVE_D         reduce using rule 5 (contenido -> entrada .)


state 7

    (28) funcion -> DEF . VARIABLE PAR_I parametro PAR_D IGUAL LLAVE_I contenido LLAVE_D

    VARIABLE        shift and go to state 13


state 8

    (6) asignacion -> VAR . VARIABLE IGUAL valor
    (9) asignacion -> VAR . VARIABLE DOBLE_PUNTO tipo IGUAL valor

    VARIABLE        shift and go to state 14


state 9

    (7) asignacion -> VAL . VARIABLE IGUAL valor
    (8) asignacion -> VAL . VARIABLE DOBLE_PUNTO tipo IGUAL valor

    VARIABLE        shift and go to state 15


state 10

    (31) impresion -> PRINTLN . PAR_I valor PAR_D

    PAR_I           shift and go to state 16


state 11

    (32) impresion -> PRINT . PAR_I valor PAR_D

    PAR_I           shift and go to state 17


state 12

    (33) entrada -> READLINE . PAR_I PAR_D

    PAR_I           shift and go to state 18


state 13

    (28) funcion -> DEF VARIABLE . PAR_I parametro PAR_D IGUAL LLAVE_I contenido LLAVE_D

    PAR_I           shift and go to state 19


state 14

    (6) asignacion -> VAR VARIABLE . IGUAL valor
    (9) asignacion -> VAR VARIABLE . DOBLE_PUNTO tipo IGUAL valor

    IGUAL           shift and go to state 20
    DOBLE_PUNTO     shift and go to state 21


state 15

    (7) asignacion -> VAL VARIABLE . IGUAL valor
    (8) asignacion -> VAL VARIABLE . DOBLE_PUNTO tipo IGUAL valor

    IGUAL           shift and go to state 22
    DOBLE_PUNTO     shift and go to state 23


state 16

    (31) impresion -> PRINTLN PAR_I . valor PAR_D
    (19) valor -> . INT
    (20) valor -> . LONG
    (21) valor -> . FLOAT
    (22) valor -> . DOUBLE
    (23) valor -> . STRING
    (24) valor -> . CHAR
    (25) valor -> . VARIABLE
    (26) valor -> . TRUE
    (27) valor -> . FLASE

    INT             shift and go to state 25
    LONG            shift and go to state 26
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 28
    STRING          shift and go to state 29
    CHAR            shift and go to state 30
    VARIABLE        shift and go to state 31
    TRUE            shift and go to state 32
    FLASE           shift and go to state 33

    valor                          shift and go to state 24

state 17

    (32) impresion -> PRINT PAR_I . valor PAR_D
    (19) valor -> . INT
    (20) valor -> . LONG
    (21) valor -> . FLOAT
    (22) valor -> . DOUBLE
    (23) valor -> . STRING
    (24) valor -> . CHAR
    (25) valor -> . VARIABLE
    (26) valor -> . TRUE
    (27) valor -> . FLASE

    INT             shift and go to state 25
    LONG            shift and go to state 26
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 28
    STRING          shift and go to state 29
    CHAR            shift and go to state 30
    VARIABLE        shift and go to state 31
    TRUE            shift and go to state 32
    FLASE           shift and go to state 33

    valor                          shift and go to state 34

state 18

    (33) entrada -> READLINE PAR_I . PAR_D

    PAR_D           shift and go to state 35


state 19

    (28) funcion -> DEF VARIABLE PAR_I . parametro PAR_D IGUAL LLAVE_I contenido LLAVE_D
    (29) parametro -> . VARIABLE
    (30) parametro -> . VARIABLE COMA parametro

    VARIABLE        shift and go to state 36

    parametro                      shift and go to state 37

state 20

    (6) asignacion -> VAR VARIABLE IGUAL . valor
    (19) valor -> . INT
    (20) valor -> . LONG
    (21) valor -> . FLOAT
    (22) valor -> . DOUBLE
    (23) valor -> . STRING
    (24) valor -> . CHAR
    (25) valor -> . VARIABLE
    (26) valor -> . TRUE
    (27) valor -> . FLASE

    INT             shift and go to state 25
    LONG            shift and go to state 26
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 28
    STRING          shift and go to state 29
    CHAR            shift and go to state 30
    VARIABLE        shift and go to state 31
    TRUE            shift and go to state 32
    FLASE           shift and go to state 33

    valor                          shift and go to state 38

state 21

    (9) asignacion -> VAR VARIABLE DOBLE_PUNTO . tipo IGUAL valor
    (10) tipo -> . INTCLASS
    (11) tipo -> . LONGCLASS
    (12) tipo -> . DOUBLECLASS
    (13) tipo -> . FLOATCLASS
    (14) tipo -> . CHARCLASS
    (15) tipo -> . STRINGCLASS
    (16) tipo -> . LISTCLASS
    (17) tipo -> . ARRAYCLASS
    (18) tipo -> . BOOLCLASS

    INTCLASS        shift and go to state 40
    LONGCLASS       shift and go to state 41
    DOUBLECLASS     shift and go to state 42
    FLOATCLASS      shift and go to state 43
    CHARCLASS       shift and go to state 44
    STRINGCLASS     shift and go to state 45
    LISTCLASS       shift and go to state 46
    ARRAYCLASS      shift and go to state 47
    BOOLCLASS       shift and go to state 48

    tipo                           shift and go to state 39

state 22

    (7) asignacion -> VAL VARIABLE IGUAL . valor
    (19) valor -> . INT
    (20) valor -> . LONG
    (21) valor -> . FLOAT
    (22) valor -> . DOUBLE
    (23) valor -> . STRING
    (24) valor -> . CHAR
    (25) valor -> . VARIABLE
    (26) valor -> . TRUE
    (27) valor -> . FLASE

    INT             shift and go to state 25
    LONG            shift and go to state 26
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 28
    STRING          shift and go to state 29
    CHAR            shift and go to state 30
    VARIABLE        shift and go to state 31
    TRUE            shift and go to state 32
    FLASE           shift and go to state 33

    valor                          shift and go to state 49

state 23

    (8) asignacion -> VAL VARIABLE DOBLE_PUNTO . tipo IGUAL valor
    (10) tipo -> . INTCLASS
    (11) tipo -> . LONGCLASS
    (12) tipo -> . DOUBLECLASS
    (13) tipo -> . FLOATCLASS
    (14) tipo -> . CHARCLASS
    (15) tipo -> . STRINGCLASS
    (16) tipo -> . LISTCLASS
    (17) tipo -> . ARRAYCLASS
    (18) tipo -> . BOOLCLASS

    INTCLASS        shift and go to state 40
    LONGCLASS       shift and go to state 41
    DOUBLECLASS     shift and go to state 42
    FLOATCLASS      shift and go to state 43
    CHARCLASS       shift and go to state 44
    STRINGCLASS     shift and go to state 45
    LISTCLASS       shift and go to state 46
    ARRAYCLASS      shift and go to state 47
    BOOLCLASS       shift and go to state 48

    tipo                           shift and go to state 50

state 24

    (31) impresion -> PRINTLN PAR_I valor . PAR_D

    PAR_D           shift and go to state 51


state 25

    (19) valor -> INT .

    PAR_D           reduce using rule 19 (valor -> INT .)
    $end            reduce using rule 19 (valor -> INT .)
    LLAVE_D         reduce using rule 19 (valor -> INT .)


state 26

    (20) valor -> LONG .

    PAR_D           reduce using rule 20 (valor -> LONG .)
    $end            reduce using rule 20 (valor -> LONG .)
    LLAVE_D         reduce using rule 20 (valor -> LONG .)


state 27

    (21) valor -> FLOAT .

    PAR_D           reduce using rule 21 (valor -> FLOAT .)
    $end            reduce using rule 21 (valor -> FLOAT .)
    LLAVE_D         reduce using rule 21 (valor -> FLOAT .)


state 28

    (22) valor -> DOUBLE .

    PAR_D           reduce using rule 22 (valor -> DOUBLE .)
    $end            reduce using rule 22 (valor -> DOUBLE .)
    LLAVE_D         reduce using rule 22 (valor -> DOUBLE .)


state 29

    (23) valor -> STRING .

    PAR_D           reduce using rule 23 (valor -> STRING .)
    $end            reduce using rule 23 (valor -> STRING .)
    LLAVE_D         reduce using rule 23 (valor -> STRING .)


state 30

    (24) valor -> CHAR .

    PAR_D           reduce using rule 24 (valor -> CHAR .)
    $end            reduce using rule 24 (valor -> CHAR .)
    LLAVE_D         reduce using rule 24 (valor -> CHAR .)


state 31

    (25) valor -> VARIABLE .

    PAR_D           reduce using rule 25 (valor -> VARIABLE .)
    $end            reduce using rule 25 (valor -> VARIABLE .)
    LLAVE_D         reduce using rule 25 (valor -> VARIABLE .)


state 32

    (26) valor -> TRUE .

    PAR_D           reduce using rule 26 (valor -> TRUE .)
    $end            reduce using rule 26 (valor -> TRUE .)
    LLAVE_D         reduce using rule 26 (valor -> TRUE .)


state 33

    (27) valor -> FLASE .

    PAR_D           reduce using rule 27 (valor -> FLASE .)
    $end            reduce using rule 27 (valor -> FLASE .)
    LLAVE_D         reduce using rule 27 (valor -> FLASE .)


state 34

    (32) impresion -> PRINT PAR_I valor . PAR_D

    PAR_D           shift and go to state 52


state 35

    (33) entrada -> READLINE PAR_I PAR_D .

    $end            reduce using rule 33 (entrada -> READLINE PAR_I PAR_D .)
    LLAVE_D         reduce using rule 33 (entrada -> READLINE PAR_I PAR_D .)


state 36

    (29) parametro -> VARIABLE .
    (30) parametro -> VARIABLE . COMA parametro

    PAR_D           reduce using rule 29 (parametro -> VARIABLE .)
    COMA            shift and go to state 53


state 37

    (28) funcion -> DEF VARIABLE PAR_I parametro . PAR_D IGUAL LLAVE_I contenido LLAVE_D

    PAR_D           shift and go to state 54


state 38

    (6) asignacion -> VAR VARIABLE IGUAL valor .

    $end            reduce using rule 6 (asignacion -> VAR VARIABLE IGUAL valor .)
    LLAVE_D         reduce using rule 6 (asignacion -> VAR VARIABLE IGUAL valor .)


state 39

    (9) asignacion -> VAR VARIABLE DOBLE_PUNTO tipo . IGUAL valor

    IGUAL           shift and go to state 55


state 40

    (10) tipo -> INTCLASS .

    IGUAL           reduce using rule 10 (tipo -> INTCLASS .)


state 41

    (11) tipo -> LONGCLASS .

    IGUAL           reduce using rule 11 (tipo -> LONGCLASS .)


state 42

    (12) tipo -> DOUBLECLASS .

    IGUAL           reduce using rule 12 (tipo -> DOUBLECLASS .)


state 43

    (13) tipo -> FLOATCLASS .

    IGUAL           reduce using rule 13 (tipo -> FLOATCLASS .)


state 44

    (14) tipo -> CHARCLASS .

    IGUAL           reduce using rule 14 (tipo -> CHARCLASS .)


state 45

    (15) tipo -> STRINGCLASS .

    IGUAL           reduce using rule 15 (tipo -> STRINGCLASS .)


state 46

    (16) tipo -> LISTCLASS .

    IGUAL           reduce using rule 16 (tipo -> LISTCLASS .)


state 47

    (17) tipo -> ARRAYCLASS .

    IGUAL           reduce using rule 17 (tipo -> ARRAYCLASS .)


state 48

    (18) tipo -> BOOLCLASS .

    IGUAL           reduce using rule 18 (tipo -> BOOLCLASS .)


state 49

    (7) asignacion -> VAL VARIABLE IGUAL valor .

    $end            reduce using rule 7 (asignacion -> VAL VARIABLE IGUAL valor .)
    LLAVE_D         reduce using rule 7 (asignacion -> VAL VARIABLE IGUAL valor .)


state 50

    (8) asignacion -> VAL VARIABLE DOBLE_PUNTO tipo . IGUAL valor

    IGUAL           shift and go to state 56


state 51

    (31) impresion -> PRINTLN PAR_I valor PAR_D .

    $end            reduce using rule 31 (impresion -> PRINTLN PAR_I valor PAR_D .)
    LLAVE_D         reduce using rule 31 (impresion -> PRINTLN PAR_I valor PAR_D .)


state 52

    (32) impresion -> PRINT PAR_I valor PAR_D .

    $end            reduce using rule 32 (impresion -> PRINT PAR_I valor PAR_D .)
    LLAVE_D         reduce using rule 32 (impresion -> PRINT PAR_I valor PAR_D .)


state 53

    (30) parametro -> VARIABLE COMA . parametro
    (29) parametro -> . VARIABLE
    (30) parametro -> . VARIABLE COMA parametro

    VARIABLE        shift and go to state 36

    parametro                      shift and go to state 57

state 54

    (28) funcion -> DEF VARIABLE PAR_I parametro PAR_D . IGUAL LLAVE_I contenido LLAVE_D

    IGUAL           shift and go to state 58


state 55

    (9) asignacion -> VAR VARIABLE DOBLE_PUNTO tipo IGUAL . valor
    (19) valor -> . INT
    (20) valor -> . LONG
    (21) valor -> . FLOAT
    (22) valor -> . DOUBLE
    (23) valor -> . STRING
    (24) valor -> . CHAR
    (25) valor -> . VARIABLE
    (26) valor -> . TRUE
    (27) valor -> . FLASE

    INT             shift and go to state 25
    LONG            shift and go to state 26
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 28
    STRING          shift and go to state 29
    CHAR            shift and go to state 30
    VARIABLE        shift and go to state 31
    TRUE            shift and go to state 32
    FLASE           shift and go to state 33

    valor                          shift and go to state 59

state 56

    (8) asignacion -> VAL VARIABLE DOBLE_PUNTO tipo IGUAL . valor
    (19) valor -> . INT
    (20) valor -> . LONG
    (21) valor -> . FLOAT
    (22) valor -> . DOUBLE
    (23) valor -> . STRING
    (24) valor -> . CHAR
    (25) valor -> . VARIABLE
    (26) valor -> . TRUE
    (27) valor -> . FLASE

    INT             shift and go to state 25
    LONG            shift and go to state 26
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 28
    STRING          shift and go to state 29
    CHAR            shift and go to state 30
    VARIABLE        shift and go to state 31
    TRUE            shift and go to state 32
    FLASE           shift and go to state 33

    valor                          shift and go to state 60

state 57

    (30) parametro -> VARIABLE COMA parametro .

    PAR_D           reduce using rule 30 (parametro -> VARIABLE COMA parametro .)


state 58

    (28) funcion -> DEF VARIABLE PAR_I parametro PAR_D IGUAL . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 61


state 59

    (9) asignacion -> VAR VARIABLE DOBLE_PUNTO tipo IGUAL valor .

    $end            reduce using rule 9 (asignacion -> VAR VARIABLE DOBLE_PUNTO tipo IGUAL valor .)
    LLAVE_D         reduce using rule 9 (asignacion -> VAR VARIABLE DOBLE_PUNTO tipo IGUAL valor .)


state 60

    (8) asignacion -> VAL VARIABLE DOBLE_PUNTO tipo IGUAL valor .

    $end            reduce using rule 8 (asignacion -> VAL VARIABLE DOBLE_PUNTO tipo IGUAL valor .)
    LLAVE_D         reduce using rule 8 (asignacion -> VAL VARIABLE DOBLE_PUNTO tipo IGUAL valor .)


state 61

    (28) funcion -> DEF VARIABLE PAR_I parametro PAR_D IGUAL LLAVE_I . contenido LLAVE_D
    (3) contenido -> . asignacion
    (4) contenido -> . impresion
    (5) contenido -> . entrada
    (6) asignacion -> . VAR VARIABLE IGUAL valor
    (7) asignacion -> . VAL VARIABLE IGUAL valor
    (8) asignacion -> . VAL VARIABLE DOBLE_PUNTO tipo IGUAL valor
    (9) asignacion -> . VAR VARIABLE DOBLE_PUNTO tipo IGUAL valor
    (31) impresion -> . PRINTLN PAR_I valor PAR_D
    (32) impresion -> . PRINT PAR_I valor PAR_D
    (33) entrada -> . READLINE PAR_I PAR_D

    VAR             shift and go to state 8
    VAL             shift and go to state 9
    PRINTLN         shift and go to state 10
    PRINT           shift and go to state 11
    READLINE        shift and go to state 12

    contenido                      shift and go to state 62
    asignacion                     shift and go to state 4
    impresion                      shift and go to state 5
    entrada                        shift and go to state 6

state 62

    (28) funcion -> DEF VARIABLE PAR_I parametro PAR_D IGUAL LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 63


state 63

    (28) funcion -> DEF VARIABLE PAR_I parametro PAR_D IGUAL LLAVE_I contenido LLAVE_D .

    $end            reduce using rule 28 (funcion -> DEF VARIABLE PAR_I parametro PAR_D IGUAL LLAVE_I contenido LLAVE_D .)

