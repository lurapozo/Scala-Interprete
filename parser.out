Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ARROBA
    BACKTICK
    CATCH
    CLASS
    DO
    EXTENDS
    FINAL
    FINALLY
    FOR_SOME
    HASHTAG
    IMPLICIT
    LAZY
    LIBRERIA_IO
    MACRO
    MAYOR_IGUAL
    MENOR_IGUAL
    NULL
    OVERRIDE
    PACKAGE
    PRIVATE
    PROTECTED
    REVERSE
    SEALED
    SUPER
    THIS
    THROW
    TRAIT
    TRY
    TYPE
    WITH
    YIELD

Grammar

Rule 0     S' -> inicio
Rule 1     inicio -> OBJECT VARIABLE LLAVE_I cuerpo LLAVE_D
Rule 2     inicio -> IMPORT io inicio
Rule 3     inicio -> cuerpo
Rule 4     io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE
Rule 5     cuerpo -> funcion
Rule 6     cuerpo -> funcall
Rule 7     cuerpo -> impresion
Rule 8     cuerpo -> entrada
Rule 9     cuerpo -> asignacion
Rule 10    cuerpo -> while
Rule 11    cuerpo -> for
Rule 12    cuerpo -> match
Rule 13    cuerpo -> if
Rule 14    cuerpo -> funcion cuerpo
Rule 15    cuerpo -> asignacion cuerpo
Rule 16    cuerpo -> while cuerpo
Rule 17    cuerpo -> for cuerpo
Rule 18    cuerpo -> if cuerpo
Rule 19    cuerpo -> match cuerpo
Rule 20    contenido -> asignacion
Rule 21    contenido -> reasignacion
Rule 22    contenido -> funcall
Rule 23    contenido -> impresion
Rule 24    contenido -> entrada
Rule 25    contenido -> while
Rule 26    contenido -> for
Rule 27    contenido -> match
Rule 28    contenido -> if
Rule 29    contenido -> aritmetica
Rule 30    contenido -> asignacion contenido
Rule 31    contenido -> reasignacion contenido
Rule 32    contenido -> funcall contenido
Rule 33    contenido -> impresion contenido
Rule 34    contenido -> entrada contenido
Rule 35    contenido -> while contenido
Rule 36    contenido -> for contenido
Rule 37    contenido -> if contenido
Rule 38    contenido -> match contenido
Rule 39    contenido -> aritmetica contenido
Rule 40    contenidoLine -> asignacion
Rule 41    contenidoLine -> reasignacion
Rule 42    contenidoLine -> funcall
Rule 43    contenidoLine -> impresion
Rule 44    contenidoLine -> entrada
Rule 45    asignacion -> VAR VARIABLE IGUAL VARIABLE
Rule 46    asignacion -> VAL VARIABLE IGUAL VARIABLE
Rule 47    asignacion -> VAR VARIABLE IGUAL aritmetica
Rule 48    asignacion -> VAL VARIABLE IGUAL aritmetica
Rule 49    asignacion -> VAR VARIABLE IGUAL returnfun
Rule 50    asignacion -> VAL VARIABLE IGUAL returnfun
Rule 51    asignacion -> asignacionLong
Rule 52    asignacion -> asignacionInt
Rule 53    asignacion -> asignacionFloat
Rule 54    asignacion -> asignacionDouble
Rule 55    asignacion -> asignacionString
Rule 56    asignacion -> asignacionChar
Rule 57    asignacion -> asignacionBoolean
Rule 58    asignacion -> array
Rule 59    asignacion -> list
Rule 60    asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
Rule 61    asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
Rule 62    asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
Rule 63    asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
Rule 64    asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
Rule 65    asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
Rule 66    asignacionString -> VAR VARIABLE IGUAL STRING
Rule 67    asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
Rule 68    asignacionString -> VAL VARIABLE IGUAL STRING
Rule 69    asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
Rule 70    asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
Rule 71    asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
Rule 72    asignacionChar -> VAR VARIABLE IGUAL CHAR
Rule 73    asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
Rule 74    asignacionChar -> VAL VARIABLE IGUAL CHAR
Rule 75    asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
Rule 76    asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
Rule 77    asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
Rule 78    asignacionBoolean -> VAR VARIABLE IGUAL booleanos
Rule 79    asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
Rule 80    asignacionBoolean -> VAL VARIABLE IGUAL booleanos
Rule 81    asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
Rule 82    asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
Rule 83    asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
Rule 84    reasignacion -> VARIABLE IGUAL valor
Rule 85    reasignacion -> VARIABLE IGUAL returnfun
Rule 86    reasignacion -> VARIABLE IGUAL aritmetica
Rule 87    reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor
Rule 88    tipo -> CHARCLASS
Rule 89    tipo -> STRINGCLASS
Rule 90    tipo -> BOOLCLASS
Rule 91    tipo -> INTCLASS
Rule 92    tipo -> LONGCLASS
Rule 93    tipo -> DOUBLECLASS
Rule 94    tipo -> FLOATCLASS
Rule 95    tipo -> ARRAYCLASS CORCHETE_I tipo CORCHETE_D
Rule 96    tipo -> LISTCLASS CORCHETE_I tipo CORCHETE_D
Rule 97    valor -> STRING
Rule 98    valor -> CHAR
Rule 99    valor -> VARIABLE
Rule 100   valor -> numeros
Rule 101   valor -> booleanos
Rule 102   valor -> VARIABLE PAR_I VARIABLE PAR_D
Rule 103   valor -> VARIABLE PAR_I INT PAR_D
Rule 104   booleanos -> TRUE
Rule 105   booleanos -> FLASE
Rule 106   numeros -> INT
Rule 107   numeros -> LONG
Rule 108   numeros -> FLOAT
Rule 109   numeros -> DOUBLE
Rule 110   funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
Rule 111   funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
Rule 112   declaracion -> VARIABLE DOBLE_PUNTO tipo
Rule 113   declaracion -> VARIABLE DOBLE_PUNTO tipo IGUAL valor
Rule 114   parametro -> parametros
Rule 115   parametro -> PAR_I PAR_D
Rule 116   parametros -> PAR_I declaracion PAR_D
Rule 117   parametros -> PAR_I declaracion PAR_D parametros
Rule 118   funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
Rule 119   funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
Rule 120   funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
Rule 121   funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
Rule 122   funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
Rule 123   funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
Rule 124   funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
Rule 125   funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
Rule 126   funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
Rule 127   funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
Rule 128   funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
Rule 129   dectipo -> DOBLE_PUNTO tipo
Rule 130   dectipoTupla -> DOBLE_PUNTO PAR_I tipos PAR_D
Rule 131   tipos -> tipo
Rule 132   tipos -> tipo tiposentry
Rule 133   tiposentry -> COMA tipo
Rule 134   tiposentry -> COMA tipo tiposentry
Rule 135   impresion -> PRINTLN PAR_I valorI PAR_D
Rule 136   impresion -> PRINT PAR_I valorI PAR_D
Rule 137   valorI -> valor MAS valorI
Rule 138   valorI -> valor
Rule 139   entrada -> READLINE PAR_I PAR_D
Rule 140   funcall -> VARIABLE varparen
Rule 141   varparen -> PAR_I valores PAR_D
Rule 142   varparen -> PAR_I PAR_D
Rule 143   varparen -> varparen PAR_I valores PAR_D
Rule 144   varparen -> varparen PAR_I PAR_D
Rule 145   returnfun -> returnCastable
Rule 146   returnfun -> castingcall
Rule 147   returnCastable -> entrada
Rule 148   returnCastable -> funcall
Rule 149   castingcall -> returnCastable PUNTO castingfun
Rule 150   castingcall -> VARIABLE PUNTO castingfun
Rule 151   castingfun -> TO_INT
Rule 152   castingfun -> TO_DOUBLE
Rule 153   castingfun -> TO_FLOAT
Rule 154   castingfun -> TO_LONG
Rule 155   array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
Rule 156   array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
Rule 157   array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
Rule 158   array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
Rule 159   array -> arrayInt
Rule 160   array -> arrayDouble
Rule 161   list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
Rule 162   list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
Rule 163   list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
Rule 164   valores -> valor
Rule 165   valores -> valor COMA valores
Rule 166   tuple -> PAR_I valores PAR_D
Rule 167   asignacion -> VAR VARIABLE IGUAL tuple
Rule 168   asignacion -> VAL VARIABLE IGUAL tuple
Rule 169   while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
Rule 170   for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
Rule 171   for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
Rule 172   for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
Rule 173   for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
Rule 174   for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
Rule 175   for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
Rule 176   match -> VARIABLE MATCH LLAVE_I cases LLAVE_D
Rule 177   cases -> casesInt
Rule 178   cases -> casesLgn
Rule 179   cases -> casesFlt
Rule 180   cases -> casesDob
Rule 181   cases -> casesStr
Rule 182   cases -> casesChar
Rule 183   cases -> casesBool
Rule 184   caseInt -> CASE INT FUNCION_FLECHA codeBlock
Rule 185   casesInt -> caseInt
Rule 186   casesInt -> caseInt casesInt
Rule 187   casesInt -> caseInt defcase
Rule 188   caseLgn -> CASE LONG FUNCION_FLECHA codeBlock
Rule 189   casesLgn -> caseLgn
Rule 190   casesLgn -> caseLgn casesLgn
Rule 191   casesLgn -> caseLgn defcase
Rule 192   caseFlt -> CASE FLOAT FUNCION_FLECHA codeBlock
Rule 193   casesFlt -> caseFlt
Rule 194   casesFlt -> caseFlt casesFlt
Rule 195   casesFlt -> caseFlt defcase
Rule 196   caseDob -> CASE DOUBLE FUNCION_FLECHA codeBlock
Rule 197   casesDob -> caseDob
Rule 198   casesDob -> caseDob casesDob
Rule 199   casesDob -> caseDob defcase
Rule 200   caseStr -> CASE STRING FUNCION_FLECHA codeBlock
Rule 201   casesStr -> caseStr
Rule 202   casesStr -> caseStr casesStr
Rule 203   casesStr -> caseStr defcase
Rule 204   caseChar -> CASE CHAR FUNCION_FLECHA codeBlock
Rule 205   casesChar -> caseChar
Rule 206   casesChar -> caseChar casesChar
Rule 207   casesChar -> caseChar defcase
Rule 208   caseBool -> CASE booleanos FUNCION_FLECHA codeBlock
Rule 209   casesBool -> caseBool
Rule 210   casesBool -> caseBool casesBool
Rule 211   casesBool -> caseBool defcase
Rule 212   defcase -> CASE SUBGUION FUNCION_FLECHA codeBlock
Rule 213   codeBlock -> contenidoLine
Rule 214   codeBlock -> LLAVE_I contenido LLAVE_D
Rule 215   if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
Rule 216   if -> if elseif
Rule 217   if -> if else
Rule 218   elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
Rule 219   elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif
Rule 220   else -> ELSE LLAVE_I contenido LLAVE_D
Rule 221   else -> elseif else
Rule 222   condicional -> valorC logicos condicional
Rule 223   condicional -> valorC
Rule 224   valorC -> VARIABLE
Rule 225   valorC -> booleanos
Rule 226   valorC -> relacional
Rule 227   valorC -> NOT VARIABLE
Rule 228   valorC -> NOT booleanos
Rule 229   valorC -> NOT relacional
Rule 230   logicos -> AND
Rule 231   logicos -> OR
Rule 232   logicos -> NOT
Rule 233   relacional -> numeros comparacion numeros
Rule 234   relacional -> aritmetica comparacion aritmetica
Rule 235   relacional -> aritmetica comparacion numeros
Rule 236   relacional -> numeros comparacion aritmetica
Rule 237   relacional -> booleanos comparacion booleanos
Rule 238   relacional -> STRING comparacion STRING
Rule 239   relacional -> CHAR comparacion CHAR
Rule 240   relacional -> VARIABLE comparacion numeros
Rule 241   relacional -> numeros comparacion VARIABLE
Rule 242   relacional -> VARIABLE comparacion booleanos
Rule 243   relacional -> booleanos comparacion VARIABLE
Rule 244   relacional -> VARIABLE comparacion STRING
Rule 245   relacional -> STRING comparacion VARIABLE
Rule 246   relacional -> VARIABLE comparacion CHAR
Rule 247   relacional -> CHAR comparacion VARIABLE
Rule 248   relacional -> VARIABLE comparacion VARIABLE
Rule 249   comparacion -> IGUAL_COMPARACION
Rule 250   comparacion -> DIFERENTE
Rule 251   comparacion -> MAYOR
Rule 252   comparacion -> MENOR
Rule 253   aritmetica -> numeros aritmeticos numeros
Rule 254   aritmetica -> VARIABLE aritmeticos numeros
Rule 255   aritmetica -> numeros aritmeticos VARIABLE
Rule 256   aritmetica -> VARIABLE aritmeticos VARIABLE
Rule 257   aritmetica -> aritmetica aritmeticos numeros
Rule 258   aritmetica -> aritmetica aritmeticos VARIABLE
Rule 259   aritmeticos -> MENOS
Rule 260   aritmeticos -> MAS
Rule 261   aritmeticos -> MULTIPLICACION
Rule 262   aritmeticos -> DIVISION
Rule 263   aritmeticos -> MOD
Rule 264   arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
Rule 265   arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D
Rule 266   valoresInt -> INT
Rule 267   valoresInt -> valoresInt COMA INT
Rule 268   valoresDouble -> DOUBLE
Rule 269   valoresDouble -> valoresDouble COMA DOUBLE
Rule 270   asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla
Rule 271   asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla
Rule 272   dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D
Rule 273   dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D
Rule 274   dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D
Rule 275   dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D
Rule 276   dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D
Rule 277   dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D
Rule 278   dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D
Rule 279   dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D
Rule 280   dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D
Rule 281   dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D
Rule 282   dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D
Rule 283   dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D
Rule 284   dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D
Rule 285   dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D
Rule 286   dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D
Rule 287   dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D
Rule 288   dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D
Rule 289   dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D
Rule 290   dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D
Rule 291   dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D
Rule 292   asignacionInt -> VAR VARIABLE IGUAL intvalues
Rule 293   asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
Rule 294   asignacionInt -> VAL VARIABLE IGUAL intvalues
Rule 295   asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
Rule 296   intvalues -> INT
Rule 297   intvalues -> stringCastInt
Rule 298   asignacionLong -> VAR VARIABLE IGUAL longvalues
Rule 299   asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
Rule 300   asignacionLong -> VAL VARIABLE IGUAL longvalues
Rule 301   asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
Rule 302   longvalues -> INT
Rule 303   longvalues -> intvalues
Rule 304   longvalues -> stringCastLong
Rule 305   asignacionFloat -> VAR VARIABLE IGUAL floatvalues
Rule 306   asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
Rule 307   asignacionFloat -> VAL VARIABLE IGUAL floatvalues
Rule 308   asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
Rule 309   floatvalues -> FLOAT
Rule 310   floatvalues -> longvalues
Rule 311   floatvalues -> stringCastFloat
Rule 312   asignacionDouble -> VAR VARIABLE IGUAL doublevalues
Rule 313   asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
Rule 314   asignacionDouble -> VAL VARIABLE IGUAL doublevalues
Rule 315   asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
Rule 316   doublevalues -> DOUBLE
Rule 317   doublevalues -> floatvalues
Rule 318   doublevalues -> stringCastDouble
Rule 319   stringCastInt -> STRING PUNTO TO_INT
Rule 320   stringCastLong -> STRING PUNTO TO_LONG
Rule 321   stringCastFloat -> STRING PUNTO TO_FLOAT
Rule 322   stringCastDouble -> STRING PUNTO TO_DOUBLE

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 230
ARRAYCLASS           : 95 155 156 156 157 158 158 264 264 265 265
ARROBA               : 
BACKTICK             : 
BOOLCLASS            : 79 81 82 83 90
CASE                 : 184 188 192 196 200 204 208 212
CATCH                : 
CHAR                 : 72 73 74 75 98 204 239 239 246 247
CHARCLASS            : 73 75 76 77 88
CLASS                : 
COMA                 : 133 134 165 267 269 272 272 273 273 274 274 275 275 276 276 277 277 278 278 279 279 280 280 281 281 282 282 283 283 284 284 285 285 286 286 287 287 288 288 289 289 290 290 291 291
CORCHETE_D           : 95 96 156 156 158 158 162 163 264 265
CORCHETE_I           : 95 96 156 156 158 158 162 163 264 265
DEF                  : 110 111 118 119 120 121 122 123 124 125 126 127 128
DIFERENTE            : 250
DIVISION             : 262
DO                   : 
DOBLE_PUNTO          : 60 61 62 63 64 65 67 69 70 71 73 75 76 77 79 81 82 83 112 113 129 130 156 158 162 163 264 265 270 271 293 295 299 301 306 308 313 315
DOUBLE               : 109 196 268 269 274 278 280 281 282 283 286 290 316
DOUBLECLASS          : 64 65 93 265 274 278 280 281 282 283 286 290 313 315
ELSE                 : 218 219 220
EXTENDS              : 
FINAL                : 
FINALLY              : 
FLASE                : 105
FLOAT                : 108 192 275 276 277 278 279 282 287 291 309
FLOATCLASS           : 62 63 94 275 276 277 278 279 282 287 291 306 308
FOR                  : 170 171 172 173 174 175
FOR_SOME             : 
FUNCION_FLECHA       : 184 188 192 196 200 204 208 212
HASHTAG              : 
IF                   : 215 218 219
IGUAL                : 45 46 47 48 49 50 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 110 113 118 119 120 121 122 123 124 125 126 127 128 155 156 157 158 161 162 163 167 168 264 265 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 298 299 300 301 305 306 307 308 312 313 314 315
IGUAL_COMPARACION    : 249
IMPLICIT             : 
IMPORT               : 2
INT                  : 87 103 106 156 158 172 172 173 173 174 174 175 175 184 266 267 272 279 283 285 288 289 290 291 296 302
INTCLASS             : 91 264 272 279 283 285 288 289 290 291 293 295
ITERATOR             : 170 171 172 173 174 175
LAZY                 : 
LIBRERIA_IO          : 
LISTCLASS            : 96 161 162 162 163 163
LLAVE_D              : 1 110 111 118 119 120 121 122 123 124 125 126 127 128 169 170 171 172 173 174 175 176 214 215 218 219 220
LLAVE_I              : 1 110 111 118 119 120 121 122 123 124 125 126 127 128 169 170 171 172 173 174 175 176 214 215 218 219 220
LONG                 : 107 188 273 277 281 284 285 286 287 289
LONGCLASS            : 60 61 92 273 277 281 284 285 286 287 289 299 301
MACRO                : 
MAS                  : 137 260
MATCH                : 176
MAYOR                : 251
MAYOR_IGUAL          : 
MENOR                : 252
MENOR_IGUAL          : 
MENOS                : 259
MOD                  : 263
MULTIPLICACION       : 261
NEW                  : 156 158 162
NOT                  : 227 228 229 232
NULL                 : 
OBJECT               : 1
OR                   : 231
OVERRIDE             : 
PACKAGE              : 
PAR_D                : 87 102 103 115 116 117 130 135 136 139 141 142 143 144 155 156 157 158 161 162 163 166 169 170 171 172 173 174 175 215 218 219 264 265 272 272 273 273 274 274 275 275 276 276 277 277 278 278 279 279 280 280 281 281 282 282 283 283 284 284 285 285 286 286 287 287 288 288 289 289 290 290 291 291
PAR_I                : 87 102 103 115 116 117 130 135 136 139 141 142 143 144 155 156 157 158 161 162 163 166 169 170 171 172 173 174 175 215 218 219 264 265 272 272 273 273 274 274 275 275 276 276 277 277 278 278 279 279 280 280 281 281 282 282 283 283 284 284 285 285 286 286 287 287 288 288 289 289 290 290 291 291
PRINT                : 136
PRINTLN              : 135
PRIVATE              : 
PROTECTED            : 
PUNTO                : 4 4 4 149 150 319 320 321 322
READLINE             : 4 139
RETURN               : 118 119 120 121 122 123 124 125 126 127 128
REVERSE              : 
SEALED               : 
STRING               : 66 67 68 69 97 200 238 238 244 245 272 273 274 275 276 280 284 288 319 320 321 322
STRINGCLASS          : 67 69 70 71 89 272 273 274 275 276 280 284 288
SUBGUION             : 212
SUPER                : 
THIS                 : 
THROW                : 
TO                   : 172 174
TO_DOUBLE            : 152 322
TO_FLOAT             : 153 321
TO_INT               : 151 319
TO_LONG              : 154 320
TRAIT                : 
TRUE                 : 104
TRY                  : 
TYPE                 : 
UNTIL                : 173 175
VAL                  : 46 48 50 61 63 65 68 69 71 74 75 77 80 81 83 157 158 161 162 163 168 271 294 295 300 301 307 308 314 315
VAR                  : 45 47 49 60 62 64 66 67 70 72 73 76 78 79 82 155 156 167 170 174 175 264 265 270 292 293 298 299 305 306 312 313
VARIABLE             : 1 4 4 4 45 45 46 46 47 48 49 50 60 60 61 61 62 62 63 63 64 64 65 65 66 67 68 69 70 70 71 71 72 73 74 75 76 76 77 77 78 79 80 81 82 82 83 83 84 85 86 87 99 102 102 103 110 111 112 113 118 119 119 120 121 122 123 123 124 125 126 127 127 128 140 150 155 156 157 158 161 162 163 167 168 170 170 171 171 172 173 174 175 176 224 227 240 241 242 243 244 245 246 247 248 248 254 255 256 256 258 264 265 270 271 292 293 294 295 298 299 300 301 305 306 307 308 312 313 314 315
WHILE                : 169
WITH                 : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

aritmetica           : 29 39 47 48 86 121 125 234 234 235 236 257 258
aritmeticos          : 253 254 255 256 257 258
array                : 58
arrayDouble          : 160
arrayInt             : 159
asignacion           : 9 15 20 30 40
asignacionBoolean    : 57
asignacionChar       : 56
asignacionDouble     : 54
asignacionFloat      : 53
asignacionInt        : 52
asignacionLong       : 51
asignacionString     : 55
booleanos            : 78 79 80 81 101 208 225 228 237 237 242 243
caseBool             : 209 210 211
caseChar             : 205 206 207
caseDob              : 197 198 199
caseFlt              : 193 194 195
caseInt              : 185 186 187
caseLgn              : 189 190 191
caseStr              : 201 202 203
cases                : 176
casesBool            : 183 210
casesChar            : 182 206
casesDob             : 180 198
casesFlt             : 179 194
casesInt             : 177 186
casesLgn             : 178 190
casesStr             : 181 202
castingcall          : 146
castingfun           : 149 150
codeBlock            : 184 188 192 196 200 204 208 212
comparacion          : 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248
condicional          : 169 215 218 219 222
contenido            : 30 31 32 33 34 35 36 37 38 39 110 111 118 119 120 121 126 127 128 169 170 171 172 173 174 175 214 215 218 219 220
contenidoLine        : 213
cuerpo               : 1 3 14 15 16 17 18 19
declaracion          : 116 117
dectipo              : 118 119 120 121 122 123 124 125
dectipoTupla         : 126 127 128
dectupla             : 270 271
defcase              : 187 191 195 199 203 207 211
doublevalues         : 312 313 314 315
else                 : 217 221
elseif               : 216 219 221
entrada              : 8 24 34 44 147
floatvalues          : 305 306 307 308 317
for                  : 11 17 26 36
funcall              : 6 22 32 42 148
funcion              : 5 14
if                   : 13 18 28 37 216 217
impresion            : 7 23 33 43
inicio               : 2 0
intvalues            : 292 293 294 295 303
io                   : 2
list                 : 59
logicos              : 222
longvalues           : 298 299 300 301 310
match                : 12 19 27 38
numeros              : 100 233 233 235 236 240 241 253 253 254 255 257
parametro            : 110 111 118 119 120 121 122 123 124 125 126 127 128
parametros           : 114 117
reasignacion         : 21 31 41
relacional           : 226 229
returnCastable       : 145 149
returnfun            : 49 50 85 120 124 128
stringCastDouble     : 318
stringCastFloat      : 311
stringCastInt        : 297
stringCastLong       : 304
tipo                 : 95 96 112 113 129 131 132 133 134 156 156 158 158 162 163
tipos                : 130
tiposentry           : 132 134
tuple                : 126 167 168
valor                : 84 87 113 118 122 137 138 164 165
valorC               : 222 223
valorI               : 135 136 137
valores              : 141 143 155 157 161 162 163 165 166
valoresDouble        : 265 269
valoresInt           : 264 267
varparen             : 140 143 144
while                : 10 16 25 35

Parsing method: LALR

state 0

    (0) S' -> . inicio
    (1) inicio -> . OBJECT VARIABLE LLAVE_I cuerpo LLAVE_D
    (2) inicio -> . IMPORT io inicio
    (3) inicio -> . cuerpo
    (5) cuerpo -> . funcion
    (6) cuerpo -> . funcall
    (7) cuerpo -> . impresion
    (8) cuerpo -> . entrada
    (9) cuerpo -> . asignacion
    (10) cuerpo -> . while
    (11) cuerpo -> . for
    (12) cuerpo -> . match
    (13) cuerpo -> . if
    (14) cuerpo -> . funcion cuerpo
    (15) cuerpo -> . asignacion cuerpo
    (16) cuerpo -> . while cuerpo
    (17) cuerpo -> . for cuerpo
    (18) cuerpo -> . if cuerpo
    (19) cuerpo -> . match cuerpo
    (110) funcion -> . DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (111) funcion -> . DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
    (118) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (119) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (120) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (121) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (122) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (123) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (124) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (125) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (126) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (127) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (128) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    OBJECT          shift and go to state 2
    IMPORT          shift and go to state 5
    DEF             shift and go to state 15
    VARIABLE        shift and go to state 3
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32

    inicio                         shift and go to state 1
    cuerpo                         shift and go to state 4
    funcion                        shift and go to state 6
    funcall                        shift and go to state 7
    impresion                      shift and go to state 8
    entrada                        shift and go to state 9
    asignacion                     shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    match                          shift and go to state 13
    if                             shift and go to state 14
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 1

    (0) S' -> inicio .



state 2

    (1) inicio -> OBJECT . VARIABLE LLAVE_I cuerpo LLAVE_D

    VARIABLE        shift and go to state 35


state 3

    (140) funcall -> VARIABLE . varparen
    (176) match -> VARIABLE . MATCH LLAVE_I cases LLAVE_D
    (141) varparen -> . PAR_I valores PAR_D
    (142) varparen -> . PAR_I PAR_D
    (143) varparen -> . varparen PAR_I valores PAR_D
    (144) varparen -> . varparen PAR_I PAR_D

    MATCH           shift and go to state 37
    PAR_I           shift and go to state 38

    varparen                       shift and go to state 36

state 4

    (3) inicio -> cuerpo .

    $end            reduce using rule 3 (inicio -> cuerpo .)


state 5

    (2) inicio -> IMPORT . io inicio
    (4) io -> . VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE

    VARIABLE        shift and go to state 40

    io                             shift and go to state 39

state 6

    (5) cuerpo -> funcion .
    (14) cuerpo -> funcion . cuerpo
    (5) cuerpo -> . funcion
    (6) cuerpo -> . funcall
    (7) cuerpo -> . impresion
    (8) cuerpo -> . entrada
    (9) cuerpo -> . asignacion
    (10) cuerpo -> . while
    (11) cuerpo -> . for
    (12) cuerpo -> . match
    (13) cuerpo -> . if
    (14) cuerpo -> . funcion cuerpo
    (15) cuerpo -> . asignacion cuerpo
    (16) cuerpo -> . while cuerpo
    (17) cuerpo -> . for cuerpo
    (18) cuerpo -> . if cuerpo
    (19) cuerpo -> . match cuerpo
    (110) funcion -> . DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (111) funcion -> . DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
    (118) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (119) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (120) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (121) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (122) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (123) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (124) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (125) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (126) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (127) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (128) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    $end            reduce using rule 5 (cuerpo -> funcion .)
    LLAVE_D         reduce using rule 5 (cuerpo -> funcion .)
    DEF             shift and go to state 15
    VARIABLE        shift and go to state 3
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32

    funcion                        shift and go to state 6
    cuerpo                         shift and go to state 41
    funcall                        shift and go to state 7
    impresion                      shift and go to state 8
    entrada                        shift and go to state 9
    asignacion                     shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    match                          shift and go to state 13
    if                             shift and go to state 14
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 7

    (6) cuerpo -> funcall .

    $end            reduce using rule 6 (cuerpo -> funcall .)
    LLAVE_D         reduce using rule 6 (cuerpo -> funcall .)


state 8

    (7) cuerpo -> impresion .

    $end            reduce using rule 7 (cuerpo -> impresion .)
    LLAVE_D         reduce using rule 7 (cuerpo -> impresion .)


state 9

    (8) cuerpo -> entrada .

    $end            reduce using rule 8 (cuerpo -> entrada .)
    LLAVE_D         reduce using rule 8 (cuerpo -> entrada .)


state 10

    (9) cuerpo -> asignacion .
    (15) cuerpo -> asignacion . cuerpo
    (5) cuerpo -> . funcion
    (6) cuerpo -> . funcall
    (7) cuerpo -> . impresion
    (8) cuerpo -> . entrada
    (9) cuerpo -> . asignacion
    (10) cuerpo -> . while
    (11) cuerpo -> . for
    (12) cuerpo -> . match
    (13) cuerpo -> . if
    (14) cuerpo -> . funcion cuerpo
    (15) cuerpo -> . asignacion cuerpo
    (16) cuerpo -> . while cuerpo
    (17) cuerpo -> . for cuerpo
    (18) cuerpo -> . if cuerpo
    (19) cuerpo -> . match cuerpo
    (110) funcion -> . DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (111) funcion -> . DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
    (118) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (119) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (120) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (121) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (122) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (123) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (124) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (125) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (126) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (127) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (128) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    $end            reduce using rule 9 (cuerpo -> asignacion .)
    LLAVE_D         reduce using rule 9 (cuerpo -> asignacion .)
    DEF             shift and go to state 15
    VARIABLE        shift and go to state 3
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32

    asignacion                     shift and go to state 10
    cuerpo                         shift and go to state 42
    funcion                        shift and go to state 6
    funcall                        shift and go to state 7
    impresion                      shift and go to state 8
    entrada                        shift and go to state 9
    while                          shift and go to state 11
    for                            shift and go to state 12
    match                          shift and go to state 13
    if                             shift and go to state 14
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 11

    (10) cuerpo -> while .
    (16) cuerpo -> while . cuerpo
    (5) cuerpo -> . funcion
    (6) cuerpo -> . funcall
    (7) cuerpo -> . impresion
    (8) cuerpo -> . entrada
    (9) cuerpo -> . asignacion
    (10) cuerpo -> . while
    (11) cuerpo -> . for
    (12) cuerpo -> . match
    (13) cuerpo -> . if
    (14) cuerpo -> . funcion cuerpo
    (15) cuerpo -> . asignacion cuerpo
    (16) cuerpo -> . while cuerpo
    (17) cuerpo -> . for cuerpo
    (18) cuerpo -> . if cuerpo
    (19) cuerpo -> . match cuerpo
    (110) funcion -> . DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (111) funcion -> . DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
    (118) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (119) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (120) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (121) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (122) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (123) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (124) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (125) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (126) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (127) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (128) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    $end            reduce using rule 10 (cuerpo -> while .)
    LLAVE_D         reduce using rule 10 (cuerpo -> while .)
    DEF             shift and go to state 15
    VARIABLE        shift and go to state 3
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32

    while                          shift and go to state 11
    cuerpo                         shift and go to state 43
    funcion                        shift and go to state 6
    funcall                        shift and go to state 7
    impresion                      shift and go to state 8
    entrada                        shift and go to state 9
    asignacion                     shift and go to state 10
    for                            shift and go to state 12
    match                          shift and go to state 13
    if                             shift and go to state 14
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 12

    (11) cuerpo -> for .
    (17) cuerpo -> for . cuerpo
    (5) cuerpo -> . funcion
    (6) cuerpo -> . funcall
    (7) cuerpo -> . impresion
    (8) cuerpo -> . entrada
    (9) cuerpo -> . asignacion
    (10) cuerpo -> . while
    (11) cuerpo -> . for
    (12) cuerpo -> . match
    (13) cuerpo -> . if
    (14) cuerpo -> . funcion cuerpo
    (15) cuerpo -> . asignacion cuerpo
    (16) cuerpo -> . while cuerpo
    (17) cuerpo -> . for cuerpo
    (18) cuerpo -> . if cuerpo
    (19) cuerpo -> . match cuerpo
    (110) funcion -> . DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (111) funcion -> . DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
    (118) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (119) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (120) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (121) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (122) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (123) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (124) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (125) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (126) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (127) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (128) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    $end            reduce using rule 11 (cuerpo -> for .)
    LLAVE_D         reduce using rule 11 (cuerpo -> for .)
    DEF             shift and go to state 15
    VARIABLE        shift and go to state 3
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32

    for                            shift and go to state 12
    cuerpo                         shift and go to state 44
    funcion                        shift and go to state 6
    funcall                        shift and go to state 7
    impresion                      shift and go to state 8
    entrada                        shift and go to state 9
    asignacion                     shift and go to state 10
    while                          shift and go to state 11
    match                          shift and go to state 13
    if                             shift and go to state 14
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 13

    (12) cuerpo -> match .
    (19) cuerpo -> match . cuerpo
    (5) cuerpo -> . funcion
    (6) cuerpo -> . funcall
    (7) cuerpo -> . impresion
    (8) cuerpo -> . entrada
    (9) cuerpo -> . asignacion
    (10) cuerpo -> . while
    (11) cuerpo -> . for
    (12) cuerpo -> . match
    (13) cuerpo -> . if
    (14) cuerpo -> . funcion cuerpo
    (15) cuerpo -> . asignacion cuerpo
    (16) cuerpo -> . while cuerpo
    (17) cuerpo -> . for cuerpo
    (18) cuerpo -> . if cuerpo
    (19) cuerpo -> . match cuerpo
    (110) funcion -> . DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (111) funcion -> . DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
    (118) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (119) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (120) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (121) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (122) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (123) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (124) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (125) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (126) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (127) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (128) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    $end            reduce using rule 12 (cuerpo -> match .)
    LLAVE_D         reduce using rule 12 (cuerpo -> match .)
    DEF             shift and go to state 15
    VARIABLE        shift and go to state 3
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32

    match                          shift and go to state 13
    cuerpo                         shift and go to state 45
    funcion                        shift and go to state 6
    funcall                        shift and go to state 7
    impresion                      shift and go to state 8
    entrada                        shift and go to state 9
    asignacion                     shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    if                             shift and go to state 14
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 14

    (13) cuerpo -> if .
    (18) cuerpo -> if . cuerpo
    (216) if -> if . elseif
    (217) if -> if . else
    (5) cuerpo -> . funcion
    (6) cuerpo -> . funcall
    (7) cuerpo -> . impresion
    (8) cuerpo -> . entrada
    (9) cuerpo -> . asignacion
    (10) cuerpo -> . while
    (11) cuerpo -> . for
    (12) cuerpo -> . match
    (13) cuerpo -> . if
    (14) cuerpo -> . funcion cuerpo
    (15) cuerpo -> . asignacion cuerpo
    (16) cuerpo -> . while cuerpo
    (17) cuerpo -> . for cuerpo
    (18) cuerpo -> . if cuerpo
    (19) cuerpo -> . match cuerpo
    (218) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (219) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif
    (220) else -> . ELSE LLAVE_I contenido LLAVE_D
    (221) else -> . elseif else
    (110) funcion -> . DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (111) funcion -> . DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
    (118) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (119) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (120) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (121) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (122) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (123) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (124) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (125) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (126) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (127) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (128) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    $end            reduce using rule 13 (cuerpo -> if .)
    LLAVE_D         reduce using rule 13 (cuerpo -> if .)
    ELSE            shift and go to state 49
    DEF             shift and go to state 15
    VARIABLE        shift and go to state 3
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32

    if                             shift and go to state 14
    cuerpo                         shift and go to state 46
    elseif                         shift and go to state 47
    else                           shift and go to state 48
    funcion                        shift and go to state 6
    funcall                        shift and go to state 7
    impresion                      shift and go to state 8
    entrada                        shift and go to state 9
    asignacion                     shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    match                          shift and go to state 13
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 15

    (110) funcion -> DEF . VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (111) funcion -> DEF . VARIABLE parametro LLAVE_I contenido LLAVE_D
    (118) funcion -> DEF . VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (119) funcion -> DEF . VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (120) funcion -> DEF . VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (121) funcion -> DEF . VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (122) funcion -> DEF . VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (123) funcion -> DEF . VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (124) funcion -> DEF . VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (125) funcion -> DEF . VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (126) funcion -> DEF . VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (127) funcion -> DEF . VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (128) funcion -> DEF . VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D

    VARIABLE        shift and go to state 50


state 16

    (135) impresion -> PRINTLN . PAR_I valorI PAR_D

    PAR_I           shift and go to state 51


state 17

    (136) impresion -> PRINT . PAR_I valorI PAR_D

    PAR_I           shift and go to state 52


state 18

    (139) entrada -> READLINE . PAR_I PAR_D

    PAR_I           shift and go to state 53


state 19

    (45) asignacion -> VAR . VARIABLE IGUAL VARIABLE
    (47) asignacion -> VAR . VARIABLE IGUAL aritmetica
    (49) asignacion -> VAR . VARIABLE IGUAL returnfun
    (167) asignacion -> VAR . VARIABLE IGUAL tuple
    (270) asignacion -> VAR . VARIABLE DOBLE_PUNTO dectupla
    (60) asignacionLong -> VAR . VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> VAR . VARIABLE IGUAL longvalues
    (299) asignacionLong -> VAR . VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> VAR . VARIABLE IGUAL intvalues
    (293) asignacionInt -> VAR . VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> VAR . VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> VAR . VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> VAR . VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> VAR . VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> VAR . VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> VAR . VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> VAR . VARIABLE IGUAL STRING
    (67) asignacionString -> VAR . VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> VAR . VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> VAR . VARIABLE IGUAL CHAR
    (73) asignacionChar -> VAR . VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> VAR . VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> VAR . VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> VAR . VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> VAR . VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> VAR . VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> VAR . VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (264) arrayInt -> VAR . VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> VAR . VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VARIABLE        shift and go to state 54


state 20

    (46) asignacion -> VAL . VARIABLE IGUAL VARIABLE
    (48) asignacion -> VAL . VARIABLE IGUAL aritmetica
    (50) asignacion -> VAL . VARIABLE IGUAL returnfun
    (168) asignacion -> VAL . VARIABLE IGUAL tuple
    (271) asignacion -> VAL . VARIABLE DOBLE_PUNTO dectupla
    (61) asignacionLong -> VAL . VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (300) asignacionLong -> VAL . VARIABLE IGUAL longvalues
    (301) asignacionLong -> VAL . VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (294) asignacionInt -> VAL . VARIABLE IGUAL intvalues
    (295) asignacionInt -> VAL . VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (63) asignacionFloat -> VAL . VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (307) asignacionFloat -> VAL . VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> VAL . VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (65) asignacionDouble -> VAL . VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (314) asignacionDouble -> VAL . VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> VAL . VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (68) asignacionString -> VAL . VARIABLE IGUAL STRING
    (69) asignacionString -> VAL . VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (71) asignacionString -> VAL . VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (74) asignacionChar -> VAL . VARIABLE IGUAL CHAR
    (75) asignacionChar -> VAL . VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (77) asignacionChar -> VAL . VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (80) asignacionBoolean -> VAL . VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> VAL . VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (83) asignacionBoolean -> VAL . VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (157) array -> VAL . VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> VAL . VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (161) list -> VAL . VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> VAL . VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> VAL . VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D

    VARIABLE        shift and go to state 55


state 21

    (51) asignacion -> asignacionLong .

    DEF             reduce using rule 51 (asignacion -> asignacionLong .)
    VARIABLE        reduce using rule 51 (asignacion -> asignacionLong .)
    PRINTLN         reduce using rule 51 (asignacion -> asignacionLong .)
    PRINT           reduce using rule 51 (asignacion -> asignacionLong .)
    READLINE        reduce using rule 51 (asignacion -> asignacionLong .)
    VAR             reduce using rule 51 (asignacion -> asignacionLong .)
    VAL             reduce using rule 51 (asignacion -> asignacionLong .)
    WHILE           reduce using rule 51 (asignacion -> asignacionLong .)
    FOR             reduce using rule 51 (asignacion -> asignacionLong .)
    IF              reduce using rule 51 (asignacion -> asignacionLong .)
    $end            reduce using rule 51 (asignacion -> asignacionLong .)
    LLAVE_D         reduce using rule 51 (asignacion -> asignacionLong .)
    INT             reduce using rule 51 (asignacion -> asignacionLong .)
    LONG            reduce using rule 51 (asignacion -> asignacionLong .)
    FLOAT           reduce using rule 51 (asignacion -> asignacionLong .)
    DOUBLE          reduce using rule 51 (asignacion -> asignacionLong .)
    RETURN          reduce using rule 51 (asignacion -> asignacionLong .)
    CASE            reduce using rule 51 (asignacion -> asignacionLong .)


state 22

    (52) asignacion -> asignacionInt .

    DEF             reduce using rule 52 (asignacion -> asignacionInt .)
    VARIABLE        reduce using rule 52 (asignacion -> asignacionInt .)
    PRINTLN         reduce using rule 52 (asignacion -> asignacionInt .)
    PRINT           reduce using rule 52 (asignacion -> asignacionInt .)
    READLINE        reduce using rule 52 (asignacion -> asignacionInt .)
    VAR             reduce using rule 52 (asignacion -> asignacionInt .)
    VAL             reduce using rule 52 (asignacion -> asignacionInt .)
    WHILE           reduce using rule 52 (asignacion -> asignacionInt .)
    FOR             reduce using rule 52 (asignacion -> asignacionInt .)
    IF              reduce using rule 52 (asignacion -> asignacionInt .)
    $end            reduce using rule 52 (asignacion -> asignacionInt .)
    LLAVE_D         reduce using rule 52 (asignacion -> asignacionInt .)
    INT             reduce using rule 52 (asignacion -> asignacionInt .)
    LONG            reduce using rule 52 (asignacion -> asignacionInt .)
    FLOAT           reduce using rule 52 (asignacion -> asignacionInt .)
    DOUBLE          reduce using rule 52 (asignacion -> asignacionInt .)
    RETURN          reduce using rule 52 (asignacion -> asignacionInt .)
    CASE            reduce using rule 52 (asignacion -> asignacionInt .)


state 23

    (53) asignacion -> asignacionFloat .

    DEF             reduce using rule 53 (asignacion -> asignacionFloat .)
    VARIABLE        reduce using rule 53 (asignacion -> asignacionFloat .)
    PRINTLN         reduce using rule 53 (asignacion -> asignacionFloat .)
    PRINT           reduce using rule 53 (asignacion -> asignacionFloat .)
    READLINE        reduce using rule 53 (asignacion -> asignacionFloat .)
    VAR             reduce using rule 53 (asignacion -> asignacionFloat .)
    VAL             reduce using rule 53 (asignacion -> asignacionFloat .)
    WHILE           reduce using rule 53 (asignacion -> asignacionFloat .)
    FOR             reduce using rule 53 (asignacion -> asignacionFloat .)
    IF              reduce using rule 53 (asignacion -> asignacionFloat .)
    $end            reduce using rule 53 (asignacion -> asignacionFloat .)
    LLAVE_D         reduce using rule 53 (asignacion -> asignacionFloat .)
    INT             reduce using rule 53 (asignacion -> asignacionFloat .)
    LONG            reduce using rule 53 (asignacion -> asignacionFloat .)
    FLOAT           reduce using rule 53 (asignacion -> asignacionFloat .)
    DOUBLE          reduce using rule 53 (asignacion -> asignacionFloat .)
    RETURN          reduce using rule 53 (asignacion -> asignacionFloat .)
    CASE            reduce using rule 53 (asignacion -> asignacionFloat .)


state 24

    (54) asignacion -> asignacionDouble .

    DEF             reduce using rule 54 (asignacion -> asignacionDouble .)
    VARIABLE        reduce using rule 54 (asignacion -> asignacionDouble .)
    PRINTLN         reduce using rule 54 (asignacion -> asignacionDouble .)
    PRINT           reduce using rule 54 (asignacion -> asignacionDouble .)
    READLINE        reduce using rule 54 (asignacion -> asignacionDouble .)
    VAR             reduce using rule 54 (asignacion -> asignacionDouble .)
    VAL             reduce using rule 54 (asignacion -> asignacionDouble .)
    WHILE           reduce using rule 54 (asignacion -> asignacionDouble .)
    FOR             reduce using rule 54 (asignacion -> asignacionDouble .)
    IF              reduce using rule 54 (asignacion -> asignacionDouble .)
    $end            reduce using rule 54 (asignacion -> asignacionDouble .)
    LLAVE_D         reduce using rule 54 (asignacion -> asignacionDouble .)
    INT             reduce using rule 54 (asignacion -> asignacionDouble .)
    LONG            reduce using rule 54 (asignacion -> asignacionDouble .)
    FLOAT           reduce using rule 54 (asignacion -> asignacionDouble .)
    DOUBLE          reduce using rule 54 (asignacion -> asignacionDouble .)
    RETURN          reduce using rule 54 (asignacion -> asignacionDouble .)
    CASE            reduce using rule 54 (asignacion -> asignacionDouble .)


state 25

    (55) asignacion -> asignacionString .

    DEF             reduce using rule 55 (asignacion -> asignacionString .)
    VARIABLE        reduce using rule 55 (asignacion -> asignacionString .)
    PRINTLN         reduce using rule 55 (asignacion -> asignacionString .)
    PRINT           reduce using rule 55 (asignacion -> asignacionString .)
    READLINE        reduce using rule 55 (asignacion -> asignacionString .)
    VAR             reduce using rule 55 (asignacion -> asignacionString .)
    VAL             reduce using rule 55 (asignacion -> asignacionString .)
    WHILE           reduce using rule 55 (asignacion -> asignacionString .)
    FOR             reduce using rule 55 (asignacion -> asignacionString .)
    IF              reduce using rule 55 (asignacion -> asignacionString .)
    $end            reduce using rule 55 (asignacion -> asignacionString .)
    LLAVE_D         reduce using rule 55 (asignacion -> asignacionString .)
    INT             reduce using rule 55 (asignacion -> asignacionString .)
    LONG            reduce using rule 55 (asignacion -> asignacionString .)
    FLOAT           reduce using rule 55 (asignacion -> asignacionString .)
    DOUBLE          reduce using rule 55 (asignacion -> asignacionString .)
    RETURN          reduce using rule 55 (asignacion -> asignacionString .)
    CASE            reduce using rule 55 (asignacion -> asignacionString .)


state 26

    (56) asignacion -> asignacionChar .

    DEF             reduce using rule 56 (asignacion -> asignacionChar .)
    VARIABLE        reduce using rule 56 (asignacion -> asignacionChar .)
    PRINTLN         reduce using rule 56 (asignacion -> asignacionChar .)
    PRINT           reduce using rule 56 (asignacion -> asignacionChar .)
    READLINE        reduce using rule 56 (asignacion -> asignacionChar .)
    VAR             reduce using rule 56 (asignacion -> asignacionChar .)
    VAL             reduce using rule 56 (asignacion -> asignacionChar .)
    WHILE           reduce using rule 56 (asignacion -> asignacionChar .)
    FOR             reduce using rule 56 (asignacion -> asignacionChar .)
    IF              reduce using rule 56 (asignacion -> asignacionChar .)
    $end            reduce using rule 56 (asignacion -> asignacionChar .)
    LLAVE_D         reduce using rule 56 (asignacion -> asignacionChar .)
    INT             reduce using rule 56 (asignacion -> asignacionChar .)
    LONG            reduce using rule 56 (asignacion -> asignacionChar .)
    FLOAT           reduce using rule 56 (asignacion -> asignacionChar .)
    DOUBLE          reduce using rule 56 (asignacion -> asignacionChar .)
    RETURN          reduce using rule 56 (asignacion -> asignacionChar .)
    CASE            reduce using rule 56 (asignacion -> asignacionChar .)


state 27

    (57) asignacion -> asignacionBoolean .

    DEF             reduce using rule 57 (asignacion -> asignacionBoolean .)
    VARIABLE        reduce using rule 57 (asignacion -> asignacionBoolean .)
    PRINTLN         reduce using rule 57 (asignacion -> asignacionBoolean .)
    PRINT           reduce using rule 57 (asignacion -> asignacionBoolean .)
    READLINE        reduce using rule 57 (asignacion -> asignacionBoolean .)
    VAR             reduce using rule 57 (asignacion -> asignacionBoolean .)
    VAL             reduce using rule 57 (asignacion -> asignacionBoolean .)
    WHILE           reduce using rule 57 (asignacion -> asignacionBoolean .)
    FOR             reduce using rule 57 (asignacion -> asignacionBoolean .)
    IF              reduce using rule 57 (asignacion -> asignacionBoolean .)
    $end            reduce using rule 57 (asignacion -> asignacionBoolean .)
    LLAVE_D         reduce using rule 57 (asignacion -> asignacionBoolean .)
    INT             reduce using rule 57 (asignacion -> asignacionBoolean .)
    LONG            reduce using rule 57 (asignacion -> asignacionBoolean .)
    FLOAT           reduce using rule 57 (asignacion -> asignacionBoolean .)
    DOUBLE          reduce using rule 57 (asignacion -> asignacionBoolean .)
    RETURN          reduce using rule 57 (asignacion -> asignacionBoolean .)
    CASE            reduce using rule 57 (asignacion -> asignacionBoolean .)


state 28

    (58) asignacion -> array .

    DEF             reduce using rule 58 (asignacion -> array .)
    VARIABLE        reduce using rule 58 (asignacion -> array .)
    PRINTLN         reduce using rule 58 (asignacion -> array .)
    PRINT           reduce using rule 58 (asignacion -> array .)
    READLINE        reduce using rule 58 (asignacion -> array .)
    VAR             reduce using rule 58 (asignacion -> array .)
    VAL             reduce using rule 58 (asignacion -> array .)
    WHILE           reduce using rule 58 (asignacion -> array .)
    FOR             reduce using rule 58 (asignacion -> array .)
    IF              reduce using rule 58 (asignacion -> array .)
    $end            reduce using rule 58 (asignacion -> array .)
    LLAVE_D         reduce using rule 58 (asignacion -> array .)
    INT             reduce using rule 58 (asignacion -> array .)
    LONG            reduce using rule 58 (asignacion -> array .)
    FLOAT           reduce using rule 58 (asignacion -> array .)
    DOUBLE          reduce using rule 58 (asignacion -> array .)
    RETURN          reduce using rule 58 (asignacion -> array .)
    CASE            reduce using rule 58 (asignacion -> array .)


state 29

    (59) asignacion -> list .

    DEF             reduce using rule 59 (asignacion -> list .)
    VARIABLE        reduce using rule 59 (asignacion -> list .)
    PRINTLN         reduce using rule 59 (asignacion -> list .)
    PRINT           reduce using rule 59 (asignacion -> list .)
    READLINE        reduce using rule 59 (asignacion -> list .)
    VAR             reduce using rule 59 (asignacion -> list .)
    VAL             reduce using rule 59 (asignacion -> list .)
    WHILE           reduce using rule 59 (asignacion -> list .)
    FOR             reduce using rule 59 (asignacion -> list .)
    IF              reduce using rule 59 (asignacion -> list .)
    $end            reduce using rule 59 (asignacion -> list .)
    LLAVE_D         reduce using rule 59 (asignacion -> list .)
    INT             reduce using rule 59 (asignacion -> list .)
    LONG            reduce using rule 59 (asignacion -> list .)
    FLOAT           reduce using rule 59 (asignacion -> list .)
    DOUBLE          reduce using rule 59 (asignacion -> list .)
    RETURN          reduce using rule 59 (asignacion -> list .)
    CASE            reduce using rule 59 (asignacion -> list .)


state 30

    (169) while -> WHILE . PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D

    PAR_I           shift and go to state 56


state 31

    (170) for -> FOR . PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> FOR . PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> FOR . PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> FOR . PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> FOR . PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> FOR . PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D

    PAR_I           shift and go to state 57


state 32

    (215) if -> IF . PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D

    PAR_I           shift and go to state 58


state 33

    (159) array -> arrayInt .

    DEF             reduce using rule 159 (array -> arrayInt .)
    VARIABLE        reduce using rule 159 (array -> arrayInt .)
    PRINTLN         reduce using rule 159 (array -> arrayInt .)
    PRINT           reduce using rule 159 (array -> arrayInt .)
    READLINE        reduce using rule 159 (array -> arrayInt .)
    VAR             reduce using rule 159 (array -> arrayInt .)
    VAL             reduce using rule 159 (array -> arrayInt .)
    WHILE           reduce using rule 159 (array -> arrayInt .)
    FOR             reduce using rule 159 (array -> arrayInt .)
    IF              reduce using rule 159 (array -> arrayInt .)
    $end            reduce using rule 159 (array -> arrayInt .)
    LLAVE_D         reduce using rule 159 (array -> arrayInt .)
    INT             reduce using rule 159 (array -> arrayInt .)
    LONG            reduce using rule 159 (array -> arrayInt .)
    FLOAT           reduce using rule 159 (array -> arrayInt .)
    DOUBLE          reduce using rule 159 (array -> arrayInt .)
    RETURN          reduce using rule 159 (array -> arrayInt .)
    CASE            reduce using rule 159 (array -> arrayInt .)


state 34

    (160) array -> arrayDouble .

    DEF             reduce using rule 160 (array -> arrayDouble .)
    VARIABLE        reduce using rule 160 (array -> arrayDouble .)
    PRINTLN         reduce using rule 160 (array -> arrayDouble .)
    PRINT           reduce using rule 160 (array -> arrayDouble .)
    READLINE        reduce using rule 160 (array -> arrayDouble .)
    VAR             reduce using rule 160 (array -> arrayDouble .)
    VAL             reduce using rule 160 (array -> arrayDouble .)
    WHILE           reduce using rule 160 (array -> arrayDouble .)
    FOR             reduce using rule 160 (array -> arrayDouble .)
    IF              reduce using rule 160 (array -> arrayDouble .)
    $end            reduce using rule 160 (array -> arrayDouble .)
    LLAVE_D         reduce using rule 160 (array -> arrayDouble .)
    INT             reduce using rule 160 (array -> arrayDouble .)
    LONG            reduce using rule 160 (array -> arrayDouble .)
    FLOAT           reduce using rule 160 (array -> arrayDouble .)
    DOUBLE          reduce using rule 160 (array -> arrayDouble .)
    RETURN          reduce using rule 160 (array -> arrayDouble .)
    CASE            reduce using rule 160 (array -> arrayDouble .)


state 35

    (1) inicio -> OBJECT VARIABLE . LLAVE_I cuerpo LLAVE_D

    LLAVE_I         shift and go to state 59


state 36

    (140) funcall -> VARIABLE varparen .
    (143) varparen -> varparen . PAR_I valores PAR_D
    (144) varparen -> varparen . PAR_I PAR_D

    $end            reduce using rule 140 (funcall -> VARIABLE varparen .)
    LLAVE_D         reduce using rule 140 (funcall -> VARIABLE varparen .)
    VAR             reduce using rule 140 (funcall -> VARIABLE varparen .)
    VAL             reduce using rule 140 (funcall -> VARIABLE varparen .)
    VARIABLE        reduce using rule 140 (funcall -> VARIABLE varparen .)
    PRINTLN         reduce using rule 140 (funcall -> VARIABLE varparen .)
    PRINT           reduce using rule 140 (funcall -> VARIABLE varparen .)
    READLINE        reduce using rule 140 (funcall -> VARIABLE varparen .)
    WHILE           reduce using rule 140 (funcall -> VARIABLE varparen .)
    FOR             reduce using rule 140 (funcall -> VARIABLE varparen .)
    IF              reduce using rule 140 (funcall -> VARIABLE varparen .)
    INT             reduce using rule 140 (funcall -> VARIABLE varparen .)
    LONG            reduce using rule 140 (funcall -> VARIABLE varparen .)
    FLOAT           reduce using rule 140 (funcall -> VARIABLE varparen .)
    DOUBLE          reduce using rule 140 (funcall -> VARIABLE varparen .)
    PUNTO           reduce using rule 140 (funcall -> VARIABLE varparen .)
    DEF             reduce using rule 140 (funcall -> VARIABLE varparen .)
    RETURN          reduce using rule 140 (funcall -> VARIABLE varparen .)
    CASE            reduce using rule 140 (funcall -> VARIABLE varparen .)
    PAR_I           shift and go to state 60


state 37

    (176) match -> VARIABLE MATCH . LLAVE_I cases LLAVE_D

    LLAVE_I         shift and go to state 61


state 38

    (141) varparen -> PAR_I . valores PAR_D
    (142) varparen -> PAR_I . PAR_D
    (164) valores -> . valor
    (165) valores -> . valor COMA valores
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    PAR_D           shift and go to state 63
    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valores                        shift and go to state 62
    valor                          shift and go to state 64
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 39

    (2) inicio -> IMPORT io . inicio
    (1) inicio -> . OBJECT VARIABLE LLAVE_I cuerpo LLAVE_D
    (2) inicio -> . IMPORT io inicio
    (3) inicio -> . cuerpo
    (5) cuerpo -> . funcion
    (6) cuerpo -> . funcall
    (7) cuerpo -> . impresion
    (8) cuerpo -> . entrada
    (9) cuerpo -> . asignacion
    (10) cuerpo -> . while
    (11) cuerpo -> . for
    (12) cuerpo -> . match
    (13) cuerpo -> . if
    (14) cuerpo -> . funcion cuerpo
    (15) cuerpo -> . asignacion cuerpo
    (16) cuerpo -> . while cuerpo
    (17) cuerpo -> . for cuerpo
    (18) cuerpo -> . if cuerpo
    (19) cuerpo -> . match cuerpo
    (110) funcion -> . DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (111) funcion -> . DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
    (118) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (119) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (120) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (121) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (122) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (123) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (124) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (125) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (126) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (127) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (128) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    OBJECT          shift and go to state 2
    IMPORT          shift and go to state 5
    DEF             shift and go to state 15
    VARIABLE        shift and go to state 3
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32

    inicio                         shift and go to state 76
    cuerpo                         shift and go to state 4
    funcion                        shift and go to state 6
    funcall                        shift and go to state 7
    impresion                      shift and go to state 8
    entrada                        shift and go to state 9
    asignacion                     shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    match                          shift and go to state 13
    if                             shift and go to state 14
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 40

    (4) io -> VARIABLE . PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE

    PUNTO           shift and go to state 77


state 41

    (14) cuerpo -> funcion cuerpo .

    $end            reduce using rule 14 (cuerpo -> funcion cuerpo .)
    LLAVE_D         reduce using rule 14 (cuerpo -> funcion cuerpo .)


state 42

    (15) cuerpo -> asignacion cuerpo .

    $end            reduce using rule 15 (cuerpo -> asignacion cuerpo .)
    LLAVE_D         reduce using rule 15 (cuerpo -> asignacion cuerpo .)


state 43

    (16) cuerpo -> while cuerpo .

    $end            reduce using rule 16 (cuerpo -> while cuerpo .)
    LLAVE_D         reduce using rule 16 (cuerpo -> while cuerpo .)


state 44

    (17) cuerpo -> for cuerpo .

    $end            reduce using rule 17 (cuerpo -> for cuerpo .)
    LLAVE_D         reduce using rule 17 (cuerpo -> for cuerpo .)


state 45

    (19) cuerpo -> match cuerpo .

    $end            reduce using rule 19 (cuerpo -> match cuerpo .)
    LLAVE_D         reduce using rule 19 (cuerpo -> match cuerpo .)


state 46

    (18) cuerpo -> if cuerpo .

    $end            reduce using rule 18 (cuerpo -> if cuerpo .)
    LLAVE_D         reduce using rule 18 (cuerpo -> if cuerpo .)


state 47

    (216) if -> if elseif .
    (221) else -> elseif . else
    (220) else -> . ELSE LLAVE_I contenido LLAVE_D
    (221) else -> . elseif else
    (218) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (219) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif

  ! shift/reduce conflict for ELSE resolved as shift
    DEF             reduce using rule 216 (if -> if elseif .)
    VARIABLE        reduce using rule 216 (if -> if elseif .)
    PRINTLN         reduce using rule 216 (if -> if elseif .)
    PRINT           reduce using rule 216 (if -> if elseif .)
    READLINE        reduce using rule 216 (if -> if elseif .)
    VAR             reduce using rule 216 (if -> if elseif .)
    VAL             reduce using rule 216 (if -> if elseif .)
    WHILE           reduce using rule 216 (if -> if elseif .)
    FOR             reduce using rule 216 (if -> if elseif .)
    IF              reduce using rule 216 (if -> if elseif .)
    $end            reduce using rule 216 (if -> if elseif .)
    LLAVE_D         reduce using rule 216 (if -> if elseif .)
    INT             reduce using rule 216 (if -> if elseif .)
    LONG            reduce using rule 216 (if -> if elseif .)
    FLOAT           reduce using rule 216 (if -> if elseif .)
    DOUBLE          reduce using rule 216 (if -> if elseif .)
    RETURN          reduce using rule 216 (if -> if elseif .)
    ELSE            shift and go to state 80

  ! ELSE            [ reduce using rule 216 (if -> if elseif .) ]

    elseif                         shift and go to state 78
    else                           shift and go to state 79

state 48

    (217) if -> if else .

    ELSE            reduce using rule 217 (if -> if else .)
    DEF             reduce using rule 217 (if -> if else .)
    VARIABLE        reduce using rule 217 (if -> if else .)
    PRINTLN         reduce using rule 217 (if -> if else .)
    PRINT           reduce using rule 217 (if -> if else .)
    READLINE        reduce using rule 217 (if -> if else .)
    VAR             reduce using rule 217 (if -> if else .)
    VAL             reduce using rule 217 (if -> if else .)
    WHILE           reduce using rule 217 (if -> if else .)
    FOR             reduce using rule 217 (if -> if else .)
    IF              reduce using rule 217 (if -> if else .)
    $end            reduce using rule 217 (if -> if else .)
    LLAVE_D         reduce using rule 217 (if -> if else .)
    INT             reduce using rule 217 (if -> if else .)
    LONG            reduce using rule 217 (if -> if else .)
    FLOAT           reduce using rule 217 (if -> if else .)
    DOUBLE          reduce using rule 217 (if -> if else .)
    RETURN          reduce using rule 217 (if -> if else .)


state 49

    (218) elseif -> ELSE . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (219) elseif -> ELSE . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif
    (220) else -> ELSE . LLAVE_I contenido LLAVE_D

    IF              shift and go to state 81
    LLAVE_I         shift and go to state 82


state 50

    (110) funcion -> DEF VARIABLE . parametro IGUAL LLAVE_I contenido LLAVE_D
    (111) funcion -> DEF VARIABLE . parametro LLAVE_I contenido LLAVE_D
    (118) funcion -> DEF VARIABLE . parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (119) funcion -> DEF VARIABLE . parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (120) funcion -> DEF VARIABLE . parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (121) funcion -> DEF VARIABLE . parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (122) funcion -> DEF VARIABLE . parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (123) funcion -> DEF VARIABLE . parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (124) funcion -> DEF VARIABLE . parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (125) funcion -> DEF VARIABLE . parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (126) funcion -> DEF VARIABLE . parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (127) funcion -> DEF VARIABLE . parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (128) funcion -> DEF VARIABLE . parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (114) parametro -> . parametros
    (115) parametro -> . PAR_I PAR_D
    (116) parametros -> . PAR_I declaracion PAR_D
    (117) parametros -> . PAR_I declaracion PAR_D parametros

    PAR_I           shift and go to state 85

    parametro                      shift and go to state 83
    parametros                     shift and go to state 84

state 51

    (135) impresion -> PRINTLN PAR_I . valorI PAR_D
    (137) valorI -> . valor MAS valorI
    (138) valorI -> . valor
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valorI                         shift and go to state 86
    valor                          shift and go to state 87
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 52

    (136) impresion -> PRINT PAR_I . valorI PAR_D
    (137) valorI -> . valor MAS valorI
    (138) valorI -> . valor
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valorI                         shift and go to state 88
    valor                          shift and go to state 87
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 53

    (139) entrada -> READLINE PAR_I . PAR_D

    PAR_D           shift and go to state 89


state 54

    (45) asignacion -> VAR VARIABLE . IGUAL VARIABLE
    (47) asignacion -> VAR VARIABLE . IGUAL aritmetica
    (49) asignacion -> VAR VARIABLE . IGUAL returnfun
    (167) asignacion -> VAR VARIABLE . IGUAL tuple
    (270) asignacion -> VAR VARIABLE . DOBLE_PUNTO dectupla
    (60) asignacionLong -> VAR VARIABLE . DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> VAR VARIABLE . IGUAL longvalues
    (299) asignacionLong -> VAR VARIABLE . DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> VAR VARIABLE . IGUAL intvalues
    (293) asignacionInt -> VAR VARIABLE . DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> VAR VARIABLE . DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> VAR VARIABLE . IGUAL floatvalues
    (306) asignacionFloat -> VAR VARIABLE . DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> VAR VARIABLE . DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> VAR VARIABLE . IGUAL doublevalues
    (313) asignacionDouble -> VAR VARIABLE . DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> VAR VARIABLE . IGUAL STRING
    (67) asignacionString -> VAR VARIABLE . DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> VAR VARIABLE . DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> VAR VARIABLE . IGUAL CHAR
    (73) asignacionChar -> VAR VARIABLE . DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> VAR VARIABLE . DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> VAR VARIABLE . IGUAL booleanos
    (79) asignacionBoolean -> VAR VARIABLE . DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> VAR VARIABLE . DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> VAR VARIABLE . IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> VAR VARIABLE . DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (264) arrayInt -> VAR VARIABLE . DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> VAR VARIABLE . DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    IGUAL           shift and go to state 90
    DOBLE_PUNTO     shift and go to state 91


state 55

    (46) asignacion -> VAL VARIABLE . IGUAL VARIABLE
    (48) asignacion -> VAL VARIABLE . IGUAL aritmetica
    (50) asignacion -> VAL VARIABLE . IGUAL returnfun
    (168) asignacion -> VAL VARIABLE . IGUAL tuple
    (271) asignacion -> VAL VARIABLE . DOBLE_PUNTO dectupla
    (61) asignacionLong -> VAL VARIABLE . DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (300) asignacionLong -> VAL VARIABLE . IGUAL longvalues
    (301) asignacionLong -> VAL VARIABLE . DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (294) asignacionInt -> VAL VARIABLE . IGUAL intvalues
    (295) asignacionInt -> VAL VARIABLE . DOBLE_PUNTO INTCLASS IGUAL intvalues
    (63) asignacionFloat -> VAL VARIABLE . DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (307) asignacionFloat -> VAL VARIABLE . IGUAL floatvalues
    (308) asignacionFloat -> VAL VARIABLE . DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (65) asignacionDouble -> VAL VARIABLE . DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (314) asignacionDouble -> VAL VARIABLE . IGUAL doublevalues
    (315) asignacionDouble -> VAL VARIABLE . DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (68) asignacionString -> VAL VARIABLE . IGUAL STRING
    (69) asignacionString -> VAL VARIABLE . DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (71) asignacionString -> VAL VARIABLE . DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (74) asignacionChar -> VAL VARIABLE . IGUAL CHAR
    (75) asignacionChar -> VAL VARIABLE . DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (77) asignacionChar -> VAL VARIABLE . DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (80) asignacionBoolean -> VAL VARIABLE . IGUAL booleanos
    (81) asignacionBoolean -> VAL VARIABLE . DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (83) asignacionBoolean -> VAL VARIABLE . DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (157) array -> VAL VARIABLE . IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> VAL VARIABLE . DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (161) list -> VAL VARIABLE . IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> VAL VARIABLE . DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> VAL VARIABLE . DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D

    IGUAL           shift and go to state 92
    DOBLE_PUNTO     shift and go to state 93


state 56

    (169) while -> WHILE PAR_I . condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) condicional -> . valorC logicos condicional
    (223) condicional -> . valorC
    (224) valorC -> . VARIABLE
    (225) valorC -> . booleanos
    (226) valorC -> . relacional
    (227) valorC -> . NOT VARIABLE
    (228) valorC -> . NOT booleanos
    (229) valorC -> . NOT relacional
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE
    (233) relacional -> . numeros comparacion numeros
    (234) relacional -> . aritmetica comparacion aritmetica
    (235) relacional -> . aritmetica comparacion numeros
    (236) relacional -> . numeros comparacion aritmetica
    (237) relacional -> . booleanos comparacion booleanos
    (238) relacional -> . STRING comparacion STRING
    (239) relacional -> . CHAR comparacion CHAR
    (240) relacional -> . VARIABLE comparacion numeros
    (241) relacional -> . numeros comparacion VARIABLE
    (242) relacional -> . VARIABLE comparacion booleanos
    (243) relacional -> . booleanos comparacion VARIABLE
    (244) relacional -> . VARIABLE comparacion STRING
    (245) relacional -> . STRING comparacion VARIABLE
    (246) relacional -> . VARIABLE comparacion CHAR
    (247) relacional -> . CHAR comparacion VARIABLE
    (248) relacional -> . VARIABLE comparacion VARIABLE
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE

    VARIABLE        shift and go to state 96
    NOT             shift and go to state 99
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    STRING          shift and go to state 102
    CHAR            shift and go to state 103
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    condicional                    shift and go to state 94
    valorC                         shift and go to state 95
    booleanos                      shift and go to state 97
    relacional                     shift and go to state 98
    numeros                        shift and go to state 100
    aritmetica                     shift and go to state 101

state 57

    (170) for -> FOR PAR_I . VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> FOR PAR_I . VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> FOR PAR_I . VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> FOR PAR_I . VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> FOR PAR_I . VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> FOR PAR_I . VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D

    VAR             shift and go to state 104
    VARIABLE        shift and go to state 105


state 58

    (215) if -> IF PAR_I . condicional PAR_D LLAVE_I contenido LLAVE_D
    (222) condicional -> . valorC logicos condicional
    (223) condicional -> . valorC
    (224) valorC -> . VARIABLE
    (225) valorC -> . booleanos
    (226) valorC -> . relacional
    (227) valorC -> . NOT VARIABLE
    (228) valorC -> . NOT booleanos
    (229) valorC -> . NOT relacional
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE
    (233) relacional -> . numeros comparacion numeros
    (234) relacional -> . aritmetica comparacion aritmetica
    (235) relacional -> . aritmetica comparacion numeros
    (236) relacional -> . numeros comparacion aritmetica
    (237) relacional -> . booleanos comparacion booleanos
    (238) relacional -> . STRING comparacion STRING
    (239) relacional -> . CHAR comparacion CHAR
    (240) relacional -> . VARIABLE comparacion numeros
    (241) relacional -> . numeros comparacion VARIABLE
    (242) relacional -> . VARIABLE comparacion booleanos
    (243) relacional -> . booleanos comparacion VARIABLE
    (244) relacional -> . VARIABLE comparacion STRING
    (245) relacional -> . STRING comparacion VARIABLE
    (246) relacional -> . VARIABLE comparacion CHAR
    (247) relacional -> . CHAR comparacion VARIABLE
    (248) relacional -> . VARIABLE comparacion VARIABLE
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE

    VARIABLE        shift and go to state 96
    NOT             shift and go to state 99
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    STRING          shift and go to state 102
    CHAR            shift and go to state 103
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    condicional                    shift and go to state 106
    valorC                         shift and go to state 95
    booleanos                      shift and go to state 97
    relacional                     shift and go to state 98
    numeros                        shift and go to state 100
    aritmetica                     shift and go to state 101

state 59

    (1) inicio -> OBJECT VARIABLE LLAVE_I . cuerpo LLAVE_D
    (5) cuerpo -> . funcion
    (6) cuerpo -> . funcall
    (7) cuerpo -> . impresion
    (8) cuerpo -> . entrada
    (9) cuerpo -> . asignacion
    (10) cuerpo -> . while
    (11) cuerpo -> . for
    (12) cuerpo -> . match
    (13) cuerpo -> . if
    (14) cuerpo -> . funcion cuerpo
    (15) cuerpo -> . asignacion cuerpo
    (16) cuerpo -> . while cuerpo
    (17) cuerpo -> . for cuerpo
    (18) cuerpo -> . if cuerpo
    (19) cuerpo -> . match cuerpo
    (110) funcion -> . DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D
    (111) funcion -> . DEF VARIABLE parametro LLAVE_I contenido LLAVE_D
    (118) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (119) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (120) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (121) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (122) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (123) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (124) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (125) funcion -> . DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (126) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (127) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (128) funcion -> . DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    DEF             shift and go to state 15
    VARIABLE        shift and go to state 3
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32

    cuerpo                         shift and go to state 107
    funcion                        shift and go to state 6
    funcall                        shift and go to state 7
    impresion                      shift and go to state 8
    entrada                        shift and go to state 9
    asignacion                     shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    match                          shift and go to state 13
    if                             shift and go to state 14
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 60

    (143) varparen -> varparen PAR_I . valores PAR_D
    (144) varparen -> varparen PAR_I . PAR_D
    (164) valores -> . valor
    (165) valores -> . valor COMA valores
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    PAR_D           shift and go to state 109
    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valores                        shift and go to state 108
    valor                          shift and go to state 64
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 61

    (176) match -> VARIABLE MATCH LLAVE_I . cases LLAVE_D
    (177) cases -> . casesInt
    (178) cases -> . casesLgn
    (179) cases -> . casesFlt
    (180) cases -> . casesDob
    (181) cases -> . casesStr
    (182) cases -> . casesChar
    (183) cases -> . casesBool
    (185) casesInt -> . caseInt
    (186) casesInt -> . caseInt casesInt
    (187) casesInt -> . caseInt defcase
    (189) casesLgn -> . caseLgn
    (190) casesLgn -> . caseLgn casesLgn
    (191) casesLgn -> . caseLgn defcase
    (193) casesFlt -> . caseFlt
    (194) casesFlt -> . caseFlt casesFlt
    (195) casesFlt -> . caseFlt defcase
    (197) casesDob -> . caseDob
    (198) casesDob -> . caseDob casesDob
    (199) casesDob -> . caseDob defcase
    (201) casesStr -> . caseStr
    (202) casesStr -> . caseStr casesStr
    (203) casesStr -> . caseStr defcase
    (205) casesChar -> . caseChar
    (206) casesChar -> . caseChar casesChar
    (207) casesChar -> . caseChar defcase
    (209) casesBool -> . caseBool
    (210) casesBool -> . caseBool casesBool
    (211) casesBool -> . caseBool defcase
    (184) caseInt -> . CASE INT FUNCION_FLECHA codeBlock
    (188) caseLgn -> . CASE LONG FUNCION_FLECHA codeBlock
    (192) caseFlt -> . CASE FLOAT FUNCION_FLECHA codeBlock
    (196) caseDob -> . CASE DOUBLE FUNCION_FLECHA codeBlock
    (200) caseStr -> . CASE STRING FUNCION_FLECHA codeBlock
    (204) caseChar -> . CASE CHAR FUNCION_FLECHA codeBlock
    (208) caseBool -> . CASE booleanos FUNCION_FLECHA codeBlock

    CASE            shift and go to state 125

    cases                          shift and go to state 110
    casesInt                       shift and go to state 111
    casesLgn                       shift and go to state 112
    casesFlt                       shift and go to state 113
    casesDob                       shift and go to state 114
    casesStr                       shift and go to state 115
    casesChar                      shift and go to state 116
    casesBool                      shift and go to state 117
    caseInt                        shift and go to state 118
    caseLgn                        shift and go to state 119
    caseFlt                        shift and go to state 120
    caseDob                        shift and go to state 121
    caseStr                        shift and go to state 122
    caseChar                       shift and go to state 123
    caseBool                       shift and go to state 124

state 62

    (141) varparen -> PAR_I valores . PAR_D

    PAR_D           shift and go to state 126


state 63

    (142) varparen -> PAR_I PAR_D .

    PAR_I           reduce using rule 142 (varparen -> PAR_I PAR_D .)
    $end            reduce using rule 142 (varparen -> PAR_I PAR_D .)
    LLAVE_D         reduce using rule 142 (varparen -> PAR_I PAR_D .)
    VAR             reduce using rule 142 (varparen -> PAR_I PAR_D .)
    VAL             reduce using rule 142 (varparen -> PAR_I PAR_D .)
    VARIABLE        reduce using rule 142 (varparen -> PAR_I PAR_D .)
    PRINTLN         reduce using rule 142 (varparen -> PAR_I PAR_D .)
    PRINT           reduce using rule 142 (varparen -> PAR_I PAR_D .)
    READLINE        reduce using rule 142 (varparen -> PAR_I PAR_D .)
    WHILE           reduce using rule 142 (varparen -> PAR_I PAR_D .)
    FOR             reduce using rule 142 (varparen -> PAR_I PAR_D .)
    IF              reduce using rule 142 (varparen -> PAR_I PAR_D .)
    INT             reduce using rule 142 (varparen -> PAR_I PAR_D .)
    LONG            reduce using rule 142 (varparen -> PAR_I PAR_D .)
    FLOAT           reduce using rule 142 (varparen -> PAR_I PAR_D .)
    DOUBLE          reduce using rule 142 (varparen -> PAR_I PAR_D .)
    RETURN          reduce using rule 142 (varparen -> PAR_I PAR_D .)
    PUNTO           reduce using rule 142 (varparen -> PAR_I PAR_D .)
    DEF             reduce using rule 142 (varparen -> PAR_I PAR_D .)
    CASE            reduce using rule 142 (varparen -> PAR_I PAR_D .)


state 64

    (164) valores -> valor .
    (165) valores -> valor . COMA valores

    PAR_D           reduce using rule 164 (valores -> valor .)
    COMA            shift and go to state 127


state 65

    (97) valor -> STRING .

    COMA            reduce using rule 97 (valor -> STRING .)
    PAR_D           reduce using rule 97 (valor -> STRING .)
    MAS             reduce using rule 97 (valor -> STRING .)
    VAR             reduce using rule 97 (valor -> STRING .)
    VAL             reduce using rule 97 (valor -> STRING .)
    VARIABLE        reduce using rule 97 (valor -> STRING .)
    PRINTLN         reduce using rule 97 (valor -> STRING .)
    PRINT           reduce using rule 97 (valor -> STRING .)
    READLINE        reduce using rule 97 (valor -> STRING .)
    WHILE           reduce using rule 97 (valor -> STRING .)
    FOR             reduce using rule 97 (valor -> STRING .)
    IF              reduce using rule 97 (valor -> STRING .)
    INT             reduce using rule 97 (valor -> STRING .)
    LONG            reduce using rule 97 (valor -> STRING .)
    FLOAT           reduce using rule 97 (valor -> STRING .)
    DOUBLE          reduce using rule 97 (valor -> STRING .)
    LLAVE_D         reduce using rule 97 (valor -> STRING .)
    RETURN          reduce using rule 97 (valor -> STRING .)
    CASE            reduce using rule 97 (valor -> STRING .)


state 66

    (98) valor -> CHAR .

    COMA            reduce using rule 98 (valor -> CHAR .)
    PAR_D           reduce using rule 98 (valor -> CHAR .)
    MAS             reduce using rule 98 (valor -> CHAR .)
    VAR             reduce using rule 98 (valor -> CHAR .)
    VAL             reduce using rule 98 (valor -> CHAR .)
    VARIABLE        reduce using rule 98 (valor -> CHAR .)
    PRINTLN         reduce using rule 98 (valor -> CHAR .)
    PRINT           reduce using rule 98 (valor -> CHAR .)
    READLINE        reduce using rule 98 (valor -> CHAR .)
    WHILE           reduce using rule 98 (valor -> CHAR .)
    FOR             reduce using rule 98 (valor -> CHAR .)
    IF              reduce using rule 98 (valor -> CHAR .)
    INT             reduce using rule 98 (valor -> CHAR .)
    LONG            reduce using rule 98 (valor -> CHAR .)
    FLOAT           reduce using rule 98 (valor -> CHAR .)
    DOUBLE          reduce using rule 98 (valor -> CHAR .)
    LLAVE_D         reduce using rule 98 (valor -> CHAR .)
    RETURN          reduce using rule 98 (valor -> CHAR .)
    CASE            reduce using rule 98 (valor -> CHAR .)


state 67

    (99) valor -> VARIABLE .
    (102) valor -> VARIABLE . PAR_I VARIABLE PAR_D
    (103) valor -> VARIABLE . PAR_I INT PAR_D

    COMA            reduce using rule 99 (valor -> VARIABLE .)
    PAR_D           reduce using rule 99 (valor -> VARIABLE .)
    MAS             reduce using rule 99 (valor -> VARIABLE .)
    VAR             reduce using rule 99 (valor -> VARIABLE .)
    VAL             reduce using rule 99 (valor -> VARIABLE .)
    VARIABLE        reduce using rule 99 (valor -> VARIABLE .)
    PRINTLN         reduce using rule 99 (valor -> VARIABLE .)
    PRINT           reduce using rule 99 (valor -> VARIABLE .)
    READLINE        reduce using rule 99 (valor -> VARIABLE .)
    WHILE           reduce using rule 99 (valor -> VARIABLE .)
    FOR             reduce using rule 99 (valor -> VARIABLE .)
    IF              reduce using rule 99 (valor -> VARIABLE .)
    INT             reduce using rule 99 (valor -> VARIABLE .)
    LONG            reduce using rule 99 (valor -> VARIABLE .)
    FLOAT           reduce using rule 99 (valor -> VARIABLE .)
    DOUBLE          reduce using rule 99 (valor -> VARIABLE .)
    LLAVE_D         reduce using rule 99 (valor -> VARIABLE .)
    RETURN          reduce using rule 99 (valor -> VARIABLE .)
    CASE            reduce using rule 99 (valor -> VARIABLE .)
    PAR_I           shift and go to state 128


state 68

    (100) valor -> numeros .

    COMA            reduce using rule 100 (valor -> numeros .)
    PAR_D           reduce using rule 100 (valor -> numeros .)
    MAS             reduce using rule 100 (valor -> numeros .)
    VAR             reduce using rule 100 (valor -> numeros .)
    VAL             reduce using rule 100 (valor -> numeros .)
    VARIABLE        reduce using rule 100 (valor -> numeros .)
    PRINTLN         reduce using rule 100 (valor -> numeros .)
    PRINT           reduce using rule 100 (valor -> numeros .)
    READLINE        reduce using rule 100 (valor -> numeros .)
    WHILE           reduce using rule 100 (valor -> numeros .)
    FOR             reduce using rule 100 (valor -> numeros .)
    IF              reduce using rule 100 (valor -> numeros .)
    INT             reduce using rule 100 (valor -> numeros .)
    LONG            reduce using rule 100 (valor -> numeros .)
    FLOAT           reduce using rule 100 (valor -> numeros .)
    DOUBLE          reduce using rule 100 (valor -> numeros .)
    LLAVE_D         reduce using rule 100 (valor -> numeros .)
    RETURN          reduce using rule 100 (valor -> numeros .)
    CASE            reduce using rule 100 (valor -> numeros .)


state 69

    (101) valor -> booleanos .

    COMA            reduce using rule 101 (valor -> booleanos .)
    PAR_D           reduce using rule 101 (valor -> booleanos .)
    MAS             reduce using rule 101 (valor -> booleanos .)
    VAR             reduce using rule 101 (valor -> booleanos .)
    VAL             reduce using rule 101 (valor -> booleanos .)
    VARIABLE        reduce using rule 101 (valor -> booleanos .)
    PRINTLN         reduce using rule 101 (valor -> booleanos .)
    PRINT           reduce using rule 101 (valor -> booleanos .)
    READLINE        reduce using rule 101 (valor -> booleanos .)
    WHILE           reduce using rule 101 (valor -> booleanos .)
    FOR             reduce using rule 101 (valor -> booleanos .)
    IF              reduce using rule 101 (valor -> booleanos .)
    INT             reduce using rule 101 (valor -> booleanos .)
    LONG            reduce using rule 101 (valor -> booleanos .)
    FLOAT           reduce using rule 101 (valor -> booleanos .)
    DOUBLE          reduce using rule 101 (valor -> booleanos .)
    LLAVE_D         reduce using rule 101 (valor -> booleanos .)
    RETURN          reduce using rule 101 (valor -> booleanos .)
    CASE            reduce using rule 101 (valor -> booleanos .)


state 70

    (106) numeros -> INT .

    COMA            reduce using rule 106 (numeros -> INT .)
    PAR_D           reduce using rule 106 (numeros -> INT .)
    MAS             reduce using rule 106 (numeros -> INT .)
    IGUAL_COMPARACION reduce using rule 106 (numeros -> INT .)
    DIFERENTE       reduce using rule 106 (numeros -> INT .)
    MAYOR           reduce using rule 106 (numeros -> INT .)
    MENOR           reduce using rule 106 (numeros -> INT .)
    MENOS           reduce using rule 106 (numeros -> INT .)
    MULTIPLICACION  reduce using rule 106 (numeros -> INT .)
    DIVISION        reduce using rule 106 (numeros -> INT .)
    MOD             reduce using rule 106 (numeros -> INT .)
    AND             reduce using rule 106 (numeros -> INT .)
    OR              reduce using rule 106 (numeros -> INT .)
    NOT             reduce using rule 106 (numeros -> INT .)
    VAR             reduce using rule 106 (numeros -> INT .)
    VAL             reduce using rule 106 (numeros -> INT .)
    VARIABLE        reduce using rule 106 (numeros -> INT .)
    PRINTLN         reduce using rule 106 (numeros -> INT .)
    PRINT           reduce using rule 106 (numeros -> INT .)
    READLINE        reduce using rule 106 (numeros -> INT .)
    WHILE           reduce using rule 106 (numeros -> INT .)
    FOR             reduce using rule 106 (numeros -> INT .)
    IF              reduce using rule 106 (numeros -> INT .)
    INT             reduce using rule 106 (numeros -> INT .)
    LONG            reduce using rule 106 (numeros -> INT .)
    FLOAT           reduce using rule 106 (numeros -> INT .)
    DOUBLE          reduce using rule 106 (numeros -> INT .)
    LLAVE_D         reduce using rule 106 (numeros -> INT .)
    DEF             reduce using rule 106 (numeros -> INT .)
    $end            reduce using rule 106 (numeros -> INT .)
    RETURN          reduce using rule 106 (numeros -> INT .)
    CASE            reduce using rule 106 (numeros -> INT .)


state 71

    (107) numeros -> LONG .

    COMA            reduce using rule 107 (numeros -> LONG .)
    PAR_D           reduce using rule 107 (numeros -> LONG .)
    MAS             reduce using rule 107 (numeros -> LONG .)
    IGUAL_COMPARACION reduce using rule 107 (numeros -> LONG .)
    DIFERENTE       reduce using rule 107 (numeros -> LONG .)
    MAYOR           reduce using rule 107 (numeros -> LONG .)
    MENOR           reduce using rule 107 (numeros -> LONG .)
    MENOS           reduce using rule 107 (numeros -> LONG .)
    MULTIPLICACION  reduce using rule 107 (numeros -> LONG .)
    DIVISION        reduce using rule 107 (numeros -> LONG .)
    MOD             reduce using rule 107 (numeros -> LONG .)
    AND             reduce using rule 107 (numeros -> LONG .)
    OR              reduce using rule 107 (numeros -> LONG .)
    NOT             reduce using rule 107 (numeros -> LONG .)
    VAR             reduce using rule 107 (numeros -> LONG .)
    VAL             reduce using rule 107 (numeros -> LONG .)
    VARIABLE        reduce using rule 107 (numeros -> LONG .)
    PRINTLN         reduce using rule 107 (numeros -> LONG .)
    PRINT           reduce using rule 107 (numeros -> LONG .)
    READLINE        reduce using rule 107 (numeros -> LONG .)
    WHILE           reduce using rule 107 (numeros -> LONG .)
    FOR             reduce using rule 107 (numeros -> LONG .)
    IF              reduce using rule 107 (numeros -> LONG .)
    INT             reduce using rule 107 (numeros -> LONG .)
    LONG            reduce using rule 107 (numeros -> LONG .)
    FLOAT           reduce using rule 107 (numeros -> LONG .)
    DOUBLE          reduce using rule 107 (numeros -> LONG .)
    LLAVE_D         reduce using rule 107 (numeros -> LONG .)
    DEF             reduce using rule 107 (numeros -> LONG .)
    $end            reduce using rule 107 (numeros -> LONG .)
    RETURN          reduce using rule 107 (numeros -> LONG .)
    CASE            reduce using rule 107 (numeros -> LONG .)


state 72

    (108) numeros -> FLOAT .

    COMA            reduce using rule 108 (numeros -> FLOAT .)
    PAR_D           reduce using rule 108 (numeros -> FLOAT .)
    MAS             reduce using rule 108 (numeros -> FLOAT .)
    IGUAL_COMPARACION reduce using rule 108 (numeros -> FLOAT .)
    DIFERENTE       reduce using rule 108 (numeros -> FLOAT .)
    MAYOR           reduce using rule 108 (numeros -> FLOAT .)
    MENOR           reduce using rule 108 (numeros -> FLOAT .)
    MENOS           reduce using rule 108 (numeros -> FLOAT .)
    MULTIPLICACION  reduce using rule 108 (numeros -> FLOAT .)
    DIVISION        reduce using rule 108 (numeros -> FLOAT .)
    MOD             reduce using rule 108 (numeros -> FLOAT .)
    AND             reduce using rule 108 (numeros -> FLOAT .)
    OR              reduce using rule 108 (numeros -> FLOAT .)
    NOT             reduce using rule 108 (numeros -> FLOAT .)
    VAR             reduce using rule 108 (numeros -> FLOAT .)
    VAL             reduce using rule 108 (numeros -> FLOAT .)
    VARIABLE        reduce using rule 108 (numeros -> FLOAT .)
    PRINTLN         reduce using rule 108 (numeros -> FLOAT .)
    PRINT           reduce using rule 108 (numeros -> FLOAT .)
    READLINE        reduce using rule 108 (numeros -> FLOAT .)
    WHILE           reduce using rule 108 (numeros -> FLOAT .)
    FOR             reduce using rule 108 (numeros -> FLOAT .)
    IF              reduce using rule 108 (numeros -> FLOAT .)
    INT             reduce using rule 108 (numeros -> FLOAT .)
    LONG            reduce using rule 108 (numeros -> FLOAT .)
    FLOAT           reduce using rule 108 (numeros -> FLOAT .)
    DOUBLE          reduce using rule 108 (numeros -> FLOAT .)
    LLAVE_D         reduce using rule 108 (numeros -> FLOAT .)
    DEF             reduce using rule 108 (numeros -> FLOAT .)
    $end            reduce using rule 108 (numeros -> FLOAT .)
    RETURN          reduce using rule 108 (numeros -> FLOAT .)
    CASE            reduce using rule 108 (numeros -> FLOAT .)


state 73

    (109) numeros -> DOUBLE .

    COMA            reduce using rule 109 (numeros -> DOUBLE .)
    PAR_D           reduce using rule 109 (numeros -> DOUBLE .)
    MAS             reduce using rule 109 (numeros -> DOUBLE .)
    IGUAL_COMPARACION reduce using rule 109 (numeros -> DOUBLE .)
    DIFERENTE       reduce using rule 109 (numeros -> DOUBLE .)
    MAYOR           reduce using rule 109 (numeros -> DOUBLE .)
    MENOR           reduce using rule 109 (numeros -> DOUBLE .)
    MENOS           reduce using rule 109 (numeros -> DOUBLE .)
    MULTIPLICACION  reduce using rule 109 (numeros -> DOUBLE .)
    DIVISION        reduce using rule 109 (numeros -> DOUBLE .)
    MOD             reduce using rule 109 (numeros -> DOUBLE .)
    AND             reduce using rule 109 (numeros -> DOUBLE .)
    OR              reduce using rule 109 (numeros -> DOUBLE .)
    NOT             reduce using rule 109 (numeros -> DOUBLE .)
    VAR             reduce using rule 109 (numeros -> DOUBLE .)
    VAL             reduce using rule 109 (numeros -> DOUBLE .)
    VARIABLE        reduce using rule 109 (numeros -> DOUBLE .)
    PRINTLN         reduce using rule 109 (numeros -> DOUBLE .)
    PRINT           reduce using rule 109 (numeros -> DOUBLE .)
    READLINE        reduce using rule 109 (numeros -> DOUBLE .)
    WHILE           reduce using rule 109 (numeros -> DOUBLE .)
    FOR             reduce using rule 109 (numeros -> DOUBLE .)
    IF              reduce using rule 109 (numeros -> DOUBLE .)
    INT             reduce using rule 109 (numeros -> DOUBLE .)
    LONG            reduce using rule 109 (numeros -> DOUBLE .)
    FLOAT           reduce using rule 109 (numeros -> DOUBLE .)
    DOUBLE          reduce using rule 109 (numeros -> DOUBLE .)
    LLAVE_D         reduce using rule 109 (numeros -> DOUBLE .)
    DEF             reduce using rule 109 (numeros -> DOUBLE .)
    $end            reduce using rule 109 (numeros -> DOUBLE .)
    RETURN          reduce using rule 109 (numeros -> DOUBLE .)
    CASE            reduce using rule 109 (numeros -> DOUBLE .)


state 74

    (104) booleanos -> TRUE .

    COMA            reduce using rule 104 (booleanos -> TRUE .)
    PAR_D           reduce using rule 104 (booleanos -> TRUE .)
    MAS             reduce using rule 104 (booleanos -> TRUE .)
    IGUAL_COMPARACION reduce using rule 104 (booleanos -> TRUE .)
    DIFERENTE       reduce using rule 104 (booleanos -> TRUE .)
    MAYOR           reduce using rule 104 (booleanos -> TRUE .)
    MENOR           reduce using rule 104 (booleanos -> TRUE .)
    AND             reduce using rule 104 (booleanos -> TRUE .)
    OR              reduce using rule 104 (booleanos -> TRUE .)
    NOT             reduce using rule 104 (booleanos -> TRUE .)
    DEF             reduce using rule 104 (booleanos -> TRUE .)
    VARIABLE        reduce using rule 104 (booleanos -> TRUE .)
    PRINTLN         reduce using rule 104 (booleanos -> TRUE .)
    PRINT           reduce using rule 104 (booleanos -> TRUE .)
    READLINE        reduce using rule 104 (booleanos -> TRUE .)
    VAR             reduce using rule 104 (booleanos -> TRUE .)
    VAL             reduce using rule 104 (booleanos -> TRUE .)
    WHILE           reduce using rule 104 (booleanos -> TRUE .)
    FOR             reduce using rule 104 (booleanos -> TRUE .)
    IF              reduce using rule 104 (booleanos -> TRUE .)
    $end            reduce using rule 104 (booleanos -> TRUE .)
    LLAVE_D         reduce using rule 104 (booleanos -> TRUE .)
    INT             reduce using rule 104 (booleanos -> TRUE .)
    LONG            reduce using rule 104 (booleanos -> TRUE .)
    FLOAT           reduce using rule 104 (booleanos -> TRUE .)
    DOUBLE          reduce using rule 104 (booleanos -> TRUE .)
    RETURN          reduce using rule 104 (booleanos -> TRUE .)
    CASE            reduce using rule 104 (booleanos -> TRUE .)
    FUNCION_FLECHA  reduce using rule 104 (booleanos -> TRUE .)


state 75

    (105) booleanos -> FLASE .

    COMA            reduce using rule 105 (booleanos -> FLASE .)
    PAR_D           reduce using rule 105 (booleanos -> FLASE .)
    MAS             reduce using rule 105 (booleanos -> FLASE .)
    IGUAL_COMPARACION reduce using rule 105 (booleanos -> FLASE .)
    DIFERENTE       reduce using rule 105 (booleanos -> FLASE .)
    MAYOR           reduce using rule 105 (booleanos -> FLASE .)
    MENOR           reduce using rule 105 (booleanos -> FLASE .)
    AND             reduce using rule 105 (booleanos -> FLASE .)
    OR              reduce using rule 105 (booleanos -> FLASE .)
    NOT             reduce using rule 105 (booleanos -> FLASE .)
    DEF             reduce using rule 105 (booleanos -> FLASE .)
    VARIABLE        reduce using rule 105 (booleanos -> FLASE .)
    PRINTLN         reduce using rule 105 (booleanos -> FLASE .)
    PRINT           reduce using rule 105 (booleanos -> FLASE .)
    READLINE        reduce using rule 105 (booleanos -> FLASE .)
    VAR             reduce using rule 105 (booleanos -> FLASE .)
    VAL             reduce using rule 105 (booleanos -> FLASE .)
    WHILE           reduce using rule 105 (booleanos -> FLASE .)
    FOR             reduce using rule 105 (booleanos -> FLASE .)
    IF              reduce using rule 105 (booleanos -> FLASE .)
    $end            reduce using rule 105 (booleanos -> FLASE .)
    LLAVE_D         reduce using rule 105 (booleanos -> FLASE .)
    INT             reduce using rule 105 (booleanos -> FLASE .)
    LONG            reduce using rule 105 (booleanos -> FLASE .)
    FLOAT           reduce using rule 105 (booleanos -> FLASE .)
    DOUBLE          reduce using rule 105 (booleanos -> FLASE .)
    RETURN          reduce using rule 105 (booleanos -> FLASE .)
    CASE            reduce using rule 105 (booleanos -> FLASE .)
    FUNCION_FLECHA  reduce using rule 105 (booleanos -> FLASE .)


state 76

    (2) inicio -> IMPORT io inicio .

    $end            reduce using rule 2 (inicio -> IMPORT io inicio .)


state 77

    (4) io -> VARIABLE PUNTO . VARIABLE PUNTO VARIABLE PUNTO READLINE

    VARIABLE        shift and go to state 129


state 78

    (221) else -> elseif . else
    (220) else -> . ELSE LLAVE_I contenido LLAVE_D
    (221) else -> . elseif else
    (218) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (219) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif

    ELSE            shift and go to state 80

    elseif                         shift and go to state 78
    else                           shift and go to state 79

state 79

    (221) else -> elseif else .

    ELSE            reduce using rule 221 (else -> elseif else .)
    DEF             reduce using rule 221 (else -> elseif else .)
    VARIABLE        reduce using rule 221 (else -> elseif else .)
    PRINTLN         reduce using rule 221 (else -> elseif else .)
    PRINT           reduce using rule 221 (else -> elseif else .)
    READLINE        reduce using rule 221 (else -> elseif else .)
    VAR             reduce using rule 221 (else -> elseif else .)
    VAL             reduce using rule 221 (else -> elseif else .)
    WHILE           reduce using rule 221 (else -> elseif else .)
    FOR             reduce using rule 221 (else -> elseif else .)
    IF              reduce using rule 221 (else -> elseif else .)
    $end            reduce using rule 221 (else -> elseif else .)
    LLAVE_D         reduce using rule 221 (else -> elseif else .)
    INT             reduce using rule 221 (else -> elseif else .)
    LONG            reduce using rule 221 (else -> elseif else .)
    FLOAT           reduce using rule 221 (else -> elseif else .)
    DOUBLE          reduce using rule 221 (else -> elseif else .)
    RETURN          reduce using rule 221 (else -> elseif else .)


state 80

    (220) else -> ELSE . LLAVE_I contenido LLAVE_D
    (218) elseif -> ELSE . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (219) elseif -> ELSE . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif

    LLAVE_I         shift and go to state 82
    IF              shift and go to state 81


state 81

    (218) elseif -> ELSE IF . PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (219) elseif -> ELSE IF . PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif

    PAR_I           shift and go to state 130


state 82

    (220) else -> ELSE LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 131
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 83

    (110) funcion -> DEF VARIABLE parametro . IGUAL LLAVE_I contenido LLAVE_D
    (111) funcion -> DEF VARIABLE parametro . LLAVE_I contenido LLAVE_D
    (118) funcion -> DEF VARIABLE parametro . dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (119) funcion -> DEF VARIABLE parametro . dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (120) funcion -> DEF VARIABLE parametro . dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (121) funcion -> DEF VARIABLE parametro . dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (122) funcion -> DEF VARIABLE parametro . dectipo IGUAL LLAVE_I RETURN valor LLAVE_D
    (123) funcion -> DEF VARIABLE parametro . dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (124) funcion -> DEF VARIABLE parametro . dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (125) funcion -> DEF VARIABLE parametro . dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D
    (126) funcion -> DEF VARIABLE parametro . dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (127) funcion -> DEF VARIABLE parametro . dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (128) funcion -> DEF VARIABLE parametro . dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (129) dectipo -> . DOBLE_PUNTO tipo
    (130) dectipoTupla -> . DOBLE_PUNTO PAR_I tipos PAR_D

    IGUAL           shift and go to state 144
    LLAVE_I         shift and go to state 145
    DOBLE_PUNTO     shift and go to state 148

    dectipo                        shift and go to state 146
    dectipoTupla                   shift and go to state 147

state 84

    (114) parametro -> parametros .

    IGUAL           reduce using rule 114 (parametro -> parametros .)
    LLAVE_I         reduce using rule 114 (parametro -> parametros .)
    DOBLE_PUNTO     reduce using rule 114 (parametro -> parametros .)


state 85

    (115) parametro -> PAR_I . PAR_D
    (116) parametros -> PAR_I . declaracion PAR_D
    (117) parametros -> PAR_I . declaracion PAR_D parametros
    (112) declaracion -> . VARIABLE DOBLE_PUNTO tipo
    (113) declaracion -> . VARIABLE DOBLE_PUNTO tipo IGUAL valor

    PAR_D           shift and go to state 149
    VARIABLE        shift and go to state 151

    declaracion                    shift and go to state 150

state 86

    (135) impresion -> PRINTLN PAR_I valorI . PAR_D

    PAR_D           shift and go to state 152


state 87

    (137) valorI -> valor . MAS valorI
    (138) valorI -> valor .

    MAS             shift and go to state 153
    PAR_D           reduce using rule 138 (valorI -> valor .)


state 88

    (136) impresion -> PRINT PAR_I valorI . PAR_D

    PAR_D           shift and go to state 154


state 89

    (139) entrada -> READLINE PAR_I PAR_D .

    $end            reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)
    LLAVE_D         reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)
    VAR             reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)
    VAL             reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)
    VARIABLE        reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)
    PRINTLN         reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)
    PRINT           reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)
    READLINE        reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)
    WHILE           reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)
    FOR             reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)
    IF              reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)
    INT             reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)
    LONG            reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)
    FLOAT           reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)
    DOUBLE          reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)
    PUNTO           reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)
    DEF             reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)
    RETURN          reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)
    CASE            reduce using rule 139 (entrada -> READLINE PAR_I PAR_D .)


state 90

    (45) asignacion -> VAR VARIABLE IGUAL . VARIABLE
    (47) asignacion -> VAR VARIABLE IGUAL . aritmetica
    (49) asignacion -> VAR VARIABLE IGUAL . returnfun
    (167) asignacion -> VAR VARIABLE IGUAL . tuple
    (298) asignacionLong -> VAR VARIABLE IGUAL . longvalues
    (292) asignacionInt -> VAR VARIABLE IGUAL . intvalues
    (305) asignacionFloat -> VAR VARIABLE IGUAL . floatvalues
    (312) asignacionDouble -> VAR VARIABLE IGUAL . doublevalues
    (66) asignacionString -> VAR VARIABLE IGUAL . STRING
    (72) asignacionChar -> VAR VARIABLE IGUAL . CHAR
    (78) asignacionBoolean -> VAR VARIABLE IGUAL . booleanos
    (155) array -> VAR VARIABLE IGUAL . ARRAYCLASS PAR_I valores PAR_D
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (145) returnfun -> . returnCastable
    (146) returnfun -> . castingcall
    (166) tuple -> . PAR_I valores PAR_D
    (302) longvalues -> . INT
    (303) longvalues -> . intvalues
    (304) longvalues -> . stringCastLong
    (296) intvalues -> . INT
    (297) intvalues -> . stringCastInt
    (309) floatvalues -> . FLOAT
    (310) floatvalues -> . longvalues
    (311) floatvalues -> . stringCastFloat
    (316) doublevalues -> . DOUBLE
    (317) doublevalues -> . floatvalues
    (318) doublevalues -> . stringCastDouble
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (147) returnCastable -> . entrada
    (148) returnCastable -> . funcall
    (149) castingcall -> . returnCastable PUNTO castingfun
    (150) castingcall -> . VARIABLE PUNTO castingfun
    (320) stringCastLong -> . STRING PUNTO TO_LONG
    (319) stringCastInt -> . STRING PUNTO TO_INT
    (321) stringCastFloat -> . STRING PUNTO TO_FLOAT
    (322) stringCastDouble -> . STRING PUNTO TO_DOUBLE
    (139) entrada -> . READLINE PAR_I PAR_D
    (140) funcall -> . VARIABLE varparen

    VARIABLE        shift and go to state 155
    STRING          shift and go to state 163
    CHAR            shift and go to state 164
    ARRAYCLASS      shift and go to state 166
    PAR_I           shift and go to state 167
    INT             shift and go to state 170
    FLOAT           shift and go to state 173
    DOUBLE          shift and go to state 175
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    LONG            shift and go to state 71
    READLINE        shift and go to state 18

    aritmetica                     shift and go to state 156
    returnfun                      shift and go to state 157
    tuple                          shift and go to state 158
    longvalues                     shift and go to state 159
    intvalues                      shift and go to state 160
    floatvalues                    shift and go to state 161
    doublevalues                   shift and go to state 162
    booleanos                      shift and go to state 165
    numeros                        shift and go to state 143
    returnCastable                 shift and go to state 168
    castingcall                    shift and go to state 169
    stringCastLong                 shift and go to state 171
    stringCastInt                  shift and go to state 172
    stringCastFloat                shift and go to state 174
    stringCastDouble               shift and go to state 176
    entrada                        shift and go to state 177
    funcall                        shift and go to state 178

state 91

    (270) asignacion -> VAR VARIABLE DOBLE_PUNTO . dectupla
    (60) asignacionLong -> VAR VARIABLE DOBLE_PUNTO . LONGCLASS IGUAL VARIABLE
    (299) asignacionLong -> VAR VARIABLE DOBLE_PUNTO . LONGCLASS IGUAL longvalues
    (293) asignacionInt -> VAR VARIABLE DOBLE_PUNTO . INTCLASS IGUAL intvalues
    (62) asignacionFloat -> VAR VARIABLE DOBLE_PUNTO . FLOATCLASS IGUAL VARIABLE
    (306) asignacionFloat -> VAR VARIABLE DOBLE_PUNTO . FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> VAR VARIABLE DOBLE_PUNTO . DOUBLECLASS IGUAL VARIABLE
    (313) asignacionDouble -> VAR VARIABLE DOBLE_PUNTO . DOUBLECLASS IGUAL doublevalues
    (67) asignacionString -> VAR VARIABLE DOBLE_PUNTO . STRINGCLASS IGUAL STRING
    (70) asignacionString -> VAR VARIABLE DOBLE_PUNTO . STRINGCLASS IGUAL VARIABLE
    (73) asignacionChar -> VAR VARIABLE DOBLE_PUNTO . CHARCLASS IGUAL CHAR
    (76) asignacionChar -> VAR VARIABLE DOBLE_PUNTO . CHARCLASS IGUAL VARIABLE
    (79) asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO . BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO . BOOLCLASS IGUAL VARIABLE
    (156) array -> VAR VARIABLE DOBLE_PUNTO . ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (264) arrayInt -> VAR VARIABLE DOBLE_PUNTO . ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> VAR VARIABLE DOBLE_PUNTO . ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D
    (272) dectupla -> . PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D
    (273) dectupla -> . PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D
    (274) dectupla -> . PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D
    (275) dectupla -> . PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D
    (276) dectupla -> . PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D
    (277) dectupla -> . PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D
    (278) dectupla -> . PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D
    (279) dectupla -> . PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D
    (280) dectupla -> . PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D
    (281) dectupla -> . PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D
    (282) dectupla -> . PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D
    (283) dectupla -> . PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D
    (284) dectupla -> . PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D
    (285) dectupla -> . PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D
    (286) dectupla -> . PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D
    (287) dectupla -> . PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D
    (288) dectupla -> . PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D
    (289) dectupla -> . PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D
    (290) dectupla -> . PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D
    (291) dectupla -> . PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D

    LONGCLASS       shift and go to state 180
    INTCLASS        shift and go to state 181
    FLOATCLASS      shift and go to state 182
    DOUBLECLASS     shift and go to state 183
    STRINGCLASS     shift and go to state 184
    CHARCLASS       shift and go to state 185
    BOOLCLASS       shift and go to state 186
    ARRAYCLASS      shift and go to state 187
    PAR_I           shift and go to state 188

    dectupla                       shift and go to state 179

state 92

    (46) asignacion -> VAL VARIABLE IGUAL . VARIABLE
    (48) asignacion -> VAL VARIABLE IGUAL . aritmetica
    (50) asignacion -> VAL VARIABLE IGUAL . returnfun
    (168) asignacion -> VAL VARIABLE IGUAL . tuple
    (300) asignacionLong -> VAL VARIABLE IGUAL . longvalues
    (294) asignacionInt -> VAL VARIABLE IGUAL . intvalues
    (307) asignacionFloat -> VAL VARIABLE IGUAL . floatvalues
    (314) asignacionDouble -> VAL VARIABLE IGUAL . doublevalues
    (68) asignacionString -> VAL VARIABLE IGUAL . STRING
    (74) asignacionChar -> VAL VARIABLE IGUAL . CHAR
    (80) asignacionBoolean -> VAL VARIABLE IGUAL . booleanos
    (157) array -> VAL VARIABLE IGUAL . ARRAYCLASS PAR_I valores PAR_D
    (161) list -> VAL VARIABLE IGUAL . LISTCLASS PAR_I valores PAR_D
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (145) returnfun -> . returnCastable
    (146) returnfun -> . castingcall
    (166) tuple -> . PAR_I valores PAR_D
    (302) longvalues -> . INT
    (303) longvalues -> . intvalues
    (304) longvalues -> . stringCastLong
    (296) intvalues -> . INT
    (297) intvalues -> . stringCastInt
    (309) floatvalues -> . FLOAT
    (310) floatvalues -> . longvalues
    (311) floatvalues -> . stringCastFloat
    (316) doublevalues -> . DOUBLE
    (317) doublevalues -> . floatvalues
    (318) doublevalues -> . stringCastDouble
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (147) returnCastable -> . entrada
    (148) returnCastable -> . funcall
    (149) castingcall -> . returnCastable PUNTO castingfun
    (150) castingcall -> . VARIABLE PUNTO castingfun
    (320) stringCastLong -> . STRING PUNTO TO_LONG
    (319) stringCastInt -> . STRING PUNTO TO_INT
    (321) stringCastFloat -> . STRING PUNTO TO_FLOAT
    (322) stringCastDouble -> . STRING PUNTO TO_DOUBLE
    (139) entrada -> . READLINE PAR_I PAR_D
    (140) funcall -> . VARIABLE varparen

    VARIABLE        shift and go to state 189
    STRING          shift and go to state 197
    CHAR            shift and go to state 198
    ARRAYCLASS      shift and go to state 200
    LISTCLASS       shift and go to state 201
    PAR_I           shift and go to state 167
    INT             shift and go to state 170
    FLOAT           shift and go to state 173
    DOUBLE          shift and go to state 175
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    LONG            shift and go to state 71
    READLINE        shift and go to state 18

    aritmetica                     shift and go to state 190
    returnfun                      shift and go to state 191
    tuple                          shift and go to state 192
    longvalues                     shift and go to state 193
    intvalues                      shift and go to state 194
    floatvalues                    shift and go to state 195
    doublevalues                   shift and go to state 196
    booleanos                      shift and go to state 199
    numeros                        shift and go to state 143
    returnCastable                 shift and go to state 168
    castingcall                    shift and go to state 169
    stringCastLong                 shift and go to state 171
    stringCastInt                  shift and go to state 172
    stringCastFloat                shift and go to state 174
    stringCastDouble               shift and go to state 176
    entrada                        shift and go to state 177
    funcall                        shift and go to state 178

state 93

    (271) asignacion -> VAL VARIABLE DOBLE_PUNTO . dectupla
    (61) asignacionLong -> VAL VARIABLE DOBLE_PUNTO . LONGCLASS IGUAL VARIABLE
    (301) asignacionLong -> VAL VARIABLE DOBLE_PUNTO . LONGCLASS IGUAL longvalues
    (295) asignacionInt -> VAL VARIABLE DOBLE_PUNTO . INTCLASS IGUAL intvalues
    (63) asignacionFloat -> VAL VARIABLE DOBLE_PUNTO . FLOATCLASS IGUAL VARIABLE
    (308) asignacionFloat -> VAL VARIABLE DOBLE_PUNTO . FLOATCLASS IGUAL floatvalues
    (65) asignacionDouble -> VAL VARIABLE DOBLE_PUNTO . DOUBLECLASS IGUAL VARIABLE
    (315) asignacionDouble -> VAL VARIABLE DOBLE_PUNTO . DOUBLECLASS IGUAL doublevalues
    (69) asignacionString -> VAL VARIABLE DOBLE_PUNTO . STRINGCLASS IGUAL STRING
    (71) asignacionString -> VAL VARIABLE DOBLE_PUNTO . STRINGCLASS IGUAL VARIABLE
    (75) asignacionChar -> VAL VARIABLE DOBLE_PUNTO . CHARCLASS IGUAL CHAR
    (77) asignacionChar -> VAL VARIABLE DOBLE_PUNTO . CHARCLASS IGUAL VARIABLE
    (81) asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO . BOOLCLASS IGUAL booleanos
    (83) asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO . BOOLCLASS IGUAL VARIABLE
    (158) array -> VAL VARIABLE DOBLE_PUNTO . ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (162) list -> VAL VARIABLE DOBLE_PUNTO . LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> VAL VARIABLE DOBLE_PUNTO . LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (272) dectupla -> . PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D
    (273) dectupla -> . PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D
    (274) dectupla -> . PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D
    (275) dectupla -> . PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D
    (276) dectupla -> . PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D
    (277) dectupla -> . PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D
    (278) dectupla -> . PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D
    (279) dectupla -> . PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D
    (280) dectupla -> . PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D
    (281) dectupla -> . PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D
    (282) dectupla -> . PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D
    (283) dectupla -> . PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D
    (284) dectupla -> . PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D
    (285) dectupla -> . PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D
    (286) dectupla -> . PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D
    (287) dectupla -> . PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D
    (288) dectupla -> . PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D
    (289) dectupla -> . PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D
    (290) dectupla -> . PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D
    (291) dectupla -> . PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D

    LONGCLASS       shift and go to state 203
    INTCLASS        shift and go to state 204
    FLOATCLASS      shift and go to state 205
    DOUBLECLASS     shift and go to state 206
    STRINGCLASS     shift and go to state 207
    CHARCLASS       shift and go to state 208
    BOOLCLASS       shift and go to state 209
    ARRAYCLASS      shift and go to state 210
    LISTCLASS       shift and go to state 211
    PAR_I           shift and go to state 188

    dectupla                       shift and go to state 202

state 94

    (169) while -> WHILE PAR_I condicional . PAR_D LLAVE_I contenido LLAVE_D

    PAR_D           shift and go to state 212


state 95

    (222) condicional -> valorC . logicos condicional
    (223) condicional -> valorC .
    (230) logicos -> . AND
    (231) logicos -> . OR
    (232) logicos -> . NOT

    PAR_D           reduce using rule 223 (condicional -> valorC .)
    AND             shift and go to state 214
    OR              shift and go to state 215
    NOT             shift and go to state 216

    logicos                        shift and go to state 213

state 96

    (224) valorC -> VARIABLE .
    (240) relacional -> VARIABLE . comparacion numeros
    (242) relacional -> VARIABLE . comparacion booleanos
    (244) relacional -> VARIABLE . comparacion STRING
    (246) relacional -> VARIABLE . comparacion CHAR
    (248) relacional -> VARIABLE . comparacion VARIABLE
    (254) aritmetica -> VARIABLE . aritmeticos numeros
    (256) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (249) comparacion -> . IGUAL_COMPARACION
    (250) comparacion -> . DIFERENTE
    (251) comparacion -> . MAYOR
    (252) comparacion -> . MENOR
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD

    AND             reduce using rule 224 (valorC -> VARIABLE .)
    OR              reduce using rule 224 (valorC -> VARIABLE .)
    NOT             reduce using rule 224 (valorC -> VARIABLE .)
    PAR_D           reduce using rule 224 (valorC -> VARIABLE .)
    IGUAL_COMPARACION shift and go to state 219
    DIFERENTE       shift and go to state 220
    MAYOR           shift and go to state 221
    MENOR           shift and go to state 222
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    comparacion                    shift and go to state 217
    aritmeticos                    shift and go to state 218

state 97

    (225) valorC -> booleanos .
    (237) relacional -> booleanos . comparacion booleanos
    (243) relacional -> booleanos . comparacion VARIABLE
    (249) comparacion -> . IGUAL_COMPARACION
    (250) comparacion -> . DIFERENTE
    (251) comparacion -> . MAYOR
    (252) comparacion -> . MENOR

    AND             reduce using rule 225 (valorC -> booleanos .)
    OR              reduce using rule 225 (valorC -> booleanos .)
    NOT             reduce using rule 225 (valorC -> booleanos .)
    PAR_D           reduce using rule 225 (valorC -> booleanos .)
    IGUAL_COMPARACION shift and go to state 219
    DIFERENTE       shift and go to state 220
    MAYOR           shift and go to state 221
    MENOR           shift and go to state 222

    comparacion                    shift and go to state 228

state 98

    (226) valorC -> relacional .

    AND             reduce using rule 226 (valorC -> relacional .)
    OR              reduce using rule 226 (valorC -> relacional .)
    NOT             reduce using rule 226 (valorC -> relacional .)
    PAR_D           reduce using rule 226 (valorC -> relacional .)


state 99

    (227) valorC -> NOT . VARIABLE
    (228) valorC -> NOT . booleanos
    (229) valorC -> NOT . relacional
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE
    (233) relacional -> . numeros comparacion numeros
    (234) relacional -> . aritmetica comparacion aritmetica
    (235) relacional -> . aritmetica comparacion numeros
    (236) relacional -> . numeros comparacion aritmetica
    (237) relacional -> . booleanos comparacion booleanos
    (238) relacional -> . STRING comparacion STRING
    (239) relacional -> . CHAR comparacion CHAR
    (240) relacional -> . VARIABLE comparacion numeros
    (241) relacional -> . numeros comparacion VARIABLE
    (242) relacional -> . VARIABLE comparacion booleanos
    (243) relacional -> . booleanos comparacion VARIABLE
    (244) relacional -> . VARIABLE comparacion STRING
    (245) relacional -> . STRING comparacion VARIABLE
    (246) relacional -> . VARIABLE comparacion CHAR
    (247) relacional -> . CHAR comparacion VARIABLE
    (248) relacional -> . VARIABLE comparacion VARIABLE
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE

    VARIABLE        shift and go to state 229
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    STRING          shift and go to state 102
    CHAR            shift and go to state 103
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    booleanos                      shift and go to state 230
    relacional                     shift and go to state 231
    numeros                        shift and go to state 100
    aritmetica                     shift and go to state 101

state 100

    (233) relacional -> numeros . comparacion numeros
    (236) relacional -> numeros . comparacion aritmetica
    (241) relacional -> numeros . comparacion VARIABLE
    (253) aritmetica -> numeros . aritmeticos numeros
    (255) aritmetica -> numeros . aritmeticos VARIABLE
    (249) comparacion -> . IGUAL_COMPARACION
    (250) comparacion -> . DIFERENTE
    (251) comparacion -> . MAYOR
    (252) comparacion -> . MENOR
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD

    IGUAL_COMPARACION shift and go to state 219
    DIFERENTE       shift and go to state 220
    MAYOR           shift and go to state 221
    MENOR           shift and go to state 222
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    comparacion                    shift and go to state 232
    aritmeticos                    shift and go to state 233

state 101

    (234) relacional -> aritmetica . comparacion aritmetica
    (235) relacional -> aritmetica . comparacion numeros
    (257) aritmetica -> aritmetica . aritmeticos numeros
    (258) aritmetica -> aritmetica . aritmeticos VARIABLE
    (249) comparacion -> . IGUAL_COMPARACION
    (250) comparacion -> . DIFERENTE
    (251) comparacion -> . MAYOR
    (252) comparacion -> . MENOR
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD

    IGUAL_COMPARACION shift and go to state 219
    DIFERENTE       shift and go to state 220
    MAYOR           shift and go to state 221
    MENOR           shift and go to state 222
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    comparacion                    shift and go to state 234
    aritmeticos                    shift and go to state 235

state 102

    (238) relacional -> STRING . comparacion STRING
    (245) relacional -> STRING . comparacion VARIABLE
    (249) comparacion -> . IGUAL_COMPARACION
    (250) comparacion -> . DIFERENTE
    (251) comparacion -> . MAYOR
    (252) comparacion -> . MENOR

    IGUAL_COMPARACION shift and go to state 219
    DIFERENTE       shift and go to state 220
    MAYOR           shift and go to state 221
    MENOR           shift and go to state 222

    comparacion                    shift and go to state 236

state 103

    (239) relacional -> CHAR . comparacion CHAR
    (247) relacional -> CHAR . comparacion VARIABLE
    (249) comparacion -> . IGUAL_COMPARACION
    (250) comparacion -> . DIFERENTE
    (251) comparacion -> . MAYOR
    (252) comparacion -> . MENOR

    IGUAL_COMPARACION shift and go to state 219
    DIFERENTE       shift and go to state 220
    MAYOR           shift and go to state 221
    MENOR           shift and go to state 222

    comparacion                    shift and go to state 237

state 104

    (170) for -> FOR PAR_I VAR . VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> FOR PAR_I VAR . VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> FOR PAR_I VAR . VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D

    VARIABLE        shift and go to state 238


state 105

    (171) for -> FOR PAR_I VARIABLE . ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> FOR PAR_I VARIABLE . ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> FOR PAR_I VARIABLE . ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D

    ITERATOR        shift and go to state 239


state 106

    (215) if -> IF PAR_I condicional . PAR_D LLAVE_I contenido LLAVE_D

    PAR_D           shift and go to state 240


state 107

    (1) inicio -> OBJECT VARIABLE LLAVE_I cuerpo . LLAVE_D

    LLAVE_D         shift and go to state 241


state 108

    (143) varparen -> varparen PAR_I valores . PAR_D

    PAR_D           shift and go to state 242


state 109

    (144) varparen -> varparen PAR_I PAR_D .

    PAR_I           reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    $end            reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    LLAVE_D         reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    VAR             reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    VAL             reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    VARIABLE        reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    PRINTLN         reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    PRINT           reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    READLINE        reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    WHILE           reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    FOR             reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    IF              reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    INT             reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    LONG            reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    FLOAT           reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    DOUBLE          reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    RETURN          reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    PUNTO           reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    DEF             reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)
    CASE            reduce using rule 144 (varparen -> varparen PAR_I PAR_D .)


state 110

    (176) match -> VARIABLE MATCH LLAVE_I cases . LLAVE_D

    LLAVE_D         shift and go to state 243


state 111

    (177) cases -> casesInt .

    LLAVE_D         reduce using rule 177 (cases -> casesInt .)


state 112

    (178) cases -> casesLgn .

    LLAVE_D         reduce using rule 178 (cases -> casesLgn .)


state 113

    (179) cases -> casesFlt .

    LLAVE_D         reduce using rule 179 (cases -> casesFlt .)


state 114

    (180) cases -> casesDob .

    LLAVE_D         reduce using rule 180 (cases -> casesDob .)


state 115

    (181) cases -> casesStr .

    LLAVE_D         reduce using rule 181 (cases -> casesStr .)


state 116

    (182) cases -> casesChar .

    LLAVE_D         reduce using rule 182 (cases -> casesChar .)


state 117

    (183) cases -> casesBool .

    LLAVE_D         reduce using rule 183 (cases -> casesBool .)


state 118

    (185) casesInt -> caseInt .
    (186) casesInt -> caseInt . casesInt
    (187) casesInt -> caseInt . defcase
    (185) casesInt -> . caseInt
    (186) casesInt -> . caseInt casesInt
    (187) casesInt -> . caseInt defcase
    (212) defcase -> . CASE SUBGUION FUNCION_FLECHA codeBlock
    (184) caseInt -> . CASE INT FUNCION_FLECHA codeBlock

    LLAVE_D         reduce using rule 185 (casesInt -> caseInt .)
    CASE            shift and go to state 246

    caseInt                        shift and go to state 118
    casesInt                       shift and go to state 244
    defcase                        shift and go to state 245

state 119

    (189) casesLgn -> caseLgn .
    (190) casesLgn -> caseLgn . casesLgn
    (191) casesLgn -> caseLgn . defcase
    (189) casesLgn -> . caseLgn
    (190) casesLgn -> . caseLgn casesLgn
    (191) casesLgn -> . caseLgn defcase
    (212) defcase -> . CASE SUBGUION FUNCION_FLECHA codeBlock
    (188) caseLgn -> . CASE LONG FUNCION_FLECHA codeBlock

    LLAVE_D         reduce using rule 189 (casesLgn -> caseLgn .)
    CASE            shift and go to state 249

    caseLgn                        shift and go to state 119
    casesLgn                       shift and go to state 247
    defcase                        shift and go to state 248

state 120

    (193) casesFlt -> caseFlt .
    (194) casesFlt -> caseFlt . casesFlt
    (195) casesFlt -> caseFlt . defcase
    (193) casesFlt -> . caseFlt
    (194) casesFlt -> . caseFlt casesFlt
    (195) casesFlt -> . caseFlt defcase
    (212) defcase -> . CASE SUBGUION FUNCION_FLECHA codeBlock
    (192) caseFlt -> . CASE FLOAT FUNCION_FLECHA codeBlock

    LLAVE_D         reduce using rule 193 (casesFlt -> caseFlt .)
    CASE            shift and go to state 252

    caseFlt                        shift and go to state 120
    casesFlt                       shift and go to state 250
    defcase                        shift and go to state 251

state 121

    (197) casesDob -> caseDob .
    (198) casesDob -> caseDob . casesDob
    (199) casesDob -> caseDob . defcase
    (197) casesDob -> . caseDob
    (198) casesDob -> . caseDob casesDob
    (199) casesDob -> . caseDob defcase
    (212) defcase -> . CASE SUBGUION FUNCION_FLECHA codeBlock
    (196) caseDob -> . CASE DOUBLE FUNCION_FLECHA codeBlock

    LLAVE_D         reduce using rule 197 (casesDob -> caseDob .)
    CASE            shift and go to state 255

    caseDob                        shift and go to state 121
    casesDob                       shift and go to state 253
    defcase                        shift and go to state 254

state 122

    (201) casesStr -> caseStr .
    (202) casesStr -> caseStr . casesStr
    (203) casesStr -> caseStr . defcase
    (201) casesStr -> . caseStr
    (202) casesStr -> . caseStr casesStr
    (203) casesStr -> . caseStr defcase
    (212) defcase -> . CASE SUBGUION FUNCION_FLECHA codeBlock
    (200) caseStr -> . CASE STRING FUNCION_FLECHA codeBlock

    LLAVE_D         reduce using rule 201 (casesStr -> caseStr .)
    CASE            shift and go to state 258

    caseStr                        shift and go to state 122
    casesStr                       shift and go to state 256
    defcase                        shift and go to state 257

state 123

    (205) casesChar -> caseChar .
    (206) casesChar -> caseChar . casesChar
    (207) casesChar -> caseChar . defcase
    (205) casesChar -> . caseChar
    (206) casesChar -> . caseChar casesChar
    (207) casesChar -> . caseChar defcase
    (212) defcase -> . CASE SUBGUION FUNCION_FLECHA codeBlock
    (204) caseChar -> . CASE CHAR FUNCION_FLECHA codeBlock

    LLAVE_D         reduce using rule 205 (casesChar -> caseChar .)
    CASE            shift and go to state 261

    caseChar                       shift and go to state 123
    casesChar                      shift and go to state 259
    defcase                        shift and go to state 260

state 124

    (209) casesBool -> caseBool .
    (210) casesBool -> caseBool . casesBool
    (211) casesBool -> caseBool . defcase
    (209) casesBool -> . caseBool
    (210) casesBool -> . caseBool casesBool
    (211) casesBool -> . caseBool defcase
    (212) defcase -> . CASE SUBGUION FUNCION_FLECHA codeBlock
    (208) caseBool -> . CASE booleanos FUNCION_FLECHA codeBlock

    LLAVE_D         reduce using rule 209 (casesBool -> caseBool .)
    CASE            shift and go to state 264

    caseBool                       shift and go to state 124
    casesBool                      shift and go to state 262
    defcase                        shift and go to state 263

state 125

    (184) caseInt -> CASE . INT FUNCION_FLECHA codeBlock
    (188) caseLgn -> CASE . LONG FUNCION_FLECHA codeBlock
    (192) caseFlt -> CASE . FLOAT FUNCION_FLECHA codeBlock
    (196) caseDob -> CASE . DOUBLE FUNCION_FLECHA codeBlock
    (200) caseStr -> CASE . STRING FUNCION_FLECHA codeBlock
    (204) caseChar -> CASE . CHAR FUNCION_FLECHA codeBlock
    (208) caseBool -> CASE . booleanos FUNCION_FLECHA codeBlock
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    INT             shift and go to state 265
    LONG            shift and go to state 266
    FLOAT           shift and go to state 267
    DOUBLE          shift and go to state 268
    STRING          shift and go to state 269
    CHAR            shift and go to state 270
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    booleanos                      shift and go to state 271

state 126

    (141) varparen -> PAR_I valores PAR_D .

    PAR_I           reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    $end            reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    LLAVE_D         reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    VAR             reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    VAL             reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    VARIABLE        reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    PRINTLN         reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    PRINT           reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    READLINE        reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    WHILE           reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    FOR             reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    IF              reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    INT             reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    LONG            reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    FLOAT           reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    DOUBLE          reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    RETURN          reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    PUNTO           reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    DEF             reduce using rule 141 (varparen -> PAR_I valores PAR_D .)
    CASE            reduce using rule 141 (varparen -> PAR_I valores PAR_D .)


state 127

    (165) valores -> valor COMA . valores
    (164) valores -> . valor
    (165) valores -> . valor COMA valores
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valor                          shift and go to state 64
    valores                        shift and go to state 272
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 128

    (102) valor -> VARIABLE PAR_I . VARIABLE PAR_D
    (103) valor -> VARIABLE PAR_I . INT PAR_D

    VARIABLE        shift and go to state 273
    INT             shift and go to state 274


state 129

    (4) io -> VARIABLE PUNTO VARIABLE . PUNTO VARIABLE PUNTO READLINE

    PUNTO           shift and go to state 275


state 130

    (218) elseif -> ELSE IF PAR_I . condicional PAR_D LLAVE_I contenido LLAVE_D
    (219) elseif -> ELSE IF PAR_I . condicional PAR_D LLAVE_I contenido LLAVE_D elseif
    (222) condicional -> . valorC logicos condicional
    (223) condicional -> . valorC
    (224) valorC -> . VARIABLE
    (225) valorC -> . booleanos
    (226) valorC -> . relacional
    (227) valorC -> . NOT VARIABLE
    (228) valorC -> . NOT booleanos
    (229) valorC -> . NOT relacional
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE
    (233) relacional -> . numeros comparacion numeros
    (234) relacional -> . aritmetica comparacion aritmetica
    (235) relacional -> . aritmetica comparacion numeros
    (236) relacional -> . numeros comparacion aritmetica
    (237) relacional -> . booleanos comparacion booleanos
    (238) relacional -> . STRING comparacion STRING
    (239) relacional -> . CHAR comparacion CHAR
    (240) relacional -> . VARIABLE comparacion numeros
    (241) relacional -> . numeros comparacion VARIABLE
    (242) relacional -> . VARIABLE comparacion booleanos
    (243) relacional -> . booleanos comparacion VARIABLE
    (244) relacional -> . VARIABLE comparacion STRING
    (245) relacional -> . STRING comparacion VARIABLE
    (246) relacional -> . VARIABLE comparacion CHAR
    (247) relacional -> . CHAR comparacion VARIABLE
    (248) relacional -> . VARIABLE comparacion VARIABLE
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE

    VARIABLE        shift and go to state 96
    NOT             shift and go to state 99
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    STRING          shift and go to state 102
    CHAR            shift and go to state 103
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    condicional                    shift and go to state 276
    valorC                         shift and go to state 95
    booleanos                      shift and go to state 97
    relacional                     shift and go to state 98
    numeros                        shift and go to state 100
    aritmetica                     shift and go to state 101

state 131

    (220) else -> ELSE LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 277


state 132

    (20) contenido -> asignacion .
    (30) contenido -> asignacion . contenido
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 20 (contenido -> asignacion .)
    RETURN          reduce using rule 20 (contenido -> asignacion .)
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    asignacion                     shift and go to state 132
    contenido                      shift and go to state 278
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 133

    (21) contenido -> reasignacion .
    (31) contenido -> reasignacion . contenido
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 21 (contenido -> reasignacion .)
    RETURN          reduce using rule 21 (contenido -> reasignacion .)
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    reasignacion                   shift and go to state 133
    contenido                      shift and go to state 279
    asignacion                     shift and go to state 132
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 134

    (22) contenido -> funcall .
    (32) contenido -> funcall . contenido
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 22 (contenido -> funcall .)
    RETURN          reduce using rule 22 (contenido -> funcall .)
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    funcall                        shift and go to state 134
    contenido                      shift and go to state 280
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 135

    (23) contenido -> impresion .
    (33) contenido -> impresion . contenido
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 23 (contenido -> impresion .)
    RETURN          reduce using rule 23 (contenido -> impresion .)
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    impresion                      shift and go to state 135
    contenido                      shift and go to state 281
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 136

    (24) contenido -> entrada .
    (34) contenido -> entrada . contenido
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 24 (contenido -> entrada .)
    RETURN          reduce using rule 24 (contenido -> entrada .)
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    entrada                        shift and go to state 136
    contenido                      shift and go to state 282
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 137

    (25) contenido -> while .
    (35) contenido -> while . contenido
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 25 (contenido -> while .)
    RETURN          reduce using rule 25 (contenido -> while .)
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    while                          shift and go to state 137
    contenido                      shift and go to state 283
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 138

    (26) contenido -> for .
    (36) contenido -> for . contenido
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 26 (contenido -> for .)
    RETURN          reduce using rule 26 (contenido -> for .)
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    for                            shift and go to state 138
    contenido                      shift and go to state 284
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 139

    (27) contenido -> match .
    (38) contenido -> match . contenido
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 27 (contenido -> match .)
    RETURN          reduce using rule 27 (contenido -> match .)
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    match                          shift and go to state 139
    contenido                      shift and go to state 285
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 140

    (28) contenido -> if .
    (37) contenido -> if . contenido
    (216) if -> if . elseif
    (217) if -> if . else
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (218) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (219) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif
    (220) else -> . ELSE LLAVE_I contenido LLAVE_D
    (221) else -> . elseif else
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 28 (contenido -> if .)
    RETURN          reduce using rule 28 (contenido -> if .)
    ELSE            shift and go to state 49
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    if                             shift and go to state 140
    contenido                      shift and go to state 286
    elseif                         shift and go to state 47
    else                           shift and go to state 48
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 141

    (29) contenido -> aritmetica .
    (39) contenido -> aritmetica . contenido
    (257) aritmetica -> aritmetica . aritmeticos numeros
    (258) aritmetica -> aritmetica . aritmeticos VARIABLE
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_D         reduce using rule 29 (contenido -> aritmetica .)
    RETURN          reduce using rule 29 (contenido -> aritmetica .)
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    aritmetica                     shift and go to state 141
    contenido                      shift and go to state 287
    aritmeticos                    shift and go to state 235
    numeros                        shift and go to state 143
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 142

    (84) reasignacion -> VARIABLE . IGUAL valor
    (85) reasignacion -> VARIABLE . IGUAL returnfun
    (86) reasignacion -> VARIABLE . IGUAL aritmetica
    (87) reasignacion -> VARIABLE . PAR_I INT PAR_D IGUAL valor
    (140) funcall -> VARIABLE . varparen
    (176) match -> VARIABLE . MATCH LLAVE_I cases LLAVE_D
    (254) aritmetica -> VARIABLE . aritmeticos numeros
    (256) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (141) varparen -> . PAR_I valores PAR_D
    (142) varparen -> . PAR_I PAR_D
    (143) varparen -> . varparen PAR_I valores PAR_D
    (144) varparen -> . varparen PAR_I PAR_D
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD

    IGUAL           shift and go to state 288
    PAR_I           shift and go to state 289
    MATCH           shift and go to state 37
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    varparen                       shift and go to state 36
    aritmeticos                    shift and go to state 218

state 143

    (253) aritmetica -> numeros . aritmeticos numeros
    (255) aritmetica -> numeros . aritmeticos VARIABLE
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD

    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    aritmeticos                    shift and go to state 233

state 144

    (110) funcion -> DEF VARIABLE parametro IGUAL . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 290


state 145

    (111) funcion -> DEF VARIABLE parametro LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 291
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 146

    (118) funcion -> DEF VARIABLE parametro dectipo . IGUAL LLAVE_I contenido RETURN valor LLAVE_D
    (119) funcion -> DEF VARIABLE parametro dectipo . IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (120) funcion -> DEF VARIABLE parametro dectipo . IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D
    (121) funcion -> DEF VARIABLE parametro dectipo . IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D
    (122) funcion -> DEF VARIABLE parametro dectipo . IGUAL LLAVE_I RETURN valor LLAVE_D
    (123) funcion -> DEF VARIABLE parametro dectipo . IGUAL LLAVE_I RETURN VARIABLE LLAVE_D
    (124) funcion -> DEF VARIABLE parametro dectipo . IGUAL LLAVE_I RETURN returnfun LLAVE_D
    (125) funcion -> DEF VARIABLE parametro dectipo . IGUAL LLAVE_I RETURN aritmetica LLAVE_D

    IGUAL           shift and go to state 292


state 147

    (126) funcion -> DEF VARIABLE parametro dectipoTupla . IGUAL LLAVE_I contenido RETURN tuple LLAVE_D
    (127) funcion -> DEF VARIABLE parametro dectipoTupla . IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (128) funcion -> DEF VARIABLE parametro dectipoTupla . IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D

    IGUAL           shift and go to state 293


state 148

    (129) dectipo -> DOBLE_PUNTO . tipo
    (130) dectipoTupla -> DOBLE_PUNTO . PAR_I tipos PAR_D
    (88) tipo -> . CHARCLASS
    (89) tipo -> . STRINGCLASS
    (90) tipo -> . BOOLCLASS
    (91) tipo -> . INTCLASS
    (92) tipo -> . LONGCLASS
    (93) tipo -> . DOUBLECLASS
    (94) tipo -> . FLOATCLASS
    (95) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (96) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    PAR_I           shift and go to state 295
    CHARCLASS       shift and go to state 296
    STRINGCLASS     shift and go to state 297
    BOOLCLASS       shift and go to state 298
    INTCLASS        shift and go to state 299
    LONGCLASS       shift and go to state 300
    DOUBLECLASS     shift and go to state 301
    FLOATCLASS      shift and go to state 302
    ARRAYCLASS      shift and go to state 303
    LISTCLASS       shift and go to state 304

    tipo                           shift and go to state 294

state 149

    (115) parametro -> PAR_I PAR_D .

    IGUAL           reduce using rule 115 (parametro -> PAR_I PAR_D .)
    LLAVE_I         reduce using rule 115 (parametro -> PAR_I PAR_D .)
    DOBLE_PUNTO     reduce using rule 115 (parametro -> PAR_I PAR_D .)


state 150

    (116) parametros -> PAR_I declaracion . PAR_D
    (117) parametros -> PAR_I declaracion . PAR_D parametros

    PAR_D           shift and go to state 305


state 151

    (112) declaracion -> VARIABLE . DOBLE_PUNTO tipo
    (113) declaracion -> VARIABLE . DOBLE_PUNTO tipo IGUAL valor

    DOBLE_PUNTO     shift and go to state 306


state 152

    (135) impresion -> PRINTLN PAR_I valorI PAR_D .

    $end            reduce using rule 135 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    LLAVE_D         reduce using rule 135 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    VAR             reduce using rule 135 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    VAL             reduce using rule 135 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    VARIABLE        reduce using rule 135 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    PRINTLN         reduce using rule 135 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    PRINT           reduce using rule 135 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    READLINE        reduce using rule 135 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    WHILE           reduce using rule 135 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    FOR             reduce using rule 135 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    IF              reduce using rule 135 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    INT             reduce using rule 135 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    LONG            reduce using rule 135 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    FLOAT           reduce using rule 135 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    DOUBLE          reduce using rule 135 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    RETURN          reduce using rule 135 (impresion -> PRINTLN PAR_I valorI PAR_D .)
    CASE            reduce using rule 135 (impresion -> PRINTLN PAR_I valorI PAR_D .)


state 153

    (137) valorI -> valor MAS . valorI
    (137) valorI -> . valor MAS valorI
    (138) valorI -> . valor
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valor                          shift and go to state 87
    valorI                         shift and go to state 307
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 154

    (136) impresion -> PRINT PAR_I valorI PAR_D .

    $end            reduce using rule 136 (impresion -> PRINT PAR_I valorI PAR_D .)
    LLAVE_D         reduce using rule 136 (impresion -> PRINT PAR_I valorI PAR_D .)
    VAR             reduce using rule 136 (impresion -> PRINT PAR_I valorI PAR_D .)
    VAL             reduce using rule 136 (impresion -> PRINT PAR_I valorI PAR_D .)
    VARIABLE        reduce using rule 136 (impresion -> PRINT PAR_I valorI PAR_D .)
    PRINTLN         reduce using rule 136 (impresion -> PRINT PAR_I valorI PAR_D .)
    PRINT           reduce using rule 136 (impresion -> PRINT PAR_I valorI PAR_D .)
    READLINE        reduce using rule 136 (impresion -> PRINT PAR_I valorI PAR_D .)
    WHILE           reduce using rule 136 (impresion -> PRINT PAR_I valorI PAR_D .)
    FOR             reduce using rule 136 (impresion -> PRINT PAR_I valorI PAR_D .)
    IF              reduce using rule 136 (impresion -> PRINT PAR_I valorI PAR_D .)
    INT             reduce using rule 136 (impresion -> PRINT PAR_I valorI PAR_D .)
    LONG            reduce using rule 136 (impresion -> PRINT PAR_I valorI PAR_D .)
    FLOAT           reduce using rule 136 (impresion -> PRINT PAR_I valorI PAR_D .)
    DOUBLE          reduce using rule 136 (impresion -> PRINT PAR_I valorI PAR_D .)
    RETURN          reduce using rule 136 (impresion -> PRINT PAR_I valorI PAR_D .)
    CASE            reduce using rule 136 (impresion -> PRINT PAR_I valorI PAR_D .)


state 155

    (45) asignacion -> VAR VARIABLE IGUAL VARIABLE .
    (254) aritmetica -> VARIABLE . aritmeticos numeros
    (256) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (150) castingcall -> VARIABLE . PUNTO castingfun
    (140) funcall -> VARIABLE . varparen
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD
    (141) varparen -> . PAR_I valores PAR_D
    (142) varparen -> . PAR_I PAR_D
    (143) varparen -> . varparen PAR_I valores PAR_D
    (144) varparen -> . varparen PAR_I PAR_D

    DEF             reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    VARIABLE        reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    PRINTLN         reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    PRINT           reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    READLINE        reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    VAR             reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    VAL             reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    WHILE           reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    FOR             reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    IF              reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    $end            reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    INT             reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    LONG            reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    FLOAT           reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    DOUBLE          reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    RETURN          reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    CASE            reduce using rule 45 (asignacion -> VAR VARIABLE IGUAL VARIABLE .)
    PUNTO           shift and go to state 308
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227
    PAR_I           shift and go to state 38

    aritmeticos                    shift and go to state 218
    varparen                       shift and go to state 36

state 156

    (47) asignacion -> VAR VARIABLE IGUAL aritmetica .
    (257) aritmetica -> aritmetica . aritmeticos numeros
    (258) aritmetica -> aritmetica . aritmeticos VARIABLE
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD

    DEF             reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    VARIABLE        reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    PRINTLN         reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    PRINT           reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    READLINE        reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    VAR             reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    VAL             reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    WHILE           reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    FOR             reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    IF              reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    $end            reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    LLAVE_D         reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    INT             reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    LONG            reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    FLOAT           reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    DOUBLE          reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    RETURN          reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    CASE            reduce using rule 47 (asignacion -> VAR VARIABLE IGUAL aritmetica .)
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    aritmeticos                    shift and go to state 235

state 157

    (49) asignacion -> VAR VARIABLE IGUAL returnfun .

    DEF             reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    VARIABLE        reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    PRINTLN         reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    PRINT           reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    READLINE        reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    VAR             reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    VAL             reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    WHILE           reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    FOR             reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    IF              reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    $end            reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    LLAVE_D         reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    INT             reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    LONG            reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    FLOAT           reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    DOUBLE          reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    RETURN          reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)
    CASE            reduce using rule 49 (asignacion -> VAR VARIABLE IGUAL returnfun .)


state 158

    (167) asignacion -> VAR VARIABLE IGUAL tuple .

    DEF             reduce using rule 167 (asignacion -> VAR VARIABLE IGUAL tuple .)
    VARIABLE        reduce using rule 167 (asignacion -> VAR VARIABLE IGUAL tuple .)
    PRINTLN         reduce using rule 167 (asignacion -> VAR VARIABLE IGUAL tuple .)
    PRINT           reduce using rule 167 (asignacion -> VAR VARIABLE IGUAL tuple .)
    READLINE        reduce using rule 167 (asignacion -> VAR VARIABLE IGUAL tuple .)
    VAR             reduce using rule 167 (asignacion -> VAR VARIABLE IGUAL tuple .)
    VAL             reduce using rule 167 (asignacion -> VAR VARIABLE IGUAL tuple .)
    WHILE           reduce using rule 167 (asignacion -> VAR VARIABLE IGUAL tuple .)
    FOR             reduce using rule 167 (asignacion -> VAR VARIABLE IGUAL tuple .)
    IF              reduce using rule 167 (asignacion -> VAR VARIABLE IGUAL tuple .)
    $end            reduce using rule 167 (asignacion -> VAR VARIABLE IGUAL tuple .)
    LLAVE_D         reduce using rule 167 (asignacion -> VAR VARIABLE IGUAL tuple .)
    INT             reduce using rule 167 (asignacion -> VAR VARIABLE IGUAL tuple .)
    LONG            reduce using rule 167 (asignacion -> VAR VARIABLE IGUAL tuple .)
    FLOAT           reduce using rule 167 (asignacion -> VAR VARIABLE IGUAL tuple .)
    DOUBLE          reduce using rule 167 (asignacion -> VAR VARIABLE IGUAL tuple .)
    RETURN          reduce using rule 167 (asignacion -> VAR VARIABLE IGUAL tuple .)
    CASE            reduce using rule 167 (asignacion -> VAR VARIABLE IGUAL tuple .)


state 159

    (298) asignacionLong -> VAR VARIABLE IGUAL longvalues .
    (310) floatvalues -> longvalues .

  ! reduce/reduce conflict for DEF resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for PRINTLN resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for PRINT resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for READLINE resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for VAR resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for VAL resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for WHILE resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for FOR resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for IF resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for $end resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for LLAVE_D resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for INT resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for LONG resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for FLOAT resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for RETURN resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for CASE resolved using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    DEF             reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    VARIABLE        reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    PRINTLN         reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    PRINT           reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    READLINE        reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    VAR             reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    VAL             reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    WHILE           reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    FOR             reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    IF              reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    $end            reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    LLAVE_D         reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    INT             reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    LONG            reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    FLOAT           reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    DOUBLE          reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    RETURN          reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)
    CASE            reduce using rule 298 (asignacionLong -> VAR VARIABLE IGUAL longvalues .)

  ! DEF             [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! VARIABLE        [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! PRINTLN         [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! PRINT           [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! READLINE        [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! VAR             [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! VAL             [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! WHILE           [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! FOR             [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! IF              [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! $end            [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! LLAVE_D         [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! INT             [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! LONG            [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! FLOAT           [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! DOUBLE          [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! RETURN          [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! CASE            [ reduce using rule 310 (floatvalues -> longvalues .) ]


state 160

    (292) asignacionInt -> VAR VARIABLE IGUAL intvalues .
    (303) longvalues -> intvalues .

  ! reduce/reduce conflict for DEF resolved using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for PRINTLN resolved using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for PRINT resolved using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for READLINE resolved using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for VAR resolved using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for VAL resolved using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for WHILE resolved using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for FOR resolved using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for IF resolved using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for $end resolved using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for LLAVE_D resolved using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for INT resolved using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for LONG resolved using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for FLOAT resolved using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for RETURN resolved using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for CASE resolved using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
    DEF             reduce using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
    VARIABLE        reduce using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
    PRINTLN         reduce using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
    PRINT           reduce using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
    READLINE        reduce using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
    VAR             reduce using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
    VAL             reduce using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
    WHILE           reduce using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
    FOR             reduce using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
    IF              reduce using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
    $end            reduce using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
    LLAVE_D         reduce using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
    INT             reduce using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
    LONG            reduce using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
    FLOAT           reduce using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
    DOUBLE          reduce using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
    RETURN          reduce using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)
    CASE            reduce using rule 292 (asignacionInt -> VAR VARIABLE IGUAL intvalues .)

  ! DEF             [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! VARIABLE        [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! PRINTLN         [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! PRINT           [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! READLINE        [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! VAR             [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! VAL             [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! WHILE           [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! FOR             [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! IF              [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! $end            [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! LLAVE_D         [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! INT             [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! LONG            [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! FLOAT           [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! DOUBLE          [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! RETURN          [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! CASE            [ reduce using rule 303 (longvalues -> intvalues .) ]


state 161

    (305) asignacionFloat -> VAR VARIABLE IGUAL floatvalues .
    (317) doublevalues -> floatvalues .

  ! reduce/reduce conflict for DEF resolved using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for PRINTLN resolved using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for PRINT resolved using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for READLINE resolved using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for VAR resolved using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for VAL resolved using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for WHILE resolved using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for FOR resolved using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for IF resolved using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for $end resolved using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for LLAVE_D resolved using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for INT resolved using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for LONG resolved using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for FLOAT resolved using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for RETURN resolved using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for CASE resolved using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    DEF             reduce using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    VARIABLE        reduce using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    PRINTLN         reduce using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    PRINT           reduce using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    READLINE        reduce using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    VAR             reduce using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    VAL             reduce using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    WHILE           reduce using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    FOR             reduce using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    IF              reduce using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    $end            reduce using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    LLAVE_D         reduce using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    INT             reduce using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    LONG            reduce using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    FLOAT           reduce using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    DOUBLE          reduce using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    RETURN          reduce using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)
    CASE            reduce using rule 305 (asignacionFloat -> VAR VARIABLE IGUAL floatvalues .)

  ! DEF             [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! VARIABLE        [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! PRINTLN         [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! PRINT           [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! READLINE        [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! VAR             [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! VAL             [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! WHILE           [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! FOR             [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! IF              [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! $end            [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! LLAVE_D         [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! INT             [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! LONG            [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! FLOAT           [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! DOUBLE          [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! RETURN          [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! CASE            [ reduce using rule 317 (doublevalues -> floatvalues .) ]


state 162

    (312) asignacionDouble -> VAR VARIABLE IGUAL doublevalues .

    DEF             reduce using rule 312 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    VARIABLE        reduce using rule 312 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    PRINTLN         reduce using rule 312 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    PRINT           reduce using rule 312 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    READLINE        reduce using rule 312 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    VAR             reduce using rule 312 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    VAL             reduce using rule 312 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    WHILE           reduce using rule 312 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    FOR             reduce using rule 312 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    IF              reduce using rule 312 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    $end            reduce using rule 312 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    LLAVE_D         reduce using rule 312 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    INT             reduce using rule 312 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    LONG            reduce using rule 312 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    FLOAT           reduce using rule 312 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    DOUBLE          reduce using rule 312 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    RETURN          reduce using rule 312 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)
    CASE            reduce using rule 312 (asignacionDouble -> VAR VARIABLE IGUAL doublevalues .)


state 163

    (66) asignacionString -> VAR VARIABLE IGUAL STRING .
    (320) stringCastLong -> STRING . PUNTO TO_LONG
    (319) stringCastInt -> STRING . PUNTO TO_INT
    (321) stringCastFloat -> STRING . PUNTO TO_FLOAT
    (322) stringCastDouble -> STRING . PUNTO TO_DOUBLE

    DEF             reduce using rule 66 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    VARIABLE        reduce using rule 66 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    PRINTLN         reduce using rule 66 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    PRINT           reduce using rule 66 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    READLINE        reduce using rule 66 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    VAR             reduce using rule 66 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    VAL             reduce using rule 66 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    WHILE           reduce using rule 66 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    FOR             reduce using rule 66 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    IF              reduce using rule 66 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    $end            reduce using rule 66 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    LLAVE_D         reduce using rule 66 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    INT             reduce using rule 66 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    LONG            reduce using rule 66 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    FLOAT           reduce using rule 66 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    DOUBLE          reduce using rule 66 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    RETURN          reduce using rule 66 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    CASE            reduce using rule 66 (asignacionString -> VAR VARIABLE IGUAL STRING .)
    PUNTO           shift and go to state 309


state 164

    (72) asignacionChar -> VAR VARIABLE IGUAL CHAR .

    DEF             reduce using rule 72 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    VARIABLE        reduce using rule 72 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    PRINTLN         reduce using rule 72 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    PRINT           reduce using rule 72 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    READLINE        reduce using rule 72 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    VAR             reduce using rule 72 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    VAL             reduce using rule 72 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    WHILE           reduce using rule 72 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    FOR             reduce using rule 72 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    IF              reduce using rule 72 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    $end            reduce using rule 72 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    LLAVE_D         reduce using rule 72 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    INT             reduce using rule 72 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    LONG            reduce using rule 72 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    FLOAT           reduce using rule 72 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    DOUBLE          reduce using rule 72 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    RETURN          reduce using rule 72 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)
    CASE            reduce using rule 72 (asignacionChar -> VAR VARIABLE IGUAL CHAR .)


state 165

    (78) asignacionBoolean -> VAR VARIABLE IGUAL booleanos .

    DEF             reduce using rule 78 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    VARIABLE        reduce using rule 78 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    PRINTLN         reduce using rule 78 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    PRINT           reduce using rule 78 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    READLINE        reduce using rule 78 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    VAR             reduce using rule 78 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    VAL             reduce using rule 78 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    WHILE           reduce using rule 78 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    FOR             reduce using rule 78 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    IF              reduce using rule 78 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    $end            reduce using rule 78 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    LLAVE_D         reduce using rule 78 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    INT             reduce using rule 78 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    LONG            reduce using rule 78 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    FLOAT           reduce using rule 78 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    DOUBLE          reduce using rule 78 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    RETURN          reduce using rule 78 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)
    CASE            reduce using rule 78 (asignacionBoolean -> VAR VARIABLE IGUAL booleanos .)


state 166

    (155) array -> VAR VARIABLE IGUAL ARRAYCLASS . PAR_I valores PAR_D

    PAR_I           shift and go to state 310


state 167

    (166) tuple -> PAR_I . valores PAR_D
    (164) valores -> . valor
    (165) valores -> . valor COMA valores
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valores                        shift and go to state 311
    valor                          shift and go to state 64
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 168

    (145) returnfun -> returnCastable .
    (149) castingcall -> returnCastable . PUNTO castingfun

    DEF             reduce using rule 145 (returnfun -> returnCastable .)
    VARIABLE        reduce using rule 145 (returnfun -> returnCastable .)
    PRINTLN         reduce using rule 145 (returnfun -> returnCastable .)
    PRINT           reduce using rule 145 (returnfun -> returnCastable .)
    READLINE        reduce using rule 145 (returnfun -> returnCastable .)
    VAR             reduce using rule 145 (returnfun -> returnCastable .)
    VAL             reduce using rule 145 (returnfun -> returnCastable .)
    WHILE           reduce using rule 145 (returnfun -> returnCastable .)
    FOR             reduce using rule 145 (returnfun -> returnCastable .)
    IF              reduce using rule 145 (returnfun -> returnCastable .)
    $end            reduce using rule 145 (returnfun -> returnCastable .)
    LLAVE_D         reduce using rule 145 (returnfun -> returnCastable .)
    INT             reduce using rule 145 (returnfun -> returnCastable .)
    LONG            reduce using rule 145 (returnfun -> returnCastable .)
    FLOAT           reduce using rule 145 (returnfun -> returnCastable .)
    DOUBLE          reduce using rule 145 (returnfun -> returnCastable .)
    RETURN          reduce using rule 145 (returnfun -> returnCastable .)
    CASE            reduce using rule 145 (returnfun -> returnCastable .)
    PUNTO           shift and go to state 312


state 169

    (146) returnfun -> castingcall .

    DEF             reduce using rule 146 (returnfun -> castingcall .)
    VARIABLE        reduce using rule 146 (returnfun -> castingcall .)
    PRINTLN         reduce using rule 146 (returnfun -> castingcall .)
    PRINT           reduce using rule 146 (returnfun -> castingcall .)
    READLINE        reduce using rule 146 (returnfun -> castingcall .)
    VAR             reduce using rule 146 (returnfun -> castingcall .)
    VAL             reduce using rule 146 (returnfun -> castingcall .)
    WHILE           reduce using rule 146 (returnfun -> castingcall .)
    FOR             reduce using rule 146 (returnfun -> castingcall .)
    IF              reduce using rule 146 (returnfun -> castingcall .)
    $end            reduce using rule 146 (returnfun -> castingcall .)
    LLAVE_D         reduce using rule 146 (returnfun -> castingcall .)
    INT             reduce using rule 146 (returnfun -> castingcall .)
    LONG            reduce using rule 146 (returnfun -> castingcall .)
    FLOAT           reduce using rule 146 (returnfun -> castingcall .)
    DOUBLE          reduce using rule 146 (returnfun -> castingcall .)
    RETURN          reduce using rule 146 (returnfun -> castingcall .)
    CASE            reduce using rule 146 (returnfun -> castingcall .)


state 170

    (302) longvalues -> INT .
    (296) intvalues -> INT .
    (106) numeros -> INT .

  ! reduce/reduce conflict for DEF resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for PRINTLN resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for PRINT resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for READLINE resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for VAR resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for VAL resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for WHILE resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for FOR resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for IF resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for $end resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for LLAVE_D resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for INT resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for LONG resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for FLOAT resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for RETURN resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for CASE resolved using rule 296 (intvalues -> INT .)
    DEF             reduce using rule 296 (intvalues -> INT .)
    VARIABLE        reduce using rule 296 (intvalues -> INT .)
    PRINTLN         reduce using rule 296 (intvalues -> INT .)
    PRINT           reduce using rule 296 (intvalues -> INT .)
    READLINE        reduce using rule 296 (intvalues -> INT .)
    VAR             reduce using rule 296 (intvalues -> INT .)
    VAL             reduce using rule 296 (intvalues -> INT .)
    WHILE           reduce using rule 296 (intvalues -> INT .)
    FOR             reduce using rule 296 (intvalues -> INT .)
    IF              reduce using rule 296 (intvalues -> INT .)
    $end            reduce using rule 296 (intvalues -> INT .)
    LLAVE_D         reduce using rule 296 (intvalues -> INT .)
    INT             reduce using rule 296 (intvalues -> INT .)
    LONG            reduce using rule 296 (intvalues -> INT .)
    FLOAT           reduce using rule 296 (intvalues -> INT .)
    DOUBLE          reduce using rule 296 (intvalues -> INT .)
    RETURN          reduce using rule 296 (intvalues -> INT .)
    CASE            reduce using rule 296 (intvalues -> INT .)
    MENOS           reduce using rule 106 (numeros -> INT .)
    MAS             reduce using rule 106 (numeros -> INT .)
    MULTIPLICACION  reduce using rule 106 (numeros -> INT .)
    DIVISION        reduce using rule 106 (numeros -> INT .)
    MOD             reduce using rule 106 (numeros -> INT .)

  ! DEF             [ reduce using rule 302 (longvalues -> INT .) ]
  ! VARIABLE        [ reduce using rule 302 (longvalues -> INT .) ]
  ! PRINTLN         [ reduce using rule 302 (longvalues -> INT .) ]
  ! PRINT           [ reduce using rule 302 (longvalues -> INT .) ]
  ! READLINE        [ reduce using rule 302 (longvalues -> INT .) ]
  ! VAR             [ reduce using rule 302 (longvalues -> INT .) ]
  ! VAL             [ reduce using rule 302 (longvalues -> INT .) ]
  ! WHILE           [ reduce using rule 302 (longvalues -> INT .) ]
  ! FOR             [ reduce using rule 302 (longvalues -> INT .) ]
  ! IF              [ reduce using rule 302 (longvalues -> INT .) ]
  ! $end            [ reduce using rule 302 (longvalues -> INT .) ]
  ! LLAVE_D         [ reduce using rule 302 (longvalues -> INT .) ]
  ! INT             [ reduce using rule 302 (longvalues -> INT .) ]
  ! LONG            [ reduce using rule 302 (longvalues -> INT .) ]
  ! FLOAT           [ reduce using rule 302 (longvalues -> INT .) ]
  ! DOUBLE          [ reduce using rule 302 (longvalues -> INT .) ]
  ! RETURN          [ reduce using rule 302 (longvalues -> INT .) ]
  ! CASE            [ reduce using rule 302 (longvalues -> INT .) ]


state 171

    (304) longvalues -> stringCastLong .

    DEF             reduce using rule 304 (longvalues -> stringCastLong .)
    VARIABLE        reduce using rule 304 (longvalues -> stringCastLong .)
    PRINTLN         reduce using rule 304 (longvalues -> stringCastLong .)
    PRINT           reduce using rule 304 (longvalues -> stringCastLong .)
    READLINE        reduce using rule 304 (longvalues -> stringCastLong .)
    VAR             reduce using rule 304 (longvalues -> stringCastLong .)
    VAL             reduce using rule 304 (longvalues -> stringCastLong .)
    WHILE           reduce using rule 304 (longvalues -> stringCastLong .)
    FOR             reduce using rule 304 (longvalues -> stringCastLong .)
    IF              reduce using rule 304 (longvalues -> stringCastLong .)
    $end            reduce using rule 304 (longvalues -> stringCastLong .)
    LLAVE_D         reduce using rule 304 (longvalues -> stringCastLong .)
    INT             reduce using rule 304 (longvalues -> stringCastLong .)
    LONG            reduce using rule 304 (longvalues -> stringCastLong .)
    FLOAT           reduce using rule 304 (longvalues -> stringCastLong .)
    DOUBLE          reduce using rule 304 (longvalues -> stringCastLong .)
    RETURN          reduce using rule 304 (longvalues -> stringCastLong .)
    CASE            reduce using rule 304 (longvalues -> stringCastLong .)


state 172

    (297) intvalues -> stringCastInt .

    DEF             reduce using rule 297 (intvalues -> stringCastInt .)
    VARIABLE        reduce using rule 297 (intvalues -> stringCastInt .)
    PRINTLN         reduce using rule 297 (intvalues -> stringCastInt .)
    PRINT           reduce using rule 297 (intvalues -> stringCastInt .)
    READLINE        reduce using rule 297 (intvalues -> stringCastInt .)
    VAR             reduce using rule 297 (intvalues -> stringCastInt .)
    VAL             reduce using rule 297 (intvalues -> stringCastInt .)
    WHILE           reduce using rule 297 (intvalues -> stringCastInt .)
    FOR             reduce using rule 297 (intvalues -> stringCastInt .)
    IF              reduce using rule 297 (intvalues -> stringCastInt .)
    $end            reduce using rule 297 (intvalues -> stringCastInt .)
    LLAVE_D         reduce using rule 297 (intvalues -> stringCastInt .)
    INT             reduce using rule 297 (intvalues -> stringCastInt .)
    LONG            reduce using rule 297 (intvalues -> stringCastInt .)
    FLOAT           reduce using rule 297 (intvalues -> stringCastInt .)
    DOUBLE          reduce using rule 297 (intvalues -> stringCastInt .)
    RETURN          reduce using rule 297 (intvalues -> stringCastInt .)
    CASE            reduce using rule 297 (intvalues -> stringCastInt .)


state 173

    (309) floatvalues -> FLOAT .
    (108) numeros -> FLOAT .

    DEF             reduce using rule 309 (floatvalues -> FLOAT .)
    VARIABLE        reduce using rule 309 (floatvalues -> FLOAT .)
    PRINTLN         reduce using rule 309 (floatvalues -> FLOAT .)
    PRINT           reduce using rule 309 (floatvalues -> FLOAT .)
    READLINE        reduce using rule 309 (floatvalues -> FLOAT .)
    VAR             reduce using rule 309 (floatvalues -> FLOAT .)
    VAL             reduce using rule 309 (floatvalues -> FLOAT .)
    WHILE           reduce using rule 309 (floatvalues -> FLOAT .)
    FOR             reduce using rule 309 (floatvalues -> FLOAT .)
    IF              reduce using rule 309 (floatvalues -> FLOAT .)
    $end            reduce using rule 309 (floatvalues -> FLOAT .)
    LLAVE_D         reduce using rule 309 (floatvalues -> FLOAT .)
    INT             reduce using rule 309 (floatvalues -> FLOAT .)
    LONG            reduce using rule 309 (floatvalues -> FLOAT .)
    FLOAT           reduce using rule 309 (floatvalues -> FLOAT .)
    DOUBLE          reduce using rule 309 (floatvalues -> FLOAT .)
    RETURN          reduce using rule 309 (floatvalues -> FLOAT .)
    CASE            reduce using rule 309 (floatvalues -> FLOAT .)
    MENOS           reduce using rule 108 (numeros -> FLOAT .)
    MAS             reduce using rule 108 (numeros -> FLOAT .)
    MULTIPLICACION  reduce using rule 108 (numeros -> FLOAT .)
    DIVISION        reduce using rule 108 (numeros -> FLOAT .)
    MOD             reduce using rule 108 (numeros -> FLOAT .)


state 174

    (311) floatvalues -> stringCastFloat .

    DEF             reduce using rule 311 (floatvalues -> stringCastFloat .)
    VARIABLE        reduce using rule 311 (floatvalues -> stringCastFloat .)
    PRINTLN         reduce using rule 311 (floatvalues -> stringCastFloat .)
    PRINT           reduce using rule 311 (floatvalues -> stringCastFloat .)
    READLINE        reduce using rule 311 (floatvalues -> stringCastFloat .)
    VAR             reduce using rule 311 (floatvalues -> stringCastFloat .)
    VAL             reduce using rule 311 (floatvalues -> stringCastFloat .)
    WHILE           reduce using rule 311 (floatvalues -> stringCastFloat .)
    FOR             reduce using rule 311 (floatvalues -> stringCastFloat .)
    IF              reduce using rule 311 (floatvalues -> stringCastFloat .)
    $end            reduce using rule 311 (floatvalues -> stringCastFloat .)
    LLAVE_D         reduce using rule 311 (floatvalues -> stringCastFloat .)
    INT             reduce using rule 311 (floatvalues -> stringCastFloat .)
    LONG            reduce using rule 311 (floatvalues -> stringCastFloat .)
    FLOAT           reduce using rule 311 (floatvalues -> stringCastFloat .)
    DOUBLE          reduce using rule 311 (floatvalues -> stringCastFloat .)
    RETURN          reduce using rule 311 (floatvalues -> stringCastFloat .)
    CASE            reduce using rule 311 (floatvalues -> stringCastFloat .)


state 175

    (316) doublevalues -> DOUBLE .
    (109) numeros -> DOUBLE .

    DEF             reduce using rule 316 (doublevalues -> DOUBLE .)
    VARIABLE        reduce using rule 316 (doublevalues -> DOUBLE .)
    PRINTLN         reduce using rule 316 (doublevalues -> DOUBLE .)
    PRINT           reduce using rule 316 (doublevalues -> DOUBLE .)
    READLINE        reduce using rule 316 (doublevalues -> DOUBLE .)
    VAR             reduce using rule 316 (doublevalues -> DOUBLE .)
    VAL             reduce using rule 316 (doublevalues -> DOUBLE .)
    WHILE           reduce using rule 316 (doublevalues -> DOUBLE .)
    FOR             reduce using rule 316 (doublevalues -> DOUBLE .)
    IF              reduce using rule 316 (doublevalues -> DOUBLE .)
    $end            reduce using rule 316 (doublevalues -> DOUBLE .)
    LLAVE_D         reduce using rule 316 (doublevalues -> DOUBLE .)
    INT             reduce using rule 316 (doublevalues -> DOUBLE .)
    LONG            reduce using rule 316 (doublevalues -> DOUBLE .)
    FLOAT           reduce using rule 316 (doublevalues -> DOUBLE .)
    DOUBLE          reduce using rule 316 (doublevalues -> DOUBLE .)
    RETURN          reduce using rule 316 (doublevalues -> DOUBLE .)
    CASE            reduce using rule 316 (doublevalues -> DOUBLE .)
    MENOS           reduce using rule 109 (numeros -> DOUBLE .)
    MAS             reduce using rule 109 (numeros -> DOUBLE .)
    MULTIPLICACION  reduce using rule 109 (numeros -> DOUBLE .)
    DIVISION        reduce using rule 109 (numeros -> DOUBLE .)
    MOD             reduce using rule 109 (numeros -> DOUBLE .)


state 176

    (318) doublevalues -> stringCastDouble .

    DEF             reduce using rule 318 (doublevalues -> stringCastDouble .)
    VARIABLE        reduce using rule 318 (doublevalues -> stringCastDouble .)
    PRINTLN         reduce using rule 318 (doublevalues -> stringCastDouble .)
    PRINT           reduce using rule 318 (doublevalues -> stringCastDouble .)
    READLINE        reduce using rule 318 (doublevalues -> stringCastDouble .)
    VAR             reduce using rule 318 (doublevalues -> stringCastDouble .)
    VAL             reduce using rule 318 (doublevalues -> stringCastDouble .)
    WHILE           reduce using rule 318 (doublevalues -> stringCastDouble .)
    FOR             reduce using rule 318 (doublevalues -> stringCastDouble .)
    IF              reduce using rule 318 (doublevalues -> stringCastDouble .)
    $end            reduce using rule 318 (doublevalues -> stringCastDouble .)
    LLAVE_D         reduce using rule 318 (doublevalues -> stringCastDouble .)
    INT             reduce using rule 318 (doublevalues -> stringCastDouble .)
    LONG            reduce using rule 318 (doublevalues -> stringCastDouble .)
    FLOAT           reduce using rule 318 (doublevalues -> stringCastDouble .)
    DOUBLE          reduce using rule 318 (doublevalues -> stringCastDouble .)
    RETURN          reduce using rule 318 (doublevalues -> stringCastDouble .)
    CASE            reduce using rule 318 (doublevalues -> stringCastDouble .)


state 177

    (147) returnCastable -> entrada .

    PUNTO           reduce using rule 147 (returnCastable -> entrada .)
    DEF             reduce using rule 147 (returnCastable -> entrada .)
    VARIABLE        reduce using rule 147 (returnCastable -> entrada .)
    PRINTLN         reduce using rule 147 (returnCastable -> entrada .)
    PRINT           reduce using rule 147 (returnCastable -> entrada .)
    READLINE        reduce using rule 147 (returnCastable -> entrada .)
    VAR             reduce using rule 147 (returnCastable -> entrada .)
    VAL             reduce using rule 147 (returnCastable -> entrada .)
    WHILE           reduce using rule 147 (returnCastable -> entrada .)
    FOR             reduce using rule 147 (returnCastable -> entrada .)
    IF              reduce using rule 147 (returnCastable -> entrada .)
    $end            reduce using rule 147 (returnCastable -> entrada .)
    LLAVE_D         reduce using rule 147 (returnCastable -> entrada .)
    INT             reduce using rule 147 (returnCastable -> entrada .)
    LONG            reduce using rule 147 (returnCastable -> entrada .)
    FLOAT           reduce using rule 147 (returnCastable -> entrada .)
    DOUBLE          reduce using rule 147 (returnCastable -> entrada .)
    RETURN          reduce using rule 147 (returnCastable -> entrada .)
    CASE            reduce using rule 147 (returnCastable -> entrada .)


state 178

    (148) returnCastable -> funcall .

    PUNTO           reduce using rule 148 (returnCastable -> funcall .)
    DEF             reduce using rule 148 (returnCastable -> funcall .)
    VARIABLE        reduce using rule 148 (returnCastable -> funcall .)
    PRINTLN         reduce using rule 148 (returnCastable -> funcall .)
    PRINT           reduce using rule 148 (returnCastable -> funcall .)
    READLINE        reduce using rule 148 (returnCastable -> funcall .)
    VAR             reduce using rule 148 (returnCastable -> funcall .)
    VAL             reduce using rule 148 (returnCastable -> funcall .)
    WHILE           reduce using rule 148 (returnCastable -> funcall .)
    FOR             reduce using rule 148 (returnCastable -> funcall .)
    IF              reduce using rule 148 (returnCastable -> funcall .)
    $end            reduce using rule 148 (returnCastable -> funcall .)
    LLAVE_D         reduce using rule 148 (returnCastable -> funcall .)
    INT             reduce using rule 148 (returnCastable -> funcall .)
    LONG            reduce using rule 148 (returnCastable -> funcall .)
    FLOAT           reduce using rule 148 (returnCastable -> funcall .)
    DOUBLE          reduce using rule 148 (returnCastable -> funcall .)
    RETURN          reduce using rule 148 (returnCastable -> funcall .)
    CASE            reduce using rule 148 (returnCastable -> funcall .)


state 179

    (270) asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .

    DEF             reduce using rule 270 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    VARIABLE        reduce using rule 270 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    PRINTLN         reduce using rule 270 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    PRINT           reduce using rule 270 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    READLINE        reduce using rule 270 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    VAR             reduce using rule 270 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    VAL             reduce using rule 270 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    WHILE           reduce using rule 270 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    FOR             reduce using rule 270 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    IF              reduce using rule 270 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    $end            reduce using rule 270 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    LLAVE_D         reduce using rule 270 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    INT             reduce using rule 270 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    LONG            reduce using rule 270 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    FLOAT           reduce using rule 270 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    DOUBLE          reduce using rule 270 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    RETURN          reduce using rule 270 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)
    CASE            reduce using rule 270 (asignacion -> VAR VARIABLE DOBLE_PUNTO dectupla .)


state 180

    (60) asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS . IGUAL VARIABLE
    (299) asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS . IGUAL longvalues

    IGUAL           shift and go to state 313


state 181

    (293) asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS . IGUAL intvalues

    IGUAL           shift and go to state 314


state 182

    (62) asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS . IGUAL VARIABLE
    (306) asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS . IGUAL floatvalues

    IGUAL           shift and go to state 315


state 183

    (64) asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS . IGUAL VARIABLE
    (313) asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS . IGUAL doublevalues

    IGUAL           shift and go to state 316


state 184

    (67) asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS . IGUAL STRING
    (70) asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS . IGUAL VARIABLE

    IGUAL           shift and go to state 317


state 185

    (73) asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS . IGUAL CHAR
    (76) asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS . IGUAL VARIABLE

    IGUAL           shift and go to state 318


state 186

    (79) asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS . IGUAL booleanos
    (82) asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS . IGUAL VARIABLE

    IGUAL           shift and go to state 319


state 187

    (156) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS . CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (264) arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS . CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS . CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    CORCHETE_I      shift and go to state 320


state 188

    (272) dectupla -> PAR_I . STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D
    (273) dectupla -> PAR_I . STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D
    (274) dectupla -> PAR_I . STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D
    (275) dectupla -> PAR_I . STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D
    (276) dectupla -> PAR_I . FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D
    (277) dectupla -> PAR_I . FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D
    (278) dectupla -> PAR_I . FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D
    (279) dectupla -> PAR_I . FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D
    (280) dectupla -> PAR_I . DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D
    (281) dectupla -> PAR_I . DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D
    (282) dectupla -> PAR_I . DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D
    (283) dectupla -> PAR_I . DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D
    (284) dectupla -> PAR_I . LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D
    (285) dectupla -> PAR_I . LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D
    (286) dectupla -> PAR_I . LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D
    (287) dectupla -> PAR_I . LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D
    (288) dectupla -> PAR_I . INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D
    (289) dectupla -> PAR_I . INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D
    (290) dectupla -> PAR_I . INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D
    (291) dectupla -> PAR_I . INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D

    STRINGCLASS     shift and go to state 321
    FLOATCLASS      shift and go to state 325
    DOUBLECLASS     shift and go to state 324
    LONGCLASS       shift and go to state 323
    INTCLASS        shift and go to state 322


state 189

    (46) asignacion -> VAL VARIABLE IGUAL VARIABLE .
    (254) aritmetica -> VARIABLE . aritmeticos numeros
    (256) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (150) castingcall -> VARIABLE . PUNTO castingfun
    (140) funcall -> VARIABLE . varparen
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD
    (141) varparen -> . PAR_I valores PAR_D
    (142) varparen -> . PAR_I PAR_D
    (143) varparen -> . varparen PAR_I valores PAR_D
    (144) varparen -> . varparen PAR_I PAR_D

    DEF             reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    VARIABLE        reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    PRINTLN         reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    PRINT           reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    READLINE        reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    VAR             reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    VAL             reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    WHILE           reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    FOR             reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    IF              reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    $end            reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    INT             reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    LONG            reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    FLOAT           reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    DOUBLE          reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    RETURN          reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    CASE            reduce using rule 46 (asignacion -> VAL VARIABLE IGUAL VARIABLE .)
    PUNTO           shift and go to state 308
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227
    PAR_I           shift and go to state 38

    aritmeticos                    shift and go to state 218
    varparen                       shift and go to state 36

state 190

    (48) asignacion -> VAL VARIABLE IGUAL aritmetica .
    (257) aritmetica -> aritmetica . aritmeticos numeros
    (258) aritmetica -> aritmetica . aritmeticos VARIABLE
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD

    DEF             reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    VARIABLE        reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    PRINTLN         reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    PRINT           reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    READLINE        reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    VAR             reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    VAL             reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    WHILE           reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    FOR             reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    IF              reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    $end            reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    LLAVE_D         reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    INT             reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    LONG            reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    FLOAT           reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    DOUBLE          reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    RETURN          reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    CASE            reduce using rule 48 (asignacion -> VAL VARIABLE IGUAL aritmetica .)
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    aritmeticos                    shift and go to state 235

state 191

    (50) asignacion -> VAL VARIABLE IGUAL returnfun .

    DEF             reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    VARIABLE        reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    PRINTLN         reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    PRINT           reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    READLINE        reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    VAR             reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    VAL             reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    WHILE           reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    FOR             reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    IF              reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    $end            reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    LLAVE_D         reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    INT             reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    LONG            reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    FLOAT           reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    DOUBLE          reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    RETURN          reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)
    CASE            reduce using rule 50 (asignacion -> VAL VARIABLE IGUAL returnfun .)


state 192

    (168) asignacion -> VAL VARIABLE IGUAL tuple .

    DEF             reduce using rule 168 (asignacion -> VAL VARIABLE IGUAL tuple .)
    VARIABLE        reduce using rule 168 (asignacion -> VAL VARIABLE IGUAL tuple .)
    PRINTLN         reduce using rule 168 (asignacion -> VAL VARIABLE IGUAL tuple .)
    PRINT           reduce using rule 168 (asignacion -> VAL VARIABLE IGUAL tuple .)
    READLINE        reduce using rule 168 (asignacion -> VAL VARIABLE IGUAL tuple .)
    VAR             reduce using rule 168 (asignacion -> VAL VARIABLE IGUAL tuple .)
    VAL             reduce using rule 168 (asignacion -> VAL VARIABLE IGUAL tuple .)
    WHILE           reduce using rule 168 (asignacion -> VAL VARIABLE IGUAL tuple .)
    FOR             reduce using rule 168 (asignacion -> VAL VARIABLE IGUAL tuple .)
    IF              reduce using rule 168 (asignacion -> VAL VARIABLE IGUAL tuple .)
    $end            reduce using rule 168 (asignacion -> VAL VARIABLE IGUAL tuple .)
    LLAVE_D         reduce using rule 168 (asignacion -> VAL VARIABLE IGUAL tuple .)
    INT             reduce using rule 168 (asignacion -> VAL VARIABLE IGUAL tuple .)
    LONG            reduce using rule 168 (asignacion -> VAL VARIABLE IGUAL tuple .)
    FLOAT           reduce using rule 168 (asignacion -> VAL VARIABLE IGUAL tuple .)
    DOUBLE          reduce using rule 168 (asignacion -> VAL VARIABLE IGUAL tuple .)
    RETURN          reduce using rule 168 (asignacion -> VAL VARIABLE IGUAL tuple .)
    CASE            reduce using rule 168 (asignacion -> VAL VARIABLE IGUAL tuple .)


state 193

    (300) asignacionLong -> VAL VARIABLE IGUAL longvalues .
    (310) floatvalues -> longvalues .

  ! reduce/reduce conflict for DEF resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for PRINTLN resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for PRINT resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for READLINE resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for VAR resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for VAL resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for WHILE resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for FOR resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for IF resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for $end resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for LLAVE_D resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for INT resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for LONG resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for FLOAT resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for RETURN resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
  ! reduce/reduce conflict for CASE resolved using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    DEF             reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    VARIABLE        reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    PRINTLN         reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    PRINT           reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    READLINE        reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    VAR             reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    VAL             reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    WHILE           reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    FOR             reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    IF              reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    $end            reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    LLAVE_D         reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    INT             reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    LONG            reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    FLOAT           reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    DOUBLE          reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    RETURN          reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)
    CASE            reduce using rule 300 (asignacionLong -> VAL VARIABLE IGUAL longvalues .)

  ! DEF             [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! VARIABLE        [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! PRINTLN         [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! PRINT           [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! READLINE        [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! VAR             [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! VAL             [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! WHILE           [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! FOR             [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! IF              [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! $end            [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! LLAVE_D         [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! INT             [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! LONG            [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! FLOAT           [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! DOUBLE          [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! RETURN          [ reduce using rule 310 (floatvalues -> longvalues .) ]
  ! CASE            [ reduce using rule 310 (floatvalues -> longvalues .) ]


state 194

    (294) asignacionInt -> VAL VARIABLE IGUAL intvalues .
    (303) longvalues -> intvalues .

  ! reduce/reduce conflict for DEF resolved using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for PRINTLN resolved using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for PRINT resolved using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for READLINE resolved using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for VAR resolved using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for VAL resolved using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for WHILE resolved using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for FOR resolved using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for IF resolved using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for $end resolved using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for LLAVE_D resolved using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for INT resolved using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for LONG resolved using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for FLOAT resolved using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for RETURN resolved using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
  ! reduce/reduce conflict for CASE resolved using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
    DEF             reduce using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
    VARIABLE        reduce using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
    PRINTLN         reduce using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
    PRINT           reduce using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
    READLINE        reduce using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
    VAR             reduce using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
    VAL             reduce using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
    WHILE           reduce using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
    FOR             reduce using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
    IF              reduce using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
    $end            reduce using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
    LLAVE_D         reduce using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
    INT             reduce using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
    LONG            reduce using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
    FLOAT           reduce using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
    DOUBLE          reduce using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
    RETURN          reduce using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)
    CASE            reduce using rule 294 (asignacionInt -> VAL VARIABLE IGUAL intvalues .)

  ! DEF             [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! VARIABLE        [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! PRINTLN         [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! PRINT           [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! READLINE        [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! VAR             [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! VAL             [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! WHILE           [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! FOR             [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! IF              [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! $end            [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! LLAVE_D         [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! INT             [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! LONG            [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! FLOAT           [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! DOUBLE          [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! RETURN          [ reduce using rule 303 (longvalues -> intvalues .) ]
  ! CASE            [ reduce using rule 303 (longvalues -> intvalues .) ]


state 195

    (307) asignacionFloat -> VAL VARIABLE IGUAL floatvalues .
    (317) doublevalues -> floatvalues .

  ! reduce/reduce conflict for DEF resolved using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for PRINTLN resolved using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for PRINT resolved using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for READLINE resolved using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for VAR resolved using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for VAL resolved using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for WHILE resolved using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for FOR resolved using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for IF resolved using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for $end resolved using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for LLAVE_D resolved using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for INT resolved using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for LONG resolved using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for FLOAT resolved using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for RETURN resolved using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
  ! reduce/reduce conflict for CASE resolved using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    DEF             reduce using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    VARIABLE        reduce using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    PRINTLN         reduce using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    PRINT           reduce using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    READLINE        reduce using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    VAR             reduce using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    VAL             reduce using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    WHILE           reduce using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    FOR             reduce using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    IF              reduce using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    $end            reduce using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    LLAVE_D         reduce using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    INT             reduce using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    LONG            reduce using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    FLOAT           reduce using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    DOUBLE          reduce using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    RETURN          reduce using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)
    CASE            reduce using rule 307 (asignacionFloat -> VAL VARIABLE IGUAL floatvalues .)

  ! DEF             [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! VARIABLE        [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! PRINTLN         [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! PRINT           [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! READLINE        [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! VAR             [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! VAL             [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! WHILE           [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! FOR             [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! IF              [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! $end            [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! LLAVE_D         [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! INT             [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! LONG            [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! FLOAT           [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! DOUBLE          [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! RETURN          [ reduce using rule 317 (doublevalues -> floatvalues .) ]
  ! CASE            [ reduce using rule 317 (doublevalues -> floatvalues .) ]


state 196

    (314) asignacionDouble -> VAL VARIABLE IGUAL doublevalues .

    DEF             reduce using rule 314 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    VARIABLE        reduce using rule 314 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    PRINTLN         reduce using rule 314 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    PRINT           reduce using rule 314 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    READLINE        reduce using rule 314 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    VAR             reduce using rule 314 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    VAL             reduce using rule 314 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    WHILE           reduce using rule 314 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    FOR             reduce using rule 314 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    IF              reduce using rule 314 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    $end            reduce using rule 314 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    LLAVE_D         reduce using rule 314 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    INT             reduce using rule 314 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    LONG            reduce using rule 314 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    FLOAT           reduce using rule 314 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    DOUBLE          reduce using rule 314 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    RETURN          reduce using rule 314 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)
    CASE            reduce using rule 314 (asignacionDouble -> VAL VARIABLE IGUAL doublevalues .)


state 197

    (68) asignacionString -> VAL VARIABLE IGUAL STRING .
    (320) stringCastLong -> STRING . PUNTO TO_LONG
    (319) stringCastInt -> STRING . PUNTO TO_INT
    (321) stringCastFloat -> STRING . PUNTO TO_FLOAT
    (322) stringCastDouble -> STRING . PUNTO TO_DOUBLE

    DEF             reduce using rule 68 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    VARIABLE        reduce using rule 68 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    PRINTLN         reduce using rule 68 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    PRINT           reduce using rule 68 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    READLINE        reduce using rule 68 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    VAR             reduce using rule 68 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    VAL             reduce using rule 68 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    WHILE           reduce using rule 68 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    FOR             reduce using rule 68 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    IF              reduce using rule 68 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    $end            reduce using rule 68 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    LLAVE_D         reduce using rule 68 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    INT             reduce using rule 68 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    LONG            reduce using rule 68 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    FLOAT           reduce using rule 68 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    DOUBLE          reduce using rule 68 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    RETURN          reduce using rule 68 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    CASE            reduce using rule 68 (asignacionString -> VAL VARIABLE IGUAL STRING .)
    PUNTO           shift and go to state 309


state 198

    (74) asignacionChar -> VAL VARIABLE IGUAL CHAR .

    DEF             reduce using rule 74 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    VARIABLE        reduce using rule 74 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    PRINTLN         reduce using rule 74 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    PRINT           reduce using rule 74 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    READLINE        reduce using rule 74 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    VAR             reduce using rule 74 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    VAL             reduce using rule 74 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    WHILE           reduce using rule 74 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    FOR             reduce using rule 74 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    IF              reduce using rule 74 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    $end            reduce using rule 74 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    LLAVE_D         reduce using rule 74 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    INT             reduce using rule 74 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    LONG            reduce using rule 74 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    FLOAT           reduce using rule 74 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    DOUBLE          reduce using rule 74 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    RETURN          reduce using rule 74 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)
    CASE            reduce using rule 74 (asignacionChar -> VAL VARIABLE IGUAL CHAR .)


state 199

    (80) asignacionBoolean -> VAL VARIABLE IGUAL booleanos .

    DEF             reduce using rule 80 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    VARIABLE        reduce using rule 80 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    PRINTLN         reduce using rule 80 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    PRINT           reduce using rule 80 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    READLINE        reduce using rule 80 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    VAR             reduce using rule 80 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    VAL             reduce using rule 80 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    WHILE           reduce using rule 80 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    FOR             reduce using rule 80 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    IF              reduce using rule 80 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    $end            reduce using rule 80 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    LLAVE_D         reduce using rule 80 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    INT             reduce using rule 80 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    LONG            reduce using rule 80 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    FLOAT           reduce using rule 80 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    DOUBLE          reduce using rule 80 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    RETURN          reduce using rule 80 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)
    CASE            reduce using rule 80 (asignacionBoolean -> VAL VARIABLE IGUAL booleanos .)


state 200

    (157) array -> VAL VARIABLE IGUAL ARRAYCLASS . PAR_I valores PAR_D

    PAR_I           shift and go to state 326


state 201

    (161) list -> VAL VARIABLE IGUAL LISTCLASS . PAR_I valores PAR_D

    PAR_I           shift and go to state 327


state 202

    (271) asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .

    DEF             reduce using rule 271 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    VARIABLE        reduce using rule 271 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    PRINTLN         reduce using rule 271 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    PRINT           reduce using rule 271 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    READLINE        reduce using rule 271 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    VAR             reduce using rule 271 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    VAL             reduce using rule 271 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    WHILE           reduce using rule 271 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    FOR             reduce using rule 271 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    IF              reduce using rule 271 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    $end            reduce using rule 271 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    LLAVE_D         reduce using rule 271 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    INT             reduce using rule 271 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    LONG            reduce using rule 271 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    FLOAT           reduce using rule 271 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    DOUBLE          reduce using rule 271 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    RETURN          reduce using rule 271 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)
    CASE            reduce using rule 271 (asignacion -> VAL VARIABLE DOBLE_PUNTO dectupla .)


state 203

    (61) asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS . IGUAL VARIABLE
    (301) asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS . IGUAL longvalues

    IGUAL           shift and go to state 328


state 204

    (295) asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS . IGUAL intvalues

    IGUAL           shift and go to state 329


state 205

    (63) asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS . IGUAL VARIABLE
    (308) asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS . IGUAL floatvalues

    IGUAL           shift and go to state 330


state 206

    (65) asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS . IGUAL VARIABLE
    (315) asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS . IGUAL doublevalues

    IGUAL           shift and go to state 331


state 207

    (69) asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS . IGUAL STRING
    (71) asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS . IGUAL VARIABLE

    IGUAL           shift and go to state 332


state 208

    (75) asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS . IGUAL CHAR
    (77) asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS . IGUAL VARIABLE

    IGUAL           shift and go to state 333


state 209

    (81) asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS . IGUAL booleanos
    (83) asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS . IGUAL VARIABLE

    IGUAL           shift and go to state 334


state 210

    (158) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS . CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    CORCHETE_I      shift and go to state 335


state 211

    (162) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS . CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS . CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D

    CORCHETE_I      shift and go to state 336


state 212

    (169) while -> WHILE PAR_I condicional PAR_D . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 337


state 213

    (222) condicional -> valorC logicos . condicional
    (222) condicional -> . valorC logicos condicional
    (223) condicional -> . valorC
    (224) valorC -> . VARIABLE
    (225) valorC -> . booleanos
    (226) valorC -> . relacional
    (227) valorC -> . NOT VARIABLE
    (228) valorC -> . NOT booleanos
    (229) valorC -> . NOT relacional
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE
    (233) relacional -> . numeros comparacion numeros
    (234) relacional -> . aritmetica comparacion aritmetica
    (235) relacional -> . aritmetica comparacion numeros
    (236) relacional -> . numeros comparacion aritmetica
    (237) relacional -> . booleanos comparacion booleanos
    (238) relacional -> . STRING comparacion STRING
    (239) relacional -> . CHAR comparacion CHAR
    (240) relacional -> . VARIABLE comparacion numeros
    (241) relacional -> . numeros comparacion VARIABLE
    (242) relacional -> . VARIABLE comparacion booleanos
    (243) relacional -> . booleanos comparacion VARIABLE
    (244) relacional -> . VARIABLE comparacion STRING
    (245) relacional -> . STRING comparacion VARIABLE
    (246) relacional -> . VARIABLE comparacion CHAR
    (247) relacional -> . CHAR comparacion VARIABLE
    (248) relacional -> . VARIABLE comparacion VARIABLE
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE

    VARIABLE        shift and go to state 96
    NOT             shift and go to state 99
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    STRING          shift and go to state 102
    CHAR            shift and go to state 103
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    valorC                         shift and go to state 95
    condicional                    shift and go to state 338
    booleanos                      shift and go to state 97
    relacional                     shift and go to state 98
    numeros                        shift and go to state 100
    aritmetica                     shift and go to state 101

state 214

    (230) logicos -> AND .

    VARIABLE        reduce using rule 230 (logicos -> AND .)
    NOT             reduce using rule 230 (logicos -> AND .)
    TRUE            reduce using rule 230 (logicos -> AND .)
    FLASE           reduce using rule 230 (logicos -> AND .)
    STRING          reduce using rule 230 (logicos -> AND .)
    CHAR            reduce using rule 230 (logicos -> AND .)
    INT             reduce using rule 230 (logicos -> AND .)
    LONG            reduce using rule 230 (logicos -> AND .)
    FLOAT           reduce using rule 230 (logicos -> AND .)
    DOUBLE          reduce using rule 230 (logicos -> AND .)


state 215

    (231) logicos -> OR .

    VARIABLE        reduce using rule 231 (logicos -> OR .)
    NOT             reduce using rule 231 (logicos -> OR .)
    TRUE            reduce using rule 231 (logicos -> OR .)
    FLASE           reduce using rule 231 (logicos -> OR .)
    STRING          reduce using rule 231 (logicos -> OR .)
    CHAR            reduce using rule 231 (logicos -> OR .)
    INT             reduce using rule 231 (logicos -> OR .)
    LONG            reduce using rule 231 (logicos -> OR .)
    FLOAT           reduce using rule 231 (logicos -> OR .)
    DOUBLE          reduce using rule 231 (logicos -> OR .)


state 216

    (232) logicos -> NOT .

    VARIABLE        reduce using rule 232 (logicos -> NOT .)
    NOT             reduce using rule 232 (logicos -> NOT .)
    TRUE            reduce using rule 232 (logicos -> NOT .)
    FLASE           reduce using rule 232 (logicos -> NOT .)
    STRING          reduce using rule 232 (logicos -> NOT .)
    CHAR            reduce using rule 232 (logicos -> NOT .)
    INT             reduce using rule 232 (logicos -> NOT .)
    LONG            reduce using rule 232 (logicos -> NOT .)
    FLOAT           reduce using rule 232 (logicos -> NOT .)
    DOUBLE          reduce using rule 232 (logicos -> NOT .)


state 217

    (240) relacional -> VARIABLE comparacion . numeros
    (242) relacional -> VARIABLE comparacion . booleanos
    (244) relacional -> VARIABLE comparacion . STRING
    (246) relacional -> VARIABLE comparacion . CHAR
    (248) relacional -> VARIABLE comparacion . VARIABLE
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    STRING          shift and go to state 342
    CHAR            shift and go to state 343
    VARIABLE        shift and go to state 339
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    numeros                        shift and go to state 340
    booleanos                      shift and go to state 341

state 218

    (254) aritmetica -> VARIABLE aritmeticos . numeros
    (256) aritmetica -> VARIABLE aritmeticos . VARIABLE
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE

    VARIABLE        shift and go to state 344
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    numeros                        shift and go to state 345

state 219

    (249) comparacion -> IGUAL_COMPARACION .

    STRING          reduce using rule 249 (comparacion -> IGUAL_COMPARACION .)
    CHAR            reduce using rule 249 (comparacion -> IGUAL_COMPARACION .)
    VARIABLE        reduce using rule 249 (comparacion -> IGUAL_COMPARACION .)
    INT             reduce using rule 249 (comparacion -> IGUAL_COMPARACION .)
    LONG            reduce using rule 249 (comparacion -> IGUAL_COMPARACION .)
    FLOAT           reduce using rule 249 (comparacion -> IGUAL_COMPARACION .)
    DOUBLE          reduce using rule 249 (comparacion -> IGUAL_COMPARACION .)
    TRUE            reduce using rule 249 (comparacion -> IGUAL_COMPARACION .)
    FLASE           reduce using rule 249 (comparacion -> IGUAL_COMPARACION .)


state 220

    (250) comparacion -> DIFERENTE .

    STRING          reduce using rule 250 (comparacion -> DIFERENTE .)
    CHAR            reduce using rule 250 (comparacion -> DIFERENTE .)
    VARIABLE        reduce using rule 250 (comparacion -> DIFERENTE .)
    INT             reduce using rule 250 (comparacion -> DIFERENTE .)
    LONG            reduce using rule 250 (comparacion -> DIFERENTE .)
    FLOAT           reduce using rule 250 (comparacion -> DIFERENTE .)
    DOUBLE          reduce using rule 250 (comparacion -> DIFERENTE .)
    TRUE            reduce using rule 250 (comparacion -> DIFERENTE .)
    FLASE           reduce using rule 250 (comparacion -> DIFERENTE .)


state 221

    (251) comparacion -> MAYOR .

    STRING          reduce using rule 251 (comparacion -> MAYOR .)
    CHAR            reduce using rule 251 (comparacion -> MAYOR .)
    VARIABLE        reduce using rule 251 (comparacion -> MAYOR .)
    INT             reduce using rule 251 (comparacion -> MAYOR .)
    LONG            reduce using rule 251 (comparacion -> MAYOR .)
    FLOAT           reduce using rule 251 (comparacion -> MAYOR .)
    DOUBLE          reduce using rule 251 (comparacion -> MAYOR .)
    TRUE            reduce using rule 251 (comparacion -> MAYOR .)
    FLASE           reduce using rule 251 (comparacion -> MAYOR .)


state 222

    (252) comparacion -> MENOR .

    STRING          reduce using rule 252 (comparacion -> MENOR .)
    CHAR            reduce using rule 252 (comparacion -> MENOR .)
    VARIABLE        reduce using rule 252 (comparacion -> MENOR .)
    INT             reduce using rule 252 (comparacion -> MENOR .)
    LONG            reduce using rule 252 (comparacion -> MENOR .)
    FLOAT           reduce using rule 252 (comparacion -> MENOR .)
    DOUBLE          reduce using rule 252 (comparacion -> MENOR .)
    TRUE            reduce using rule 252 (comparacion -> MENOR .)
    FLASE           reduce using rule 252 (comparacion -> MENOR .)


state 223

    (259) aritmeticos -> MENOS .

    VARIABLE        reduce using rule 259 (aritmeticos -> MENOS .)
    INT             reduce using rule 259 (aritmeticos -> MENOS .)
    LONG            reduce using rule 259 (aritmeticos -> MENOS .)
    FLOAT           reduce using rule 259 (aritmeticos -> MENOS .)
    DOUBLE          reduce using rule 259 (aritmeticos -> MENOS .)


state 224

    (260) aritmeticos -> MAS .

    VARIABLE        reduce using rule 260 (aritmeticos -> MAS .)
    INT             reduce using rule 260 (aritmeticos -> MAS .)
    LONG            reduce using rule 260 (aritmeticos -> MAS .)
    FLOAT           reduce using rule 260 (aritmeticos -> MAS .)
    DOUBLE          reduce using rule 260 (aritmeticos -> MAS .)


state 225

    (261) aritmeticos -> MULTIPLICACION .

    VARIABLE        reduce using rule 261 (aritmeticos -> MULTIPLICACION .)
    INT             reduce using rule 261 (aritmeticos -> MULTIPLICACION .)
    LONG            reduce using rule 261 (aritmeticos -> MULTIPLICACION .)
    FLOAT           reduce using rule 261 (aritmeticos -> MULTIPLICACION .)
    DOUBLE          reduce using rule 261 (aritmeticos -> MULTIPLICACION .)


state 226

    (262) aritmeticos -> DIVISION .

    VARIABLE        reduce using rule 262 (aritmeticos -> DIVISION .)
    INT             reduce using rule 262 (aritmeticos -> DIVISION .)
    LONG            reduce using rule 262 (aritmeticos -> DIVISION .)
    FLOAT           reduce using rule 262 (aritmeticos -> DIVISION .)
    DOUBLE          reduce using rule 262 (aritmeticos -> DIVISION .)


state 227

    (263) aritmeticos -> MOD .

    VARIABLE        reduce using rule 263 (aritmeticos -> MOD .)
    INT             reduce using rule 263 (aritmeticos -> MOD .)
    LONG            reduce using rule 263 (aritmeticos -> MOD .)
    FLOAT           reduce using rule 263 (aritmeticos -> MOD .)
    DOUBLE          reduce using rule 263 (aritmeticos -> MOD .)


state 228

    (237) relacional -> booleanos comparacion . booleanos
    (243) relacional -> booleanos comparacion . VARIABLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    VARIABLE        shift and go to state 347
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    booleanos                      shift and go to state 346

state 229

    (227) valorC -> NOT VARIABLE .
    (240) relacional -> VARIABLE . comparacion numeros
    (242) relacional -> VARIABLE . comparacion booleanos
    (244) relacional -> VARIABLE . comparacion STRING
    (246) relacional -> VARIABLE . comparacion CHAR
    (248) relacional -> VARIABLE . comparacion VARIABLE
    (254) aritmetica -> VARIABLE . aritmeticos numeros
    (256) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (249) comparacion -> . IGUAL_COMPARACION
    (250) comparacion -> . DIFERENTE
    (251) comparacion -> . MAYOR
    (252) comparacion -> . MENOR
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD

    AND             reduce using rule 227 (valorC -> NOT VARIABLE .)
    OR              reduce using rule 227 (valorC -> NOT VARIABLE .)
    NOT             reduce using rule 227 (valorC -> NOT VARIABLE .)
    PAR_D           reduce using rule 227 (valorC -> NOT VARIABLE .)
    IGUAL_COMPARACION shift and go to state 219
    DIFERENTE       shift and go to state 220
    MAYOR           shift and go to state 221
    MENOR           shift and go to state 222
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    comparacion                    shift and go to state 217
    aritmeticos                    shift and go to state 218

state 230

    (228) valorC -> NOT booleanos .
    (237) relacional -> booleanos . comparacion booleanos
    (243) relacional -> booleanos . comparacion VARIABLE
    (249) comparacion -> . IGUAL_COMPARACION
    (250) comparacion -> . DIFERENTE
    (251) comparacion -> . MAYOR
    (252) comparacion -> . MENOR

    AND             reduce using rule 228 (valorC -> NOT booleanos .)
    OR              reduce using rule 228 (valorC -> NOT booleanos .)
    NOT             reduce using rule 228 (valorC -> NOT booleanos .)
    PAR_D           reduce using rule 228 (valorC -> NOT booleanos .)
    IGUAL_COMPARACION shift and go to state 219
    DIFERENTE       shift and go to state 220
    MAYOR           shift and go to state 221
    MENOR           shift and go to state 222

    comparacion                    shift and go to state 228

state 231

    (229) valorC -> NOT relacional .

    AND             reduce using rule 229 (valorC -> NOT relacional .)
    OR              reduce using rule 229 (valorC -> NOT relacional .)
    NOT             reduce using rule 229 (valorC -> NOT relacional .)
    PAR_D           reduce using rule 229 (valorC -> NOT relacional .)


state 232

    (233) relacional -> numeros comparacion . numeros
    (236) relacional -> numeros comparacion . aritmetica
    (241) relacional -> numeros comparacion . VARIABLE
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE

    VARIABLE        shift and go to state 350
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    numeros                        shift and go to state 348
    aritmetica                     shift and go to state 349

state 233

    (253) aritmetica -> numeros aritmeticos . numeros
    (255) aritmetica -> numeros aritmeticos . VARIABLE
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE

    VARIABLE        shift and go to state 352
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    numeros                        shift and go to state 351

state 234

    (234) relacional -> aritmetica comparacion . aritmetica
    (235) relacional -> aritmetica comparacion . numeros
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE

    VARIABLE        shift and go to state 355
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    aritmetica                     shift and go to state 353
    numeros                        shift and go to state 354

state 235

    (257) aritmetica -> aritmetica aritmeticos . numeros
    (258) aritmetica -> aritmetica aritmeticos . VARIABLE
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE

    VARIABLE        shift and go to state 357
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    numeros                        shift and go to state 356

state 236

    (238) relacional -> STRING comparacion . STRING
    (245) relacional -> STRING comparacion . VARIABLE

    STRING          shift and go to state 358
    VARIABLE        shift and go to state 359


state 237

    (239) relacional -> CHAR comparacion . CHAR
    (247) relacional -> CHAR comparacion . VARIABLE

    CHAR            shift and go to state 360
    VARIABLE        shift and go to state 361


state 238

    (170) for -> FOR PAR_I VAR VARIABLE . ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> FOR PAR_I VAR VARIABLE . ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> FOR PAR_I VAR VARIABLE . ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D

    ITERATOR        shift and go to state 362


state 239

    (171) for -> FOR PAR_I VARIABLE ITERATOR . VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> FOR PAR_I VARIABLE ITERATOR . INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> FOR PAR_I VARIABLE ITERATOR . INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D

    VARIABLE        shift and go to state 363
    INT             shift and go to state 364


state 240

    (215) if -> IF PAR_I condicional PAR_D . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 365


state 241

    (1) inicio -> OBJECT VARIABLE LLAVE_I cuerpo LLAVE_D .

    $end            reduce using rule 1 (inicio -> OBJECT VARIABLE LLAVE_I cuerpo LLAVE_D .)


state 242

    (143) varparen -> varparen PAR_I valores PAR_D .

    PAR_I           reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    $end            reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    LLAVE_D         reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    VAR             reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    VAL             reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    VARIABLE        reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    PRINTLN         reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    PRINT           reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    READLINE        reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    WHILE           reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    FOR             reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    IF              reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    INT             reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    LONG            reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    FLOAT           reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    DOUBLE          reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    RETURN          reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    PUNTO           reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    DEF             reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)
    CASE            reduce using rule 143 (varparen -> varparen PAR_I valores PAR_D .)


state 243

    (176) match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .

    DEF             reduce using rule 176 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    VARIABLE        reduce using rule 176 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    PRINTLN         reduce using rule 176 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    PRINT           reduce using rule 176 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    READLINE        reduce using rule 176 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    VAR             reduce using rule 176 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    VAL             reduce using rule 176 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    WHILE           reduce using rule 176 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    FOR             reduce using rule 176 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    IF              reduce using rule 176 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    $end            reduce using rule 176 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    LLAVE_D         reduce using rule 176 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    INT             reduce using rule 176 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    LONG            reduce using rule 176 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    FLOAT           reduce using rule 176 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    DOUBLE          reduce using rule 176 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)
    RETURN          reduce using rule 176 (match -> VARIABLE MATCH LLAVE_I cases LLAVE_D .)


state 244

    (186) casesInt -> caseInt casesInt .

    LLAVE_D         reduce using rule 186 (casesInt -> caseInt casesInt .)


state 245

    (187) casesInt -> caseInt defcase .

    LLAVE_D         reduce using rule 187 (casesInt -> caseInt defcase .)


state 246

    (212) defcase -> CASE . SUBGUION FUNCION_FLECHA codeBlock
    (184) caseInt -> CASE . INT FUNCION_FLECHA codeBlock

    SUBGUION        shift and go to state 366
    INT             shift and go to state 265


state 247

    (190) casesLgn -> caseLgn casesLgn .

    LLAVE_D         reduce using rule 190 (casesLgn -> caseLgn casesLgn .)


state 248

    (191) casesLgn -> caseLgn defcase .

    LLAVE_D         reduce using rule 191 (casesLgn -> caseLgn defcase .)


state 249

    (212) defcase -> CASE . SUBGUION FUNCION_FLECHA codeBlock
    (188) caseLgn -> CASE . LONG FUNCION_FLECHA codeBlock

    SUBGUION        shift and go to state 366
    LONG            shift and go to state 266


state 250

    (194) casesFlt -> caseFlt casesFlt .

    LLAVE_D         reduce using rule 194 (casesFlt -> caseFlt casesFlt .)


state 251

    (195) casesFlt -> caseFlt defcase .

    LLAVE_D         reduce using rule 195 (casesFlt -> caseFlt defcase .)


state 252

    (212) defcase -> CASE . SUBGUION FUNCION_FLECHA codeBlock
    (192) caseFlt -> CASE . FLOAT FUNCION_FLECHA codeBlock

    SUBGUION        shift and go to state 366
    FLOAT           shift and go to state 267


state 253

    (198) casesDob -> caseDob casesDob .

    LLAVE_D         reduce using rule 198 (casesDob -> caseDob casesDob .)


state 254

    (199) casesDob -> caseDob defcase .

    LLAVE_D         reduce using rule 199 (casesDob -> caseDob defcase .)


state 255

    (212) defcase -> CASE . SUBGUION FUNCION_FLECHA codeBlock
    (196) caseDob -> CASE . DOUBLE FUNCION_FLECHA codeBlock

    SUBGUION        shift and go to state 366
    DOUBLE          shift and go to state 268


state 256

    (202) casesStr -> caseStr casesStr .

    LLAVE_D         reduce using rule 202 (casesStr -> caseStr casesStr .)


state 257

    (203) casesStr -> caseStr defcase .

    LLAVE_D         reduce using rule 203 (casesStr -> caseStr defcase .)


state 258

    (212) defcase -> CASE . SUBGUION FUNCION_FLECHA codeBlock
    (200) caseStr -> CASE . STRING FUNCION_FLECHA codeBlock

    SUBGUION        shift and go to state 366
    STRING          shift and go to state 269


state 259

    (206) casesChar -> caseChar casesChar .

    LLAVE_D         reduce using rule 206 (casesChar -> caseChar casesChar .)


state 260

    (207) casesChar -> caseChar defcase .

    LLAVE_D         reduce using rule 207 (casesChar -> caseChar defcase .)


state 261

    (212) defcase -> CASE . SUBGUION FUNCION_FLECHA codeBlock
    (204) caseChar -> CASE . CHAR FUNCION_FLECHA codeBlock

    SUBGUION        shift and go to state 366
    CHAR            shift and go to state 270


state 262

    (210) casesBool -> caseBool casesBool .

    LLAVE_D         reduce using rule 210 (casesBool -> caseBool casesBool .)


state 263

    (211) casesBool -> caseBool defcase .

    LLAVE_D         reduce using rule 211 (casesBool -> caseBool defcase .)


state 264

    (212) defcase -> CASE . SUBGUION FUNCION_FLECHA codeBlock
    (208) caseBool -> CASE . booleanos FUNCION_FLECHA codeBlock
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    SUBGUION        shift and go to state 366
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    booleanos                      shift and go to state 271

state 265

    (184) caseInt -> CASE INT . FUNCION_FLECHA codeBlock

    FUNCION_FLECHA  shift and go to state 367


state 266

    (188) caseLgn -> CASE LONG . FUNCION_FLECHA codeBlock

    FUNCION_FLECHA  shift and go to state 368


state 267

    (192) caseFlt -> CASE FLOAT . FUNCION_FLECHA codeBlock

    FUNCION_FLECHA  shift and go to state 369


state 268

    (196) caseDob -> CASE DOUBLE . FUNCION_FLECHA codeBlock

    FUNCION_FLECHA  shift and go to state 370


state 269

    (200) caseStr -> CASE STRING . FUNCION_FLECHA codeBlock

    FUNCION_FLECHA  shift and go to state 371


state 270

    (204) caseChar -> CASE CHAR . FUNCION_FLECHA codeBlock

    FUNCION_FLECHA  shift and go to state 372


state 271

    (208) caseBool -> CASE booleanos . FUNCION_FLECHA codeBlock

    FUNCION_FLECHA  shift and go to state 373


state 272

    (165) valores -> valor COMA valores .

    PAR_D           reduce using rule 165 (valores -> valor COMA valores .)


state 273

    (102) valor -> VARIABLE PAR_I VARIABLE . PAR_D

    PAR_D           shift and go to state 374


state 274

    (103) valor -> VARIABLE PAR_I INT . PAR_D

    PAR_D           shift and go to state 375


state 275

    (4) io -> VARIABLE PUNTO VARIABLE PUNTO . VARIABLE PUNTO READLINE

    VARIABLE        shift and go to state 376


state 276

    (218) elseif -> ELSE IF PAR_I condicional . PAR_D LLAVE_I contenido LLAVE_D
    (219) elseif -> ELSE IF PAR_I condicional . PAR_D LLAVE_I contenido LLAVE_D elseif

    PAR_D           shift and go to state 377


state 277

    (220) else -> ELSE LLAVE_I contenido LLAVE_D .

    ELSE            reduce using rule 220 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    DEF             reduce using rule 220 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 220 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 220 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 220 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 220 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 220 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 220 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 220 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 220 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 220 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 220 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 220 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 220 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 220 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 220 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 220 (else -> ELSE LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 220 (else -> ELSE LLAVE_I contenido LLAVE_D .)


state 278

    (30) contenido -> asignacion contenido .

    LLAVE_D         reduce using rule 30 (contenido -> asignacion contenido .)
    RETURN          reduce using rule 30 (contenido -> asignacion contenido .)


state 279

    (31) contenido -> reasignacion contenido .

    LLAVE_D         reduce using rule 31 (contenido -> reasignacion contenido .)
    RETURN          reduce using rule 31 (contenido -> reasignacion contenido .)


state 280

    (32) contenido -> funcall contenido .

    LLAVE_D         reduce using rule 32 (contenido -> funcall contenido .)
    RETURN          reduce using rule 32 (contenido -> funcall contenido .)


state 281

    (33) contenido -> impresion contenido .

    LLAVE_D         reduce using rule 33 (contenido -> impresion contenido .)
    RETURN          reduce using rule 33 (contenido -> impresion contenido .)


state 282

    (34) contenido -> entrada contenido .

    LLAVE_D         reduce using rule 34 (contenido -> entrada contenido .)
    RETURN          reduce using rule 34 (contenido -> entrada contenido .)


state 283

    (35) contenido -> while contenido .

    LLAVE_D         reduce using rule 35 (contenido -> while contenido .)
    RETURN          reduce using rule 35 (contenido -> while contenido .)


state 284

    (36) contenido -> for contenido .

    LLAVE_D         reduce using rule 36 (contenido -> for contenido .)
    RETURN          reduce using rule 36 (contenido -> for contenido .)


state 285

    (38) contenido -> match contenido .

    LLAVE_D         reduce using rule 38 (contenido -> match contenido .)
    RETURN          reduce using rule 38 (contenido -> match contenido .)


state 286

    (37) contenido -> if contenido .

    LLAVE_D         reduce using rule 37 (contenido -> if contenido .)
    RETURN          reduce using rule 37 (contenido -> if contenido .)


state 287

    (39) contenido -> aritmetica contenido .

    LLAVE_D         reduce using rule 39 (contenido -> aritmetica contenido .)
    RETURN          reduce using rule 39 (contenido -> aritmetica contenido .)


state 288

    (84) reasignacion -> VARIABLE IGUAL . valor
    (85) reasignacion -> VARIABLE IGUAL . returnfun
    (86) reasignacion -> VARIABLE IGUAL . aritmetica
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (145) returnfun -> . returnCastable
    (146) returnfun -> . castingcall
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE
    (147) returnCastable -> . entrada
    (148) returnCastable -> . funcall
    (149) castingcall -> . returnCastable PUNTO castingfun
    (150) castingcall -> . VARIABLE PUNTO castingfun
    (139) entrada -> . READLINE PAR_I PAR_D
    (140) funcall -> . VARIABLE varparen

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 378
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    READLINE        shift and go to state 18

    valor                          shift and go to state 379
    returnfun                      shift and go to state 380
    aritmetica                     shift and go to state 381
    numeros                        shift and go to state 382
    booleanos                      shift and go to state 69
    returnCastable                 shift and go to state 168
    castingcall                    shift and go to state 169
    entrada                        shift and go to state 177
    funcall                        shift and go to state 178

state 289

    (87) reasignacion -> VARIABLE PAR_I . INT PAR_D IGUAL valor
    (141) varparen -> PAR_I . valores PAR_D
    (142) varparen -> PAR_I . PAR_D
    (164) valores -> . valor
    (165) valores -> . valor COMA valores
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    INT             shift and go to state 383
    PAR_D           shift and go to state 63
    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valor                          shift and go to state 64
    valores                        shift and go to state 62
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 290

    (110) funcion -> DEF VARIABLE parametro IGUAL LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 384
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 291

    (111) funcion -> DEF VARIABLE parametro LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 385


state 292

    (118) funcion -> DEF VARIABLE parametro dectipo IGUAL . LLAVE_I contenido RETURN valor LLAVE_D
    (119) funcion -> DEF VARIABLE parametro dectipo IGUAL . LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (120) funcion -> DEF VARIABLE parametro dectipo IGUAL . LLAVE_I contenido RETURN returnfun LLAVE_D
    (121) funcion -> DEF VARIABLE parametro dectipo IGUAL . LLAVE_I contenido RETURN aritmetica LLAVE_D
    (122) funcion -> DEF VARIABLE parametro dectipo IGUAL . LLAVE_I RETURN valor LLAVE_D
    (123) funcion -> DEF VARIABLE parametro dectipo IGUAL . LLAVE_I RETURN VARIABLE LLAVE_D
    (124) funcion -> DEF VARIABLE parametro dectipo IGUAL . LLAVE_I RETURN returnfun LLAVE_D
    (125) funcion -> DEF VARIABLE parametro dectipo IGUAL . LLAVE_I RETURN aritmetica LLAVE_D

    LLAVE_I         shift and go to state 386


state 293

    (126) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL . LLAVE_I contenido RETURN tuple LLAVE_D
    (127) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL . LLAVE_I contenido RETURN VARIABLE LLAVE_D
    (128) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL . LLAVE_I contenido RETURN returnfun LLAVE_D

    LLAVE_I         shift and go to state 387


state 294

    (129) dectipo -> DOBLE_PUNTO tipo .

    IGUAL           reduce using rule 129 (dectipo -> DOBLE_PUNTO tipo .)


state 295

    (130) dectipoTupla -> DOBLE_PUNTO PAR_I . tipos PAR_D
    (131) tipos -> . tipo
    (132) tipos -> . tipo tiposentry
    (88) tipo -> . CHARCLASS
    (89) tipo -> . STRINGCLASS
    (90) tipo -> . BOOLCLASS
    (91) tipo -> . INTCLASS
    (92) tipo -> . LONGCLASS
    (93) tipo -> . DOUBLECLASS
    (94) tipo -> . FLOATCLASS
    (95) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (96) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    CHARCLASS       shift and go to state 296
    STRINGCLASS     shift and go to state 297
    BOOLCLASS       shift and go to state 298
    INTCLASS        shift and go to state 299
    LONGCLASS       shift and go to state 300
    DOUBLECLASS     shift and go to state 301
    FLOATCLASS      shift and go to state 302
    ARRAYCLASS      shift and go to state 303
    LISTCLASS       shift and go to state 304

    tipos                          shift and go to state 388
    tipo                           shift and go to state 389

state 296

    (88) tipo -> CHARCLASS .

    IGUAL           reduce using rule 88 (tipo -> CHARCLASS .)
    COMA            reduce using rule 88 (tipo -> CHARCLASS .)
    PAR_D           reduce using rule 88 (tipo -> CHARCLASS .)
    CORCHETE_D      reduce using rule 88 (tipo -> CHARCLASS .)


state 297

    (89) tipo -> STRINGCLASS .

    IGUAL           reduce using rule 89 (tipo -> STRINGCLASS .)
    COMA            reduce using rule 89 (tipo -> STRINGCLASS .)
    PAR_D           reduce using rule 89 (tipo -> STRINGCLASS .)
    CORCHETE_D      reduce using rule 89 (tipo -> STRINGCLASS .)


state 298

    (90) tipo -> BOOLCLASS .

    IGUAL           reduce using rule 90 (tipo -> BOOLCLASS .)
    COMA            reduce using rule 90 (tipo -> BOOLCLASS .)
    PAR_D           reduce using rule 90 (tipo -> BOOLCLASS .)
    CORCHETE_D      reduce using rule 90 (tipo -> BOOLCLASS .)


state 299

    (91) tipo -> INTCLASS .

    IGUAL           reduce using rule 91 (tipo -> INTCLASS .)
    COMA            reduce using rule 91 (tipo -> INTCLASS .)
    PAR_D           reduce using rule 91 (tipo -> INTCLASS .)
    CORCHETE_D      reduce using rule 91 (tipo -> INTCLASS .)


state 300

    (92) tipo -> LONGCLASS .

    IGUAL           reduce using rule 92 (tipo -> LONGCLASS .)
    COMA            reduce using rule 92 (tipo -> LONGCLASS .)
    PAR_D           reduce using rule 92 (tipo -> LONGCLASS .)
    CORCHETE_D      reduce using rule 92 (tipo -> LONGCLASS .)


state 301

    (93) tipo -> DOUBLECLASS .

    IGUAL           reduce using rule 93 (tipo -> DOUBLECLASS .)
    COMA            reduce using rule 93 (tipo -> DOUBLECLASS .)
    PAR_D           reduce using rule 93 (tipo -> DOUBLECLASS .)
    CORCHETE_D      reduce using rule 93 (tipo -> DOUBLECLASS .)


state 302

    (94) tipo -> FLOATCLASS .

    IGUAL           reduce using rule 94 (tipo -> FLOATCLASS .)
    COMA            reduce using rule 94 (tipo -> FLOATCLASS .)
    PAR_D           reduce using rule 94 (tipo -> FLOATCLASS .)
    CORCHETE_D      reduce using rule 94 (tipo -> FLOATCLASS .)


state 303

    (95) tipo -> ARRAYCLASS . CORCHETE_I tipo CORCHETE_D

    CORCHETE_I      shift and go to state 390


state 304

    (96) tipo -> LISTCLASS . CORCHETE_I tipo CORCHETE_D

    CORCHETE_I      shift and go to state 391


state 305

    (116) parametros -> PAR_I declaracion PAR_D .
    (117) parametros -> PAR_I declaracion PAR_D . parametros
    (116) parametros -> . PAR_I declaracion PAR_D
    (117) parametros -> . PAR_I declaracion PAR_D parametros

    IGUAL           reduce using rule 116 (parametros -> PAR_I declaracion PAR_D .)
    LLAVE_I         reduce using rule 116 (parametros -> PAR_I declaracion PAR_D .)
    DOBLE_PUNTO     reduce using rule 116 (parametros -> PAR_I declaracion PAR_D .)
    PAR_I           shift and go to state 392

    parametros                     shift and go to state 393

state 306

    (112) declaracion -> VARIABLE DOBLE_PUNTO . tipo
    (113) declaracion -> VARIABLE DOBLE_PUNTO . tipo IGUAL valor
    (88) tipo -> . CHARCLASS
    (89) tipo -> . STRINGCLASS
    (90) tipo -> . BOOLCLASS
    (91) tipo -> . INTCLASS
    (92) tipo -> . LONGCLASS
    (93) tipo -> . DOUBLECLASS
    (94) tipo -> . FLOATCLASS
    (95) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (96) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    CHARCLASS       shift and go to state 296
    STRINGCLASS     shift and go to state 297
    BOOLCLASS       shift and go to state 298
    INTCLASS        shift and go to state 299
    LONGCLASS       shift and go to state 300
    DOUBLECLASS     shift and go to state 301
    FLOATCLASS      shift and go to state 302
    ARRAYCLASS      shift and go to state 303
    LISTCLASS       shift and go to state 304

    tipo                           shift and go to state 394

state 307

    (137) valorI -> valor MAS valorI .

    PAR_D           reduce using rule 137 (valorI -> valor MAS valorI .)


state 308

    (150) castingcall -> VARIABLE PUNTO . castingfun
    (151) castingfun -> . TO_INT
    (152) castingfun -> . TO_DOUBLE
    (153) castingfun -> . TO_FLOAT
    (154) castingfun -> . TO_LONG

    TO_INT          shift and go to state 396
    TO_DOUBLE       shift and go to state 397
    TO_FLOAT        shift and go to state 398
    TO_LONG         shift and go to state 399

    castingfun                     shift and go to state 395

state 309

    (320) stringCastLong -> STRING PUNTO . TO_LONG
    (319) stringCastInt -> STRING PUNTO . TO_INT
    (321) stringCastFloat -> STRING PUNTO . TO_FLOAT
    (322) stringCastDouble -> STRING PUNTO . TO_DOUBLE

    TO_LONG         shift and go to state 400
    TO_INT          shift and go to state 401
    TO_FLOAT        shift and go to state 402
    TO_DOUBLE       shift and go to state 403


state 310

    (155) array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I . valores PAR_D
    (164) valores -> . valor
    (165) valores -> . valor COMA valores
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valores                        shift and go to state 404
    valor                          shift and go to state 64
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 311

    (166) tuple -> PAR_I valores . PAR_D

    PAR_D           shift and go to state 405


state 312

    (149) castingcall -> returnCastable PUNTO . castingfun
    (151) castingfun -> . TO_INT
    (152) castingfun -> . TO_DOUBLE
    (153) castingfun -> . TO_FLOAT
    (154) castingfun -> . TO_LONG

    TO_INT          shift and go to state 396
    TO_DOUBLE       shift and go to state 397
    TO_FLOAT        shift and go to state 398
    TO_LONG         shift and go to state 399

    castingfun                     shift and go to state 406

state 313

    (60) asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL . VARIABLE
    (299) asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL . longvalues
    (302) longvalues -> . INT
    (303) longvalues -> . intvalues
    (304) longvalues -> . stringCastLong
    (296) intvalues -> . INT
    (297) intvalues -> . stringCastInt
    (320) stringCastLong -> . STRING PUNTO TO_LONG
    (319) stringCastInt -> . STRING PUNTO TO_INT

    VARIABLE        shift and go to state 407
    INT             shift and go to state 409
    STRING          shift and go to state 411

    longvalues                     shift and go to state 408
    intvalues                      shift and go to state 410
    stringCastLong                 shift and go to state 171
    stringCastInt                  shift and go to state 172

state 314

    (293) asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL . intvalues
    (296) intvalues -> . INT
    (297) intvalues -> . stringCastInt
    (319) stringCastInt -> . STRING PUNTO TO_INT

    INT             shift and go to state 413
    STRING          shift and go to state 414

    intvalues                      shift and go to state 412
    stringCastInt                  shift and go to state 172

state 315

    (62) asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL . VARIABLE
    (306) asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL . floatvalues
    (309) floatvalues -> . FLOAT
    (310) floatvalues -> . longvalues
    (311) floatvalues -> . stringCastFloat
    (302) longvalues -> . INT
    (303) longvalues -> . intvalues
    (304) longvalues -> . stringCastLong
    (321) stringCastFloat -> . STRING PUNTO TO_FLOAT
    (296) intvalues -> . INT
    (297) intvalues -> . stringCastInt
    (320) stringCastLong -> . STRING PUNTO TO_LONG
    (319) stringCastInt -> . STRING PUNTO TO_INT

    VARIABLE        shift and go to state 415
    FLOAT           shift and go to state 417
    INT             shift and go to state 409
    STRING          shift and go to state 419

    floatvalues                    shift and go to state 416
    longvalues                     shift and go to state 418
    stringCastFloat                shift and go to state 174
    intvalues                      shift and go to state 410
    stringCastLong                 shift and go to state 171
    stringCastInt                  shift and go to state 172

state 316

    (64) asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL . VARIABLE
    (313) asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL . doublevalues
    (316) doublevalues -> . DOUBLE
    (317) doublevalues -> . floatvalues
    (318) doublevalues -> . stringCastDouble
    (309) floatvalues -> . FLOAT
    (310) floatvalues -> . longvalues
    (311) floatvalues -> . stringCastFloat
    (322) stringCastDouble -> . STRING PUNTO TO_DOUBLE
    (302) longvalues -> . INT
    (303) longvalues -> . intvalues
    (304) longvalues -> . stringCastLong
    (321) stringCastFloat -> . STRING PUNTO TO_FLOAT
    (296) intvalues -> . INT
    (297) intvalues -> . stringCastInt
    (320) stringCastLong -> . STRING PUNTO TO_LONG
    (319) stringCastInt -> . STRING PUNTO TO_INT

    VARIABLE        shift and go to state 420
    DOUBLE          shift and go to state 422
    FLOAT           shift and go to state 417
    STRING          shift and go to state 424
    INT             shift and go to state 409

    doublevalues                   shift and go to state 421
    floatvalues                    shift and go to state 423
    stringCastDouble               shift and go to state 176
    longvalues                     shift and go to state 418
    stringCastFloat                shift and go to state 174
    intvalues                      shift and go to state 410
    stringCastLong                 shift and go to state 171
    stringCastInt                  shift and go to state 172

state 317

    (67) asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL . STRING
    (70) asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL . VARIABLE

    STRING          shift and go to state 426
    VARIABLE        shift and go to state 425


state 318

    (73) asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL . CHAR
    (76) asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL . VARIABLE

    CHAR            shift and go to state 428
    VARIABLE        shift and go to state 427


state 319

    (79) asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL . booleanos
    (82) asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL . VARIABLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    VARIABLE        shift and go to state 429
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    booleanos                      shift and go to state 430

state 320

    (156) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I . tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (264) arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I . INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I . DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D
    (88) tipo -> . CHARCLASS
    (89) tipo -> . STRINGCLASS
    (90) tipo -> . BOOLCLASS
    (91) tipo -> . INTCLASS
    (92) tipo -> . LONGCLASS
    (93) tipo -> . DOUBLECLASS
    (94) tipo -> . FLOATCLASS
    (95) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (96) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    INTCLASS        shift and go to state 432
    DOUBLECLASS     shift and go to state 433
    CHARCLASS       shift and go to state 296
    STRINGCLASS     shift and go to state 297
    BOOLCLASS       shift and go to state 298
    LONGCLASS       shift and go to state 300
    FLOATCLASS      shift and go to state 302
    ARRAYCLASS      shift and go to state 303
    LISTCLASS       shift and go to state 304

    tipo                           shift and go to state 431

state 321

    (272) dectupla -> PAR_I STRINGCLASS . COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D
    (273) dectupla -> PAR_I STRINGCLASS . COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D
    (274) dectupla -> PAR_I STRINGCLASS . COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D
    (275) dectupla -> PAR_I STRINGCLASS . COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D

    COMA            shift and go to state 434


state 322

    (288) dectupla -> PAR_I INTCLASS . COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D
    (289) dectupla -> PAR_I INTCLASS . COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D
    (290) dectupla -> PAR_I INTCLASS . COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D
    (291) dectupla -> PAR_I INTCLASS . COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D

    COMA            shift and go to state 435


state 323

    (284) dectupla -> PAR_I LONGCLASS . COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D
    (285) dectupla -> PAR_I LONGCLASS . COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D
    (286) dectupla -> PAR_I LONGCLASS . COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D
    (287) dectupla -> PAR_I LONGCLASS . COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D

    COMA            shift and go to state 436


state 324

    (280) dectupla -> PAR_I DOUBLECLASS . COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D
    (281) dectupla -> PAR_I DOUBLECLASS . COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D
    (282) dectupla -> PAR_I DOUBLECLASS . COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D
    (283) dectupla -> PAR_I DOUBLECLASS . COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D

    COMA            shift and go to state 437


state 325

    (276) dectupla -> PAR_I FLOATCLASS . COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D
    (277) dectupla -> PAR_I FLOATCLASS . COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D
    (278) dectupla -> PAR_I FLOATCLASS . COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D
    (279) dectupla -> PAR_I FLOATCLASS . COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D

    COMA            shift and go to state 438


state 326

    (157) array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I . valores PAR_D
    (164) valores -> . valor
    (165) valores -> . valor COMA valores
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valores                        shift and go to state 439
    valor                          shift and go to state 64
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 327

    (161) list -> VAL VARIABLE IGUAL LISTCLASS PAR_I . valores PAR_D
    (164) valores -> . valor
    (165) valores -> . valor COMA valores
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valores                        shift and go to state 440
    valor                          shift and go to state 64
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 328

    (61) asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL . VARIABLE
    (301) asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL . longvalues
    (302) longvalues -> . INT
    (303) longvalues -> . intvalues
    (304) longvalues -> . stringCastLong
    (296) intvalues -> . INT
    (297) intvalues -> . stringCastInt
    (320) stringCastLong -> . STRING PUNTO TO_LONG
    (319) stringCastInt -> . STRING PUNTO TO_INT

    VARIABLE        shift and go to state 441
    INT             shift and go to state 409
    STRING          shift and go to state 411

    longvalues                     shift and go to state 442
    intvalues                      shift and go to state 410
    stringCastLong                 shift and go to state 171
    stringCastInt                  shift and go to state 172

state 329

    (295) asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL . intvalues
    (296) intvalues -> . INT
    (297) intvalues -> . stringCastInt
    (319) stringCastInt -> . STRING PUNTO TO_INT

    INT             shift and go to state 413
    STRING          shift and go to state 414

    intvalues                      shift and go to state 443
    stringCastInt                  shift and go to state 172

state 330

    (63) asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL . VARIABLE
    (308) asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL . floatvalues
    (309) floatvalues -> . FLOAT
    (310) floatvalues -> . longvalues
    (311) floatvalues -> . stringCastFloat
    (302) longvalues -> . INT
    (303) longvalues -> . intvalues
    (304) longvalues -> . stringCastLong
    (321) stringCastFloat -> . STRING PUNTO TO_FLOAT
    (296) intvalues -> . INT
    (297) intvalues -> . stringCastInt
    (320) stringCastLong -> . STRING PUNTO TO_LONG
    (319) stringCastInt -> . STRING PUNTO TO_INT

    VARIABLE        shift and go to state 444
    FLOAT           shift and go to state 417
    INT             shift and go to state 409
    STRING          shift and go to state 419

    floatvalues                    shift and go to state 445
    longvalues                     shift and go to state 418
    stringCastFloat                shift and go to state 174
    intvalues                      shift and go to state 410
    stringCastLong                 shift and go to state 171
    stringCastInt                  shift and go to state 172

state 331

    (65) asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL . VARIABLE
    (315) asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL . doublevalues
    (316) doublevalues -> . DOUBLE
    (317) doublevalues -> . floatvalues
    (318) doublevalues -> . stringCastDouble
    (309) floatvalues -> . FLOAT
    (310) floatvalues -> . longvalues
    (311) floatvalues -> . stringCastFloat
    (322) stringCastDouble -> . STRING PUNTO TO_DOUBLE
    (302) longvalues -> . INT
    (303) longvalues -> . intvalues
    (304) longvalues -> . stringCastLong
    (321) stringCastFloat -> . STRING PUNTO TO_FLOAT
    (296) intvalues -> . INT
    (297) intvalues -> . stringCastInt
    (320) stringCastLong -> . STRING PUNTO TO_LONG
    (319) stringCastInt -> . STRING PUNTO TO_INT

    VARIABLE        shift and go to state 446
    DOUBLE          shift and go to state 422
    FLOAT           shift and go to state 417
    STRING          shift and go to state 424
    INT             shift and go to state 409

    doublevalues                   shift and go to state 447
    floatvalues                    shift and go to state 423
    stringCastDouble               shift and go to state 176
    longvalues                     shift and go to state 418
    stringCastFloat                shift and go to state 174
    intvalues                      shift and go to state 410
    stringCastLong                 shift and go to state 171
    stringCastInt                  shift and go to state 172

state 332

    (69) asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL . STRING
    (71) asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL . VARIABLE

    STRING          shift and go to state 449
    VARIABLE        shift and go to state 448


state 333

    (75) asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL . CHAR
    (77) asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL . VARIABLE

    CHAR            shift and go to state 451
    VARIABLE        shift and go to state 450


state 334

    (81) asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL . booleanos
    (83) asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL . VARIABLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    VARIABLE        shift and go to state 452
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    booleanos                      shift and go to state 453

state 335

    (158) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I . tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (88) tipo -> . CHARCLASS
    (89) tipo -> . STRINGCLASS
    (90) tipo -> . BOOLCLASS
    (91) tipo -> . INTCLASS
    (92) tipo -> . LONGCLASS
    (93) tipo -> . DOUBLECLASS
    (94) tipo -> . FLOATCLASS
    (95) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (96) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    CHARCLASS       shift and go to state 296
    STRINGCLASS     shift and go to state 297
    BOOLCLASS       shift and go to state 298
    INTCLASS        shift and go to state 299
    LONGCLASS       shift and go to state 300
    DOUBLECLASS     shift and go to state 301
    FLOATCLASS      shift and go to state 302
    ARRAYCLASS      shift and go to state 303
    LISTCLASS       shift and go to state 304

    tipo                           shift and go to state 454

state 336

    (162) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I . tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I . tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (88) tipo -> . CHARCLASS
    (89) tipo -> . STRINGCLASS
    (90) tipo -> . BOOLCLASS
    (91) tipo -> . INTCLASS
    (92) tipo -> . LONGCLASS
    (93) tipo -> . DOUBLECLASS
    (94) tipo -> . FLOATCLASS
    (95) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (96) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    CHARCLASS       shift and go to state 296
    STRINGCLASS     shift and go to state 297
    BOOLCLASS       shift and go to state 298
    INTCLASS        shift and go to state 299
    LONGCLASS       shift and go to state 300
    DOUBLECLASS     shift and go to state 301
    FLOATCLASS      shift and go to state 302
    ARRAYCLASS      shift and go to state 303
    LISTCLASS       shift and go to state 304

    tipo                           shift and go to state 455

state 337

    (169) while -> WHILE PAR_I condicional PAR_D LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 456
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 338

    (222) condicional -> valorC logicos condicional .

    PAR_D           reduce using rule 222 (condicional -> valorC logicos condicional .)


state 339

    (248) relacional -> VARIABLE comparacion VARIABLE .

    AND             reduce using rule 248 (relacional -> VARIABLE comparacion VARIABLE .)
    OR              reduce using rule 248 (relacional -> VARIABLE comparacion VARIABLE .)
    NOT             reduce using rule 248 (relacional -> VARIABLE comparacion VARIABLE .)
    PAR_D           reduce using rule 248 (relacional -> VARIABLE comparacion VARIABLE .)


state 340

    (240) relacional -> VARIABLE comparacion numeros .

    AND             reduce using rule 240 (relacional -> VARIABLE comparacion numeros .)
    OR              reduce using rule 240 (relacional -> VARIABLE comparacion numeros .)
    NOT             reduce using rule 240 (relacional -> VARIABLE comparacion numeros .)
    PAR_D           reduce using rule 240 (relacional -> VARIABLE comparacion numeros .)


state 341

    (242) relacional -> VARIABLE comparacion booleanos .

    AND             reduce using rule 242 (relacional -> VARIABLE comparacion booleanos .)
    OR              reduce using rule 242 (relacional -> VARIABLE comparacion booleanos .)
    NOT             reduce using rule 242 (relacional -> VARIABLE comparacion booleanos .)
    PAR_D           reduce using rule 242 (relacional -> VARIABLE comparacion booleanos .)


state 342

    (244) relacional -> VARIABLE comparacion STRING .

    AND             reduce using rule 244 (relacional -> VARIABLE comparacion STRING .)
    OR              reduce using rule 244 (relacional -> VARIABLE comparacion STRING .)
    NOT             reduce using rule 244 (relacional -> VARIABLE comparacion STRING .)
    PAR_D           reduce using rule 244 (relacional -> VARIABLE comparacion STRING .)


state 343

    (246) relacional -> VARIABLE comparacion CHAR .

    AND             reduce using rule 246 (relacional -> VARIABLE comparacion CHAR .)
    OR              reduce using rule 246 (relacional -> VARIABLE comparacion CHAR .)
    NOT             reduce using rule 246 (relacional -> VARIABLE comparacion CHAR .)
    PAR_D           reduce using rule 246 (relacional -> VARIABLE comparacion CHAR .)


state 344

    (256) aritmetica -> VARIABLE aritmeticos VARIABLE .

    IGUAL_COMPARACION reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    DIFERENTE       reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    MAYOR           reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    MENOR           reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    MENOS           reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    MAS             reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    MULTIPLICACION  reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    DIVISION        reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    MOD             reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    VAR             reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    VAL             reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    VARIABLE        reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    PRINTLN         reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    PRINT           reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    READLINE        reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    WHILE           reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    FOR             reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    IF              reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    INT             reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    LONG            reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    FLOAT           reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    DOUBLE          reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    LLAVE_D         reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    DEF             reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    $end            reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    RETURN          reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    CASE            reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    AND             reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    OR              reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    NOT             reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)
    PAR_D           reduce using rule 256 (aritmetica -> VARIABLE aritmeticos VARIABLE .)


state 345

    (254) aritmetica -> VARIABLE aritmeticos numeros .

    IGUAL_COMPARACION reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    DIFERENTE       reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    MAYOR           reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    MENOR           reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    MENOS           reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    MAS             reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    MULTIPLICACION  reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    DIVISION        reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    MOD             reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    VAR             reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    VAL             reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    VARIABLE        reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    PRINTLN         reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    PRINT           reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    READLINE        reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    WHILE           reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    FOR             reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    IF              reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    INT             reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    LONG            reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    FLOAT           reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    DOUBLE          reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    LLAVE_D         reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    DEF             reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    $end            reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    RETURN          reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    CASE            reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    AND             reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    OR              reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    NOT             reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)
    PAR_D           reduce using rule 254 (aritmetica -> VARIABLE aritmeticos numeros .)


state 346

    (237) relacional -> booleanos comparacion booleanos .

    AND             reduce using rule 237 (relacional -> booleanos comparacion booleanos .)
    OR              reduce using rule 237 (relacional -> booleanos comparacion booleanos .)
    NOT             reduce using rule 237 (relacional -> booleanos comparacion booleanos .)
    PAR_D           reduce using rule 237 (relacional -> booleanos comparacion booleanos .)


state 347

    (243) relacional -> booleanos comparacion VARIABLE .

    AND             reduce using rule 243 (relacional -> booleanos comparacion VARIABLE .)
    OR              reduce using rule 243 (relacional -> booleanos comparacion VARIABLE .)
    NOT             reduce using rule 243 (relacional -> booleanos comparacion VARIABLE .)
    PAR_D           reduce using rule 243 (relacional -> booleanos comparacion VARIABLE .)


state 348

    (233) relacional -> numeros comparacion numeros .
    (253) aritmetica -> numeros . aritmeticos numeros
    (255) aritmetica -> numeros . aritmeticos VARIABLE
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD

    AND             reduce using rule 233 (relacional -> numeros comparacion numeros .)
    OR              reduce using rule 233 (relacional -> numeros comparacion numeros .)
    NOT             reduce using rule 233 (relacional -> numeros comparacion numeros .)
    PAR_D           reduce using rule 233 (relacional -> numeros comparacion numeros .)
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    aritmeticos                    shift and go to state 233

state 349

    (236) relacional -> numeros comparacion aritmetica .
    (257) aritmetica -> aritmetica . aritmeticos numeros
    (258) aritmetica -> aritmetica . aritmeticos VARIABLE
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD

    AND             reduce using rule 236 (relacional -> numeros comparacion aritmetica .)
    OR              reduce using rule 236 (relacional -> numeros comparacion aritmetica .)
    NOT             reduce using rule 236 (relacional -> numeros comparacion aritmetica .)
    PAR_D           reduce using rule 236 (relacional -> numeros comparacion aritmetica .)
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    aritmeticos                    shift and go to state 235

state 350

    (241) relacional -> numeros comparacion VARIABLE .
    (254) aritmetica -> VARIABLE . aritmeticos numeros
    (256) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD

    AND             reduce using rule 241 (relacional -> numeros comparacion VARIABLE .)
    OR              reduce using rule 241 (relacional -> numeros comparacion VARIABLE .)
    NOT             reduce using rule 241 (relacional -> numeros comparacion VARIABLE .)
    PAR_D           reduce using rule 241 (relacional -> numeros comparacion VARIABLE .)
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    aritmeticos                    shift and go to state 218

state 351

    (253) aritmetica -> numeros aritmeticos numeros .

    IGUAL_COMPARACION reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    DIFERENTE       reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    MAYOR           reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    MENOR           reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    MENOS           reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    MAS             reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    MULTIPLICACION  reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    DIVISION        reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    MOD             reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    VAR             reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    VAL             reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    VARIABLE        reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    PRINTLN         reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    PRINT           reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    READLINE        reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    WHILE           reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    FOR             reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    IF              reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    INT             reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    LONG            reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    FLOAT           reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    DOUBLE          reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    LLAVE_D         reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    DEF             reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    $end            reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    RETURN          reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    CASE            reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    AND             reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    OR              reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    NOT             reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)
    PAR_D           reduce using rule 253 (aritmetica -> numeros aritmeticos numeros .)


state 352

    (255) aritmetica -> numeros aritmeticos VARIABLE .

    IGUAL_COMPARACION reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    DIFERENTE       reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    MAYOR           reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    MENOR           reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    MENOS           reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    MAS             reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    MULTIPLICACION  reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    DIVISION        reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    MOD             reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    VAR             reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    VAL             reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    VARIABLE        reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    PRINTLN         reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    PRINT           reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    READLINE        reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    WHILE           reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    FOR             reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    IF              reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    INT             reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    LONG            reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    FLOAT           reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    DOUBLE          reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    LLAVE_D         reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    DEF             reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    $end            reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    RETURN          reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    CASE            reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    AND             reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    OR              reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    NOT             reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)
    PAR_D           reduce using rule 255 (aritmetica -> numeros aritmeticos VARIABLE .)


state 353

    (234) relacional -> aritmetica comparacion aritmetica .
    (257) aritmetica -> aritmetica . aritmeticos numeros
    (258) aritmetica -> aritmetica . aritmeticos VARIABLE
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD

    AND             reduce using rule 234 (relacional -> aritmetica comparacion aritmetica .)
    OR              reduce using rule 234 (relacional -> aritmetica comparacion aritmetica .)
    NOT             reduce using rule 234 (relacional -> aritmetica comparacion aritmetica .)
    PAR_D           reduce using rule 234 (relacional -> aritmetica comparacion aritmetica .)
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    aritmeticos                    shift and go to state 235

state 354

    (235) relacional -> aritmetica comparacion numeros .
    (253) aritmetica -> numeros . aritmeticos numeros
    (255) aritmetica -> numeros . aritmeticos VARIABLE
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD

    AND             reduce using rule 235 (relacional -> aritmetica comparacion numeros .)
    OR              reduce using rule 235 (relacional -> aritmetica comparacion numeros .)
    NOT             reduce using rule 235 (relacional -> aritmetica comparacion numeros .)
    PAR_D           reduce using rule 235 (relacional -> aritmetica comparacion numeros .)
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    aritmeticos                    shift and go to state 233

state 355

    (254) aritmetica -> VARIABLE . aritmeticos numeros
    (256) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD

    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    aritmeticos                    shift and go to state 218

state 356

    (257) aritmetica -> aritmetica aritmeticos numeros .

    IGUAL_COMPARACION reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    DIFERENTE       reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    MAYOR           reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    MENOR           reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    MENOS           reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    MAS             reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    MULTIPLICACION  reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    DIVISION        reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    MOD             reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    VAR             reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    VAL             reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    VARIABLE        reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    PRINTLN         reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    PRINT           reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    READLINE        reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    WHILE           reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    FOR             reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    IF              reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    INT             reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    LONG            reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    FLOAT           reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    DOUBLE          reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    LLAVE_D         reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    DEF             reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    $end            reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    RETURN          reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    CASE            reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    AND             reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    OR              reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    NOT             reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)
    PAR_D           reduce using rule 257 (aritmetica -> aritmetica aritmeticos numeros .)


state 357

    (258) aritmetica -> aritmetica aritmeticos VARIABLE .

    IGUAL_COMPARACION reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    DIFERENTE       reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    MAYOR           reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    MENOR           reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    MENOS           reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    MAS             reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    MULTIPLICACION  reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    DIVISION        reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    MOD             reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    VAR             reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    VAL             reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    VARIABLE        reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    PRINTLN         reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    PRINT           reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    READLINE        reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    WHILE           reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    FOR             reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    IF              reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    INT             reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    LONG            reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    FLOAT           reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    DOUBLE          reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    LLAVE_D         reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    DEF             reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    $end            reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    RETURN          reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    CASE            reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    AND             reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    OR              reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    NOT             reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)
    PAR_D           reduce using rule 258 (aritmetica -> aritmetica aritmeticos VARIABLE .)


state 358

    (238) relacional -> STRING comparacion STRING .

    AND             reduce using rule 238 (relacional -> STRING comparacion STRING .)
    OR              reduce using rule 238 (relacional -> STRING comparacion STRING .)
    NOT             reduce using rule 238 (relacional -> STRING comparacion STRING .)
    PAR_D           reduce using rule 238 (relacional -> STRING comparacion STRING .)


state 359

    (245) relacional -> STRING comparacion VARIABLE .

    AND             reduce using rule 245 (relacional -> STRING comparacion VARIABLE .)
    OR              reduce using rule 245 (relacional -> STRING comparacion VARIABLE .)
    NOT             reduce using rule 245 (relacional -> STRING comparacion VARIABLE .)
    PAR_D           reduce using rule 245 (relacional -> STRING comparacion VARIABLE .)


state 360

    (239) relacional -> CHAR comparacion CHAR .

    AND             reduce using rule 239 (relacional -> CHAR comparacion CHAR .)
    OR              reduce using rule 239 (relacional -> CHAR comparacion CHAR .)
    NOT             reduce using rule 239 (relacional -> CHAR comparacion CHAR .)
    PAR_D           reduce using rule 239 (relacional -> CHAR comparacion CHAR .)


state 361

    (247) relacional -> CHAR comparacion VARIABLE .

    AND             reduce using rule 247 (relacional -> CHAR comparacion VARIABLE .)
    OR              reduce using rule 247 (relacional -> CHAR comparacion VARIABLE .)
    NOT             reduce using rule 247 (relacional -> CHAR comparacion VARIABLE .)
    PAR_D           reduce using rule 247 (relacional -> CHAR comparacion VARIABLE .)


state 362

    (170) for -> FOR PAR_I VAR VARIABLE ITERATOR . VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> FOR PAR_I VAR VARIABLE ITERATOR . INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> FOR PAR_I VAR VARIABLE ITERATOR . INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D

    VARIABLE        shift and go to state 457
    INT             shift and go to state 458


state 363

    (171) for -> FOR PAR_I VARIABLE ITERATOR VARIABLE . PAR_D LLAVE_I contenido LLAVE_D

    PAR_D           shift and go to state 459


state 364

    (172) for -> FOR PAR_I VARIABLE ITERATOR INT . TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> FOR PAR_I VARIABLE ITERATOR INT . UNTIL INT PAR_D LLAVE_I contenido LLAVE_D

    TO              shift and go to state 460
    UNTIL           shift and go to state 461


state 365

    (215) if -> IF PAR_I condicional PAR_D LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 462
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 366

    (212) defcase -> CASE SUBGUION . FUNCION_FLECHA codeBlock

    FUNCION_FLECHA  shift and go to state 463


state 367

    (184) caseInt -> CASE INT FUNCION_FLECHA . codeBlock
    (213) codeBlock -> . contenidoLine
    (214) codeBlock -> . LLAVE_I contenido LLAVE_D
    (40) contenidoLine -> . asignacion
    (41) contenidoLine -> . reasignacion
    (42) contenidoLine -> . funcall
    (43) contenidoLine -> . impresion
    (44) contenidoLine -> . entrada
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_I         shift and go to state 466
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 472
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18

    codeBlock                      shift and go to state 464
    contenidoLine                  shift and go to state 465
    asignacion                     shift and go to state 467
    reasignacion                   shift and go to state 468
    funcall                        shift and go to state 469
    impresion                      shift and go to state 470
    entrada                        shift and go to state 471
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 368

    (188) caseLgn -> CASE LONG FUNCION_FLECHA . codeBlock
    (213) codeBlock -> . contenidoLine
    (214) codeBlock -> . LLAVE_I contenido LLAVE_D
    (40) contenidoLine -> . asignacion
    (41) contenidoLine -> . reasignacion
    (42) contenidoLine -> . funcall
    (43) contenidoLine -> . impresion
    (44) contenidoLine -> . entrada
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_I         shift and go to state 466
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 472
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18

    codeBlock                      shift and go to state 473
    contenidoLine                  shift and go to state 465
    asignacion                     shift and go to state 467
    reasignacion                   shift and go to state 468
    funcall                        shift and go to state 469
    impresion                      shift and go to state 470
    entrada                        shift and go to state 471
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 369

    (192) caseFlt -> CASE FLOAT FUNCION_FLECHA . codeBlock
    (213) codeBlock -> . contenidoLine
    (214) codeBlock -> . LLAVE_I contenido LLAVE_D
    (40) contenidoLine -> . asignacion
    (41) contenidoLine -> . reasignacion
    (42) contenidoLine -> . funcall
    (43) contenidoLine -> . impresion
    (44) contenidoLine -> . entrada
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_I         shift and go to state 466
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 472
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18

    codeBlock                      shift and go to state 474
    contenidoLine                  shift and go to state 465
    asignacion                     shift and go to state 467
    reasignacion                   shift and go to state 468
    funcall                        shift and go to state 469
    impresion                      shift and go to state 470
    entrada                        shift and go to state 471
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 370

    (196) caseDob -> CASE DOUBLE FUNCION_FLECHA . codeBlock
    (213) codeBlock -> . contenidoLine
    (214) codeBlock -> . LLAVE_I contenido LLAVE_D
    (40) contenidoLine -> . asignacion
    (41) contenidoLine -> . reasignacion
    (42) contenidoLine -> . funcall
    (43) contenidoLine -> . impresion
    (44) contenidoLine -> . entrada
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_I         shift and go to state 466
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 472
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18

    codeBlock                      shift and go to state 475
    contenidoLine                  shift and go to state 465
    asignacion                     shift and go to state 467
    reasignacion                   shift and go to state 468
    funcall                        shift and go to state 469
    impresion                      shift and go to state 470
    entrada                        shift and go to state 471
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 371

    (200) caseStr -> CASE STRING FUNCION_FLECHA . codeBlock
    (213) codeBlock -> . contenidoLine
    (214) codeBlock -> . LLAVE_I contenido LLAVE_D
    (40) contenidoLine -> . asignacion
    (41) contenidoLine -> . reasignacion
    (42) contenidoLine -> . funcall
    (43) contenidoLine -> . impresion
    (44) contenidoLine -> . entrada
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_I         shift and go to state 466
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 472
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18

    codeBlock                      shift and go to state 476
    contenidoLine                  shift and go to state 465
    asignacion                     shift and go to state 467
    reasignacion                   shift and go to state 468
    funcall                        shift and go to state 469
    impresion                      shift and go to state 470
    entrada                        shift and go to state 471
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 372

    (204) caseChar -> CASE CHAR FUNCION_FLECHA . codeBlock
    (213) codeBlock -> . contenidoLine
    (214) codeBlock -> . LLAVE_I contenido LLAVE_D
    (40) contenidoLine -> . asignacion
    (41) contenidoLine -> . reasignacion
    (42) contenidoLine -> . funcall
    (43) contenidoLine -> . impresion
    (44) contenidoLine -> . entrada
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_I         shift and go to state 466
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 472
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18

    codeBlock                      shift and go to state 477
    contenidoLine                  shift and go to state 465
    asignacion                     shift and go to state 467
    reasignacion                   shift and go to state 468
    funcall                        shift and go to state 469
    impresion                      shift and go to state 470
    entrada                        shift and go to state 471
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 373

    (208) caseBool -> CASE booleanos FUNCION_FLECHA . codeBlock
    (213) codeBlock -> . contenidoLine
    (214) codeBlock -> . LLAVE_I contenido LLAVE_D
    (40) contenidoLine -> . asignacion
    (41) contenidoLine -> . reasignacion
    (42) contenidoLine -> . funcall
    (43) contenidoLine -> . impresion
    (44) contenidoLine -> . entrada
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_I         shift and go to state 466
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 472
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18

    codeBlock                      shift and go to state 478
    contenidoLine                  shift and go to state 465
    asignacion                     shift and go to state 467
    reasignacion                   shift and go to state 468
    funcall                        shift and go to state 469
    impresion                      shift and go to state 470
    entrada                        shift and go to state 471
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 374

    (102) valor -> VARIABLE PAR_I VARIABLE PAR_D .

    COMA            reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    PAR_D           reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    MAS             reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    VAR             reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    VAL             reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    VARIABLE        reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    PRINTLN         reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    PRINT           reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    READLINE        reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    WHILE           reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    FOR             reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    IF              reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    INT             reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    LONG            reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    FLOAT           reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    DOUBLE          reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    LLAVE_D         reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    RETURN          reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)
    CASE            reduce using rule 102 (valor -> VARIABLE PAR_I VARIABLE PAR_D .)


state 375

    (103) valor -> VARIABLE PAR_I INT PAR_D .

    COMA            reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)
    PAR_D           reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)
    MAS             reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)
    VAR             reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)
    VAL             reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)
    VARIABLE        reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)
    PRINTLN         reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)
    PRINT           reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)
    READLINE        reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)
    WHILE           reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)
    FOR             reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)
    IF              reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)
    INT             reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)
    LONG            reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)
    FLOAT           reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)
    DOUBLE          reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)
    LLAVE_D         reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)
    RETURN          reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)
    CASE            reduce using rule 103 (valor -> VARIABLE PAR_I INT PAR_D .)


state 376

    (4) io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE . PUNTO READLINE

    PUNTO           shift and go to state 479


state 377

    (218) elseif -> ELSE IF PAR_I condicional PAR_D . LLAVE_I contenido LLAVE_D
    (219) elseif -> ELSE IF PAR_I condicional PAR_D . LLAVE_I contenido LLAVE_D elseif

    LLAVE_I         shift and go to state 480


state 378

    (99) valor -> VARIABLE .
    (102) valor -> VARIABLE . PAR_I VARIABLE PAR_D
    (103) valor -> VARIABLE . PAR_I INT PAR_D
    (254) aritmetica -> VARIABLE . aritmeticos numeros
    (256) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (150) castingcall -> VARIABLE . PUNTO castingfun
    (140) funcall -> VARIABLE . varparen
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD
    (141) varparen -> . PAR_I valores PAR_D
    (142) varparen -> . PAR_I PAR_D
    (143) varparen -> . varparen PAR_I valores PAR_D
    (144) varparen -> . varparen PAR_I PAR_D

    VAR             reduce using rule 99 (valor -> VARIABLE .)
    VAL             reduce using rule 99 (valor -> VARIABLE .)
    VARIABLE        reduce using rule 99 (valor -> VARIABLE .)
    PRINTLN         reduce using rule 99 (valor -> VARIABLE .)
    PRINT           reduce using rule 99 (valor -> VARIABLE .)
    READLINE        reduce using rule 99 (valor -> VARIABLE .)
    WHILE           reduce using rule 99 (valor -> VARIABLE .)
    FOR             reduce using rule 99 (valor -> VARIABLE .)
    IF              reduce using rule 99 (valor -> VARIABLE .)
    INT             reduce using rule 99 (valor -> VARIABLE .)
    LONG            reduce using rule 99 (valor -> VARIABLE .)
    FLOAT           reduce using rule 99 (valor -> VARIABLE .)
    DOUBLE          reduce using rule 99 (valor -> VARIABLE .)
    LLAVE_D         reduce using rule 99 (valor -> VARIABLE .)
    RETURN          reduce using rule 99 (valor -> VARIABLE .)
    CASE            reduce using rule 99 (valor -> VARIABLE .)
    PAR_I           shift and go to state 481
    PUNTO           shift and go to state 308
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    aritmeticos                    shift and go to state 218
    varparen                       shift and go to state 36

state 379

    (84) reasignacion -> VARIABLE IGUAL valor .

    VAR             reduce using rule 84 (reasignacion -> VARIABLE IGUAL valor .)
    VAL             reduce using rule 84 (reasignacion -> VARIABLE IGUAL valor .)
    VARIABLE        reduce using rule 84 (reasignacion -> VARIABLE IGUAL valor .)
    PRINTLN         reduce using rule 84 (reasignacion -> VARIABLE IGUAL valor .)
    PRINT           reduce using rule 84 (reasignacion -> VARIABLE IGUAL valor .)
    READLINE        reduce using rule 84 (reasignacion -> VARIABLE IGUAL valor .)
    WHILE           reduce using rule 84 (reasignacion -> VARIABLE IGUAL valor .)
    FOR             reduce using rule 84 (reasignacion -> VARIABLE IGUAL valor .)
    IF              reduce using rule 84 (reasignacion -> VARIABLE IGUAL valor .)
    INT             reduce using rule 84 (reasignacion -> VARIABLE IGUAL valor .)
    LONG            reduce using rule 84 (reasignacion -> VARIABLE IGUAL valor .)
    FLOAT           reduce using rule 84 (reasignacion -> VARIABLE IGUAL valor .)
    DOUBLE          reduce using rule 84 (reasignacion -> VARIABLE IGUAL valor .)
    LLAVE_D         reduce using rule 84 (reasignacion -> VARIABLE IGUAL valor .)
    RETURN          reduce using rule 84 (reasignacion -> VARIABLE IGUAL valor .)
    CASE            reduce using rule 84 (reasignacion -> VARIABLE IGUAL valor .)


state 380

    (85) reasignacion -> VARIABLE IGUAL returnfun .

    VAR             reduce using rule 85 (reasignacion -> VARIABLE IGUAL returnfun .)
    VAL             reduce using rule 85 (reasignacion -> VARIABLE IGUAL returnfun .)
    VARIABLE        reduce using rule 85 (reasignacion -> VARIABLE IGUAL returnfun .)
    PRINTLN         reduce using rule 85 (reasignacion -> VARIABLE IGUAL returnfun .)
    PRINT           reduce using rule 85 (reasignacion -> VARIABLE IGUAL returnfun .)
    READLINE        reduce using rule 85 (reasignacion -> VARIABLE IGUAL returnfun .)
    WHILE           reduce using rule 85 (reasignacion -> VARIABLE IGUAL returnfun .)
    FOR             reduce using rule 85 (reasignacion -> VARIABLE IGUAL returnfun .)
    IF              reduce using rule 85 (reasignacion -> VARIABLE IGUAL returnfun .)
    INT             reduce using rule 85 (reasignacion -> VARIABLE IGUAL returnfun .)
    LONG            reduce using rule 85 (reasignacion -> VARIABLE IGUAL returnfun .)
    FLOAT           reduce using rule 85 (reasignacion -> VARIABLE IGUAL returnfun .)
    DOUBLE          reduce using rule 85 (reasignacion -> VARIABLE IGUAL returnfun .)
    LLAVE_D         reduce using rule 85 (reasignacion -> VARIABLE IGUAL returnfun .)
    RETURN          reduce using rule 85 (reasignacion -> VARIABLE IGUAL returnfun .)
    CASE            reduce using rule 85 (reasignacion -> VARIABLE IGUAL returnfun .)


state 381

    (86) reasignacion -> VARIABLE IGUAL aritmetica .
    (257) aritmetica -> aritmetica . aritmeticos numeros
    (258) aritmetica -> aritmetica . aritmeticos VARIABLE
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD

    VAR             reduce using rule 86 (reasignacion -> VARIABLE IGUAL aritmetica .)
    VAL             reduce using rule 86 (reasignacion -> VARIABLE IGUAL aritmetica .)
    VARIABLE        reduce using rule 86 (reasignacion -> VARIABLE IGUAL aritmetica .)
    PRINTLN         reduce using rule 86 (reasignacion -> VARIABLE IGUAL aritmetica .)
    PRINT           reduce using rule 86 (reasignacion -> VARIABLE IGUAL aritmetica .)
    READLINE        reduce using rule 86 (reasignacion -> VARIABLE IGUAL aritmetica .)
    WHILE           reduce using rule 86 (reasignacion -> VARIABLE IGUAL aritmetica .)
    FOR             reduce using rule 86 (reasignacion -> VARIABLE IGUAL aritmetica .)
    IF              reduce using rule 86 (reasignacion -> VARIABLE IGUAL aritmetica .)
    INT             reduce using rule 86 (reasignacion -> VARIABLE IGUAL aritmetica .)
    LONG            reduce using rule 86 (reasignacion -> VARIABLE IGUAL aritmetica .)
    FLOAT           reduce using rule 86 (reasignacion -> VARIABLE IGUAL aritmetica .)
    DOUBLE          reduce using rule 86 (reasignacion -> VARIABLE IGUAL aritmetica .)
    LLAVE_D         reduce using rule 86 (reasignacion -> VARIABLE IGUAL aritmetica .)
    RETURN          reduce using rule 86 (reasignacion -> VARIABLE IGUAL aritmetica .)
    CASE            reduce using rule 86 (reasignacion -> VARIABLE IGUAL aritmetica .)
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    aritmeticos                    shift and go to state 235

state 382

    (100) valor -> numeros .
    (253) aritmetica -> numeros . aritmeticos numeros
    (255) aritmetica -> numeros . aritmeticos VARIABLE
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD

    VAR             reduce using rule 100 (valor -> numeros .)
    VAL             reduce using rule 100 (valor -> numeros .)
    VARIABLE        reduce using rule 100 (valor -> numeros .)
    PRINTLN         reduce using rule 100 (valor -> numeros .)
    PRINT           reduce using rule 100 (valor -> numeros .)
    READLINE        reduce using rule 100 (valor -> numeros .)
    WHILE           reduce using rule 100 (valor -> numeros .)
    FOR             reduce using rule 100 (valor -> numeros .)
    IF              reduce using rule 100 (valor -> numeros .)
    INT             reduce using rule 100 (valor -> numeros .)
    LONG            reduce using rule 100 (valor -> numeros .)
    FLOAT           reduce using rule 100 (valor -> numeros .)
    DOUBLE          reduce using rule 100 (valor -> numeros .)
    LLAVE_D         reduce using rule 100 (valor -> numeros .)
    RETURN          reduce using rule 100 (valor -> numeros .)
    CASE            reduce using rule 100 (valor -> numeros .)
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    aritmeticos                    shift and go to state 233

state 383

    (87) reasignacion -> VARIABLE PAR_I INT . PAR_D IGUAL valor
    (106) numeros -> INT .

  ! shift/reduce conflict for PAR_D resolved as shift
    PAR_D           shift and go to state 482
    COMA            reduce using rule 106 (numeros -> INT .)

  ! PAR_D           [ reduce using rule 106 (numeros -> INT .) ]


state 384

    (110) funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 483


state 385

    (111) funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .

    DEF             reduce using rule 111 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 111 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 111 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 111 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 111 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 111 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 111 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 111 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 111 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 111 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 111 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 111 (funcion -> DEF VARIABLE parametro LLAVE_I contenido LLAVE_D .)


state 386

    (118) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I . contenido RETURN valor LLAVE_D
    (119) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I . contenido RETURN VARIABLE LLAVE_D
    (120) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I . contenido RETURN returnfun LLAVE_D
    (121) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I . contenido RETURN aritmetica LLAVE_D
    (122) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I . RETURN valor LLAVE_D
    (123) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I . RETURN VARIABLE LLAVE_D
    (124) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I . RETURN returnfun LLAVE_D
    (125) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I . RETURN aritmetica LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    RETURN          shift and go to state 485
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 484
    aritmetica                     shift and go to state 141
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 387

    (126) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I . contenido RETURN tuple LLAVE_D
    (127) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I . contenido RETURN VARIABLE LLAVE_D
    (128) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I . contenido RETURN returnfun LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 486
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 388

    (130) dectipoTupla -> DOBLE_PUNTO PAR_I tipos . PAR_D

    PAR_D           shift and go to state 487


state 389

    (131) tipos -> tipo .
    (132) tipos -> tipo . tiposentry
    (133) tiposentry -> . COMA tipo
    (134) tiposentry -> . COMA tipo tiposentry

    PAR_D           reduce using rule 131 (tipos -> tipo .)
    COMA            shift and go to state 489

    tiposentry                     shift and go to state 488

state 390

    (95) tipo -> ARRAYCLASS CORCHETE_I . tipo CORCHETE_D
    (88) tipo -> . CHARCLASS
    (89) tipo -> . STRINGCLASS
    (90) tipo -> . BOOLCLASS
    (91) tipo -> . INTCLASS
    (92) tipo -> . LONGCLASS
    (93) tipo -> . DOUBLECLASS
    (94) tipo -> . FLOATCLASS
    (95) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (96) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    CHARCLASS       shift and go to state 296
    STRINGCLASS     shift and go to state 297
    BOOLCLASS       shift and go to state 298
    INTCLASS        shift and go to state 299
    LONGCLASS       shift and go to state 300
    DOUBLECLASS     shift and go to state 301
    FLOATCLASS      shift and go to state 302
    ARRAYCLASS      shift and go to state 303
    LISTCLASS       shift and go to state 304

    tipo                           shift and go to state 490

state 391

    (96) tipo -> LISTCLASS CORCHETE_I . tipo CORCHETE_D
    (88) tipo -> . CHARCLASS
    (89) tipo -> . STRINGCLASS
    (90) tipo -> . BOOLCLASS
    (91) tipo -> . INTCLASS
    (92) tipo -> . LONGCLASS
    (93) tipo -> . DOUBLECLASS
    (94) tipo -> . FLOATCLASS
    (95) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (96) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    CHARCLASS       shift and go to state 296
    STRINGCLASS     shift and go to state 297
    BOOLCLASS       shift and go to state 298
    INTCLASS        shift and go to state 299
    LONGCLASS       shift and go to state 300
    DOUBLECLASS     shift and go to state 301
    FLOATCLASS      shift and go to state 302
    ARRAYCLASS      shift and go to state 303
    LISTCLASS       shift and go to state 304

    tipo                           shift and go to state 491

state 392

    (116) parametros -> PAR_I . declaracion PAR_D
    (117) parametros -> PAR_I . declaracion PAR_D parametros
    (112) declaracion -> . VARIABLE DOBLE_PUNTO tipo
    (113) declaracion -> . VARIABLE DOBLE_PUNTO tipo IGUAL valor

    VARIABLE        shift and go to state 151

    declaracion                    shift and go to state 150

state 393

    (117) parametros -> PAR_I declaracion PAR_D parametros .

    IGUAL           reduce using rule 117 (parametros -> PAR_I declaracion PAR_D parametros .)
    LLAVE_I         reduce using rule 117 (parametros -> PAR_I declaracion PAR_D parametros .)
    DOBLE_PUNTO     reduce using rule 117 (parametros -> PAR_I declaracion PAR_D parametros .)


state 394

    (112) declaracion -> VARIABLE DOBLE_PUNTO tipo .
    (113) declaracion -> VARIABLE DOBLE_PUNTO tipo . IGUAL valor

    PAR_D           reduce using rule 112 (declaracion -> VARIABLE DOBLE_PUNTO tipo .)
    IGUAL           shift and go to state 492


state 395

    (150) castingcall -> VARIABLE PUNTO castingfun .

    DEF             reduce using rule 150 (castingcall -> VARIABLE PUNTO castingfun .)
    VARIABLE        reduce using rule 150 (castingcall -> VARIABLE PUNTO castingfun .)
    PRINTLN         reduce using rule 150 (castingcall -> VARIABLE PUNTO castingfun .)
    PRINT           reduce using rule 150 (castingcall -> VARIABLE PUNTO castingfun .)
    READLINE        reduce using rule 150 (castingcall -> VARIABLE PUNTO castingfun .)
    VAR             reduce using rule 150 (castingcall -> VARIABLE PUNTO castingfun .)
    VAL             reduce using rule 150 (castingcall -> VARIABLE PUNTO castingfun .)
    WHILE           reduce using rule 150 (castingcall -> VARIABLE PUNTO castingfun .)
    FOR             reduce using rule 150 (castingcall -> VARIABLE PUNTO castingfun .)
    IF              reduce using rule 150 (castingcall -> VARIABLE PUNTO castingfun .)
    $end            reduce using rule 150 (castingcall -> VARIABLE PUNTO castingfun .)
    LLAVE_D         reduce using rule 150 (castingcall -> VARIABLE PUNTO castingfun .)
    INT             reduce using rule 150 (castingcall -> VARIABLE PUNTO castingfun .)
    LONG            reduce using rule 150 (castingcall -> VARIABLE PUNTO castingfun .)
    FLOAT           reduce using rule 150 (castingcall -> VARIABLE PUNTO castingfun .)
    DOUBLE          reduce using rule 150 (castingcall -> VARIABLE PUNTO castingfun .)
    RETURN          reduce using rule 150 (castingcall -> VARIABLE PUNTO castingfun .)
    CASE            reduce using rule 150 (castingcall -> VARIABLE PUNTO castingfun .)


state 396

    (151) castingfun -> TO_INT .

    DEF             reduce using rule 151 (castingfun -> TO_INT .)
    VARIABLE        reduce using rule 151 (castingfun -> TO_INT .)
    PRINTLN         reduce using rule 151 (castingfun -> TO_INT .)
    PRINT           reduce using rule 151 (castingfun -> TO_INT .)
    READLINE        reduce using rule 151 (castingfun -> TO_INT .)
    VAR             reduce using rule 151 (castingfun -> TO_INT .)
    VAL             reduce using rule 151 (castingfun -> TO_INT .)
    WHILE           reduce using rule 151 (castingfun -> TO_INT .)
    FOR             reduce using rule 151 (castingfun -> TO_INT .)
    IF              reduce using rule 151 (castingfun -> TO_INT .)
    $end            reduce using rule 151 (castingfun -> TO_INT .)
    LLAVE_D         reduce using rule 151 (castingfun -> TO_INT .)
    INT             reduce using rule 151 (castingfun -> TO_INT .)
    LONG            reduce using rule 151 (castingfun -> TO_INT .)
    FLOAT           reduce using rule 151 (castingfun -> TO_INT .)
    DOUBLE          reduce using rule 151 (castingfun -> TO_INT .)
    RETURN          reduce using rule 151 (castingfun -> TO_INT .)
    CASE            reduce using rule 151 (castingfun -> TO_INT .)


state 397

    (152) castingfun -> TO_DOUBLE .

    DEF             reduce using rule 152 (castingfun -> TO_DOUBLE .)
    VARIABLE        reduce using rule 152 (castingfun -> TO_DOUBLE .)
    PRINTLN         reduce using rule 152 (castingfun -> TO_DOUBLE .)
    PRINT           reduce using rule 152 (castingfun -> TO_DOUBLE .)
    READLINE        reduce using rule 152 (castingfun -> TO_DOUBLE .)
    VAR             reduce using rule 152 (castingfun -> TO_DOUBLE .)
    VAL             reduce using rule 152 (castingfun -> TO_DOUBLE .)
    WHILE           reduce using rule 152 (castingfun -> TO_DOUBLE .)
    FOR             reduce using rule 152 (castingfun -> TO_DOUBLE .)
    IF              reduce using rule 152 (castingfun -> TO_DOUBLE .)
    $end            reduce using rule 152 (castingfun -> TO_DOUBLE .)
    LLAVE_D         reduce using rule 152 (castingfun -> TO_DOUBLE .)
    INT             reduce using rule 152 (castingfun -> TO_DOUBLE .)
    LONG            reduce using rule 152 (castingfun -> TO_DOUBLE .)
    FLOAT           reduce using rule 152 (castingfun -> TO_DOUBLE .)
    DOUBLE          reduce using rule 152 (castingfun -> TO_DOUBLE .)
    RETURN          reduce using rule 152 (castingfun -> TO_DOUBLE .)
    CASE            reduce using rule 152 (castingfun -> TO_DOUBLE .)


state 398

    (153) castingfun -> TO_FLOAT .

    DEF             reduce using rule 153 (castingfun -> TO_FLOAT .)
    VARIABLE        reduce using rule 153 (castingfun -> TO_FLOAT .)
    PRINTLN         reduce using rule 153 (castingfun -> TO_FLOAT .)
    PRINT           reduce using rule 153 (castingfun -> TO_FLOAT .)
    READLINE        reduce using rule 153 (castingfun -> TO_FLOAT .)
    VAR             reduce using rule 153 (castingfun -> TO_FLOAT .)
    VAL             reduce using rule 153 (castingfun -> TO_FLOAT .)
    WHILE           reduce using rule 153 (castingfun -> TO_FLOAT .)
    FOR             reduce using rule 153 (castingfun -> TO_FLOAT .)
    IF              reduce using rule 153 (castingfun -> TO_FLOAT .)
    $end            reduce using rule 153 (castingfun -> TO_FLOAT .)
    LLAVE_D         reduce using rule 153 (castingfun -> TO_FLOAT .)
    INT             reduce using rule 153 (castingfun -> TO_FLOAT .)
    LONG            reduce using rule 153 (castingfun -> TO_FLOAT .)
    FLOAT           reduce using rule 153 (castingfun -> TO_FLOAT .)
    DOUBLE          reduce using rule 153 (castingfun -> TO_FLOAT .)
    RETURN          reduce using rule 153 (castingfun -> TO_FLOAT .)
    CASE            reduce using rule 153 (castingfun -> TO_FLOAT .)


state 399

    (154) castingfun -> TO_LONG .

    DEF             reduce using rule 154 (castingfun -> TO_LONG .)
    VARIABLE        reduce using rule 154 (castingfun -> TO_LONG .)
    PRINTLN         reduce using rule 154 (castingfun -> TO_LONG .)
    PRINT           reduce using rule 154 (castingfun -> TO_LONG .)
    READLINE        reduce using rule 154 (castingfun -> TO_LONG .)
    VAR             reduce using rule 154 (castingfun -> TO_LONG .)
    VAL             reduce using rule 154 (castingfun -> TO_LONG .)
    WHILE           reduce using rule 154 (castingfun -> TO_LONG .)
    FOR             reduce using rule 154 (castingfun -> TO_LONG .)
    IF              reduce using rule 154 (castingfun -> TO_LONG .)
    $end            reduce using rule 154 (castingfun -> TO_LONG .)
    LLAVE_D         reduce using rule 154 (castingfun -> TO_LONG .)
    INT             reduce using rule 154 (castingfun -> TO_LONG .)
    LONG            reduce using rule 154 (castingfun -> TO_LONG .)
    FLOAT           reduce using rule 154 (castingfun -> TO_LONG .)
    DOUBLE          reduce using rule 154 (castingfun -> TO_LONG .)
    RETURN          reduce using rule 154 (castingfun -> TO_LONG .)
    CASE            reduce using rule 154 (castingfun -> TO_LONG .)


state 400

    (320) stringCastLong -> STRING PUNTO TO_LONG .

    DEF             reduce using rule 320 (stringCastLong -> STRING PUNTO TO_LONG .)
    VARIABLE        reduce using rule 320 (stringCastLong -> STRING PUNTO TO_LONG .)
    PRINTLN         reduce using rule 320 (stringCastLong -> STRING PUNTO TO_LONG .)
    PRINT           reduce using rule 320 (stringCastLong -> STRING PUNTO TO_LONG .)
    READLINE        reduce using rule 320 (stringCastLong -> STRING PUNTO TO_LONG .)
    VAR             reduce using rule 320 (stringCastLong -> STRING PUNTO TO_LONG .)
    VAL             reduce using rule 320 (stringCastLong -> STRING PUNTO TO_LONG .)
    WHILE           reduce using rule 320 (stringCastLong -> STRING PUNTO TO_LONG .)
    FOR             reduce using rule 320 (stringCastLong -> STRING PUNTO TO_LONG .)
    IF              reduce using rule 320 (stringCastLong -> STRING PUNTO TO_LONG .)
    $end            reduce using rule 320 (stringCastLong -> STRING PUNTO TO_LONG .)
    LLAVE_D         reduce using rule 320 (stringCastLong -> STRING PUNTO TO_LONG .)
    INT             reduce using rule 320 (stringCastLong -> STRING PUNTO TO_LONG .)
    LONG            reduce using rule 320 (stringCastLong -> STRING PUNTO TO_LONG .)
    FLOAT           reduce using rule 320 (stringCastLong -> STRING PUNTO TO_LONG .)
    DOUBLE          reduce using rule 320 (stringCastLong -> STRING PUNTO TO_LONG .)
    RETURN          reduce using rule 320 (stringCastLong -> STRING PUNTO TO_LONG .)
    CASE            reduce using rule 320 (stringCastLong -> STRING PUNTO TO_LONG .)


state 401

    (319) stringCastInt -> STRING PUNTO TO_INT .

    DEF             reduce using rule 319 (stringCastInt -> STRING PUNTO TO_INT .)
    VARIABLE        reduce using rule 319 (stringCastInt -> STRING PUNTO TO_INT .)
    PRINTLN         reduce using rule 319 (stringCastInt -> STRING PUNTO TO_INT .)
    PRINT           reduce using rule 319 (stringCastInt -> STRING PUNTO TO_INT .)
    READLINE        reduce using rule 319 (stringCastInt -> STRING PUNTO TO_INT .)
    VAR             reduce using rule 319 (stringCastInt -> STRING PUNTO TO_INT .)
    VAL             reduce using rule 319 (stringCastInt -> STRING PUNTO TO_INT .)
    WHILE           reduce using rule 319 (stringCastInt -> STRING PUNTO TO_INT .)
    FOR             reduce using rule 319 (stringCastInt -> STRING PUNTO TO_INT .)
    IF              reduce using rule 319 (stringCastInt -> STRING PUNTO TO_INT .)
    $end            reduce using rule 319 (stringCastInt -> STRING PUNTO TO_INT .)
    LLAVE_D         reduce using rule 319 (stringCastInt -> STRING PUNTO TO_INT .)
    INT             reduce using rule 319 (stringCastInt -> STRING PUNTO TO_INT .)
    LONG            reduce using rule 319 (stringCastInt -> STRING PUNTO TO_INT .)
    FLOAT           reduce using rule 319 (stringCastInt -> STRING PUNTO TO_INT .)
    DOUBLE          reduce using rule 319 (stringCastInt -> STRING PUNTO TO_INT .)
    RETURN          reduce using rule 319 (stringCastInt -> STRING PUNTO TO_INT .)
    CASE            reduce using rule 319 (stringCastInt -> STRING PUNTO TO_INT .)


state 402

    (321) stringCastFloat -> STRING PUNTO TO_FLOAT .

    DEF             reduce using rule 321 (stringCastFloat -> STRING PUNTO TO_FLOAT .)
    VARIABLE        reduce using rule 321 (stringCastFloat -> STRING PUNTO TO_FLOAT .)
    PRINTLN         reduce using rule 321 (stringCastFloat -> STRING PUNTO TO_FLOAT .)
    PRINT           reduce using rule 321 (stringCastFloat -> STRING PUNTO TO_FLOAT .)
    READLINE        reduce using rule 321 (stringCastFloat -> STRING PUNTO TO_FLOAT .)
    VAR             reduce using rule 321 (stringCastFloat -> STRING PUNTO TO_FLOAT .)
    VAL             reduce using rule 321 (stringCastFloat -> STRING PUNTO TO_FLOAT .)
    WHILE           reduce using rule 321 (stringCastFloat -> STRING PUNTO TO_FLOAT .)
    FOR             reduce using rule 321 (stringCastFloat -> STRING PUNTO TO_FLOAT .)
    IF              reduce using rule 321 (stringCastFloat -> STRING PUNTO TO_FLOAT .)
    $end            reduce using rule 321 (stringCastFloat -> STRING PUNTO TO_FLOAT .)
    LLAVE_D         reduce using rule 321 (stringCastFloat -> STRING PUNTO TO_FLOAT .)
    INT             reduce using rule 321 (stringCastFloat -> STRING PUNTO TO_FLOAT .)
    LONG            reduce using rule 321 (stringCastFloat -> STRING PUNTO TO_FLOAT .)
    FLOAT           reduce using rule 321 (stringCastFloat -> STRING PUNTO TO_FLOAT .)
    DOUBLE          reduce using rule 321 (stringCastFloat -> STRING PUNTO TO_FLOAT .)
    RETURN          reduce using rule 321 (stringCastFloat -> STRING PUNTO TO_FLOAT .)
    CASE            reduce using rule 321 (stringCastFloat -> STRING PUNTO TO_FLOAT .)


state 403

    (322) stringCastDouble -> STRING PUNTO TO_DOUBLE .

    DEF             reduce using rule 322 (stringCastDouble -> STRING PUNTO TO_DOUBLE .)
    VARIABLE        reduce using rule 322 (stringCastDouble -> STRING PUNTO TO_DOUBLE .)
    PRINTLN         reduce using rule 322 (stringCastDouble -> STRING PUNTO TO_DOUBLE .)
    PRINT           reduce using rule 322 (stringCastDouble -> STRING PUNTO TO_DOUBLE .)
    READLINE        reduce using rule 322 (stringCastDouble -> STRING PUNTO TO_DOUBLE .)
    VAR             reduce using rule 322 (stringCastDouble -> STRING PUNTO TO_DOUBLE .)
    VAL             reduce using rule 322 (stringCastDouble -> STRING PUNTO TO_DOUBLE .)
    WHILE           reduce using rule 322 (stringCastDouble -> STRING PUNTO TO_DOUBLE .)
    FOR             reduce using rule 322 (stringCastDouble -> STRING PUNTO TO_DOUBLE .)
    IF              reduce using rule 322 (stringCastDouble -> STRING PUNTO TO_DOUBLE .)
    $end            reduce using rule 322 (stringCastDouble -> STRING PUNTO TO_DOUBLE .)
    LLAVE_D         reduce using rule 322 (stringCastDouble -> STRING PUNTO TO_DOUBLE .)
    INT             reduce using rule 322 (stringCastDouble -> STRING PUNTO TO_DOUBLE .)
    LONG            reduce using rule 322 (stringCastDouble -> STRING PUNTO TO_DOUBLE .)
    FLOAT           reduce using rule 322 (stringCastDouble -> STRING PUNTO TO_DOUBLE .)
    DOUBLE          reduce using rule 322 (stringCastDouble -> STRING PUNTO TO_DOUBLE .)
    RETURN          reduce using rule 322 (stringCastDouble -> STRING PUNTO TO_DOUBLE .)
    CASE            reduce using rule 322 (stringCastDouble -> STRING PUNTO TO_DOUBLE .)


state 404

    (155) array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores . PAR_D

    PAR_D           shift and go to state 493


state 405

    (166) tuple -> PAR_I valores PAR_D .

    DEF             reduce using rule 166 (tuple -> PAR_I valores PAR_D .)
    VARIABLE        reduce using rule 166 (tuple -> PAR_I valores PAR_D .)
    PRINTLN         reduce using rule 166 (tuple -> PAR_I valores PAR_D .)
    PRINT           reduce using rule 166 (tuple -> PAR_I valores PAR_D .)
    READLINE        reduce using rule 166 (tuple -> PAR_I valores PAR_D .)
    VAR             reduce using rule 166 (tuple -> PAR_I valores PAR_D .)
    VAL             reduce using rule 166 (tuple -> PAR_I valores PAR_D .)
    WHILE           reduce using rule 166 (tuple -> PAR_I valores PAR_D .)
    FOR             reduce using rule 166 (tuple -> PAR_I valores PAR_D .)
    IF              reduce using rule 166 (tuple -> PAR_I valores PAR_D .)
    $end            reduce using rule 166 (tuple -> PAR_I valores PAR_D .)
    LLAVE_D         reduce using rule 166 (tuple -> PAR_I valores PAR_D .)
    INT             reduce using rule 166 (tuple -> PAR_I valores PAR_D .)
    LONG            reduce using rule 166 (tuple -> PAR_I valores PAR_D .)
    FLOAT           reduce using rule 166 (tuple -> PAR_I valores PAR_D .)
    DOUBLE          reduce using rule 166 (tuple -> PAR_I valores PAR_D .)
    RETURN          reduce using rule 166 (tuple -> PAR_I valores PAR_D .)
    CASE            reduce using rule 166 (tuple -> PAR_I valores PAR_D .)


state 406

    (149) castingcall -> returnCastable PUNTO castingfun .

    DEF             reduce using rule 149 (castingcall -> returnCastable PUNTO castingfun .)
    VARIABLE        reduce using rule 149 (castingcall -> returnCastable PUNTO castingfun .)
    PRINTLN         reduce using rule 149 (castingcall -> returnCastable PUNTO castingfun .)
    PRINT           reduce using rule 149 (castingcall -> returnCastable PUNTO castingfun .)
    READLINE        reduce using rule 149 (castingcall -> returnCastable PUNTO castingfun .)
    VAR             reduce using rule 149 (castingcall -> returnCastable PUNTO castingfun .)
    VAL             reduce using rule 149 (castingcall -> returnCastable PUNTO castingfun .)
    WHILE           reduce using rule 149 (castingcall -> returnCastable PUNTO castingfun .)
    FOR             reduce using rule 149 (castingcall -> returnCastable PUNTO castingfun .)
    IF              reduce using rule 149 (castingcall -> returnCastable PUNTO castingfun .)
    $end            reduce using rule 149 (castingcall -> returnCastable PUNTO castingfun .)
    LLAVE_D         reduce using rule 149 (castingcall -> returnCastable PUNTO castingfun .)
    INT             reduce using rule 149 (castingcall -> returnCastable PUNTO castingfun .)
    LONG            reduce using rule 149 (castingcall -> returnCastable PUNTO castingfun .)
    FLOAT           reduce using rule 149 (castingcall -> returnCastable PUNTO castingfun .)
    DOUBLE          reduce using rule 149 (castingcall -> returnCastable PUNTO castingfun .)
    RETURN          reduce using rule 149 (castingcall -> returnCastable PUNTO castingfun .)
    CASE            reduce using rule 149 (castingcall -> returnCastable PUNTO castingfun .)


state 407

    (60) asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .

    DEF             reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    IF              reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    $end            reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    INT             reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 60 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)


state 408

    (299) asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .

    DEF             reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    VARIABLE        reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    PRINTLN         reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    PRINT           reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    READLINE        reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    VAR             reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    VAL             reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    WHILE           reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    FOR             reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    IF              reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    $end            reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    LLAVE_D         reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    INT             reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    LONG            reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    FLOAT           reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    DOUBLE          reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    RETURN          reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    CASE            reduce using rule 299 (asignacionLong -> VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)


state 409

    (302) longvalues -> INT .
    (296) intvalues -> INT .

  ! reduce/reduce conflict for DEF resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for PRINTLN resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for PRINT resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for READLINE resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for VAR resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for VAL resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for WHILE resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for FOR resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for IF resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for $end resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for LLAVE_D resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for INT resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for LONG resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for FLOAT resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for RETURN resolved using rule 296 (intvalues -> INT .)
  ! reduce/reduce conflict for CASE resolved using rule 296 (intvalues -> INT .)
    DEF             reduce using rule 296 (intvalues -> INT .)
    VARIABLE        reduce using rule 296 (intvalues -> INT .)
    PRINTLN         reduce using rule 296 (intvalues -> INT .)
    PRINT           reduce using rule 296 (intvalues -> INT .)
    READLINE        reduce using rule 296 (intvalues -> INT .)
    VAR             reduce using rule 296 (intvalues -> INT .)
    VAL             reduce using rule 296 (intvalues -> INT .)
    WHILE           reduce using rule 296 (intvalues -> INT .)
    FOR             reduce using rule 296 (intvalues -> INT .)
    IF              reduce using rule 296 (intvalues -> INT .)
    $end            reduce using rule 296 (intvalues -> INT .)
    LLAVE_D         reduce using rule 296 (intvalues -> INT .)
    INT             reduce using rule 296 (intvalues -> INT .)
    LONG            reduce using rule 296 (intvalues -> INT .)
    FLOAT           reduce using rule 296 (intvalues -> INT .)
    DOUBLE          reduce using rule 296 (intvalues -> INT .)
    RETURN          reduce using rule 296 (intvalues -> INT .)
    CASE            reduce using rule 296 (intvalues -> INT .)

  ! DEF             [ reduce using rule 302 (longvalues -> INT .) ]
  ! VARIABLE        [ reduce using rule 302 (longvalues -> INT .) ]
  ! PRINTLN         [ reduce using rule 302 (longvalues -> INT .) ]
  ! PRINT           [ reduce using rule 302 (longvalues -> INT .) ]
  ! READLINE        [ reduce using rule 302 (longvalues -> INT .) ]
  ! VAR             [ reduce using rule 302 (longvalues -> INT .) ]
  ! VAL             [ reduce using rule 302 (longvalues -> INT .) ]
  ! WHILE           [ reduce using rule 302 (longvalues -> INT .) ]
  ! FOR             [ reduce using rule 302 (longvalues -> INT .) ]
  ! IF              [ reduce using rule 302 (longvalues -> INT .) ]
  ! $end            [ reduce using rule 302 (longvalues -> INT .) ]
  ! LLAVE_D         [ reduce using rule 302 (longvalues -> INT .) ]
  ! INT             [ reduce using rule 302 (longvalues -> INT .) ]
  ! LONG            [ reduce using rule 302 (longvalues -> INT .) ]
  ! FLOAT           [ reduce using rule 302 (longvalues -> INT .) ]
  ! DOUBLE          [ reduce using rule 302 (longvalues -> INT .) ]
  ! RETURN          [ reduce using rule 302 (longvalues -> INT .) ]
  ! CASE            [ reduce using rule 302 (longvalues -> INT .) ]


state 410

    (303) longvalues -> intvalues .

    DEF             reduce using rule 303 (longvalues -> intvalues .)
    VARIABLE        reduce using rule 303 (longvalues -> intvalues .)
    PRINTLN         reduce using rule 303 (longvalues -> intvalues .)
    PRINT           reduce using rule 303 (longvalues -> intvalues .)
    READLINE        reduce using rule 303 (longvalues -> intvalues .)
    VAR             reduce using rule 303 (longvalues -> intvalues .)
    VAL             reduce using rule 303 (longvalues -> intvalues .)
    WHILE           reduce using rule 303 (longvalues -> intvalues .)
    FOR             reduce using rule 303 (longvalues -> intvalues .)
    IF              reduce using rule 303 (longvalues -> intvalues .)
    $end            reduce using rule 303 (longvalues -> intvalues .)
    LLAVE_D         reduce using rule 303 (longvalues -> intvalues .)
    INT             reduce using rule 303 (longvalues -> intvalues .)
    LONG            reduce using rule 303 (longvalues -> intvalues .)
    FLOAT           reduce using rule 303 (longvalues -> intvalues .)
    DOUBLE          reduce using rule 303 (longvalues -> intvalues .)
    RETURN          reduce using rule 303 (longvalues -> intvalues .)
    CASE            reduce using rule 303 (longvalues -> intvalues .)


state 411

    (320) stringCastLong -> STRING . PUNTO TO_LONG
    (319) stringCastInt -> STRING . PUNTO TO_INT

    PUNTO           shift and go to state 494


state 412

    (293) asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .

    DEF             reduce using rule 293 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    VARIABLE        reduce using rule 293 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    PRINTLN         reduce using rule 293 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    PRINT           reduce using rule 293 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    READLINE        reduce using rule 293 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    VAR             reduce using rule 293 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    VAL             reduce using rule 293 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    WHILE           reduce using rule 293 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    FOR             reduce using rule 293 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    IF              reduce using rule 293 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    $end            reduce using rule 293 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    LLAVE_D         reduce using rule 293 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    INT             reduce using rule 293 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    LONG            reduce using rule 293 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    FLOAT           reduce using rule 293 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    DOUBLE          reduce using rule 293 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    RETURN          reduce using rule 293 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    CASE            reduce using rule 293 (asignacionInt -> VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)


state 413

    (296) intvalues -> INT .

    DEF             reduce using rule 296 (intvalues -> INT .)
    VARIABLE        reduce using rule 296 (intvalues -> INT .)
    PRINTLN         reduce using rule 296 (intvalues -> INT .)
    PRINT           reduce using rule 296 (intvalues -> INT .)
    READLINE        reduce using rule 296 (intvalues -> INT .)
    VAR             reduce using rule 296 (intvalues -> INT .)
    VAL             reduce using rule 296 (intvalues -> INT .)
    WHILE           reduce using rule 296 (intvalues -> INT .)
    FOR             reduce using rule 296 (intvalues -> INT .)
    IF              reduce using rule 296 (intvalues -> INT .)
    $end            reduce using rule 296 (intvalues -> INT .)
    LLAVE_D         reduce using rule 296 (intvalues -> INT .)
    INT             reduce using rule 296 (intvalues -> INT .)
    LONG            reduce using rule 296 (intvalues -> INT .)
    FLOAT           reduce using rule 296 (intvalues -> INT .)
    DOUBLE          reduce using rule 296 (intvalues -> INT .)
    RETURN          reduce using rule 296 (intvalues -> INT .)
    CASE            reduce using rule 296 (intvalues -> INT .)


state 414

    (319) stringCastInt -> STRING . PUNTO TO_INT

    PUNTO           shift and go to state 495


state 415

    (62) asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .

    DEF             reduce using rule 62 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 62 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 62 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 62 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 62 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 62 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 62 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 62 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 62 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    IF              reduce using rule 62 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    $end            reduce using rule 62 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 62 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    INT             reduce using rule 62 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 62 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 62 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 62 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 62 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 62 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)


state 416

    (306) asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .

    DEF             reduce using rule 306 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    VARIABLE        reduce using rule 306 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    PRINTLN         reduce using rule 306 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    PRINT           reduce using rule 306 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    READLINE        reduce using rule 306 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    VAR             reduce using rule 306 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    VAL             reduce using rule 306 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    WHILE           reduce using rule 306 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    FOR             reduce using rule 306 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    IF              reduce using rule 306 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    $end            reduce using rule 306 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    LLAVE_D         reduce using rule 306 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    INT             reduce using rule 306 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    LONG            reduce using rule 306 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    FLOAT           reduce using rule 306 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    DOUBLE          reduce using rule 306 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    RETURN          reduce using rule 306 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    CASE            reduce using rule 306 (asignacionFloat -> VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)


state 417

    (309) floatvalues -> FLOAT .

    DEF             reduce using rule 309 (floatvalues -> FLOAT .)
    VARIABLE        reduce using rule 309 (floatvalues -> FLOAT .)
    PRINTLN         reduce using rule 309 (floatvalues -> FLOAT .)
    PRINT           reduce using rule 309 (floatvalues -> FLOAT .)
    READLINE        reduce using rule 309 (floatvalues -> FLOAT .)
    VAR             reduce using rule 309 (floatvalues -> FLOAT .)
    VAL             reduce using rule 309 (floatvalues -> FLOAT .)
    WHILE           reduce using rule 309 (floatvalues -> FLOAT .)
    FOR             reduce using rule 309 (floatvalues -> FLOAT .)
    IF              reduce using rule 309 (floatvalues -> FLOAT .)
    $end            reduce using rule 309 (floatvalues -> FLOAT .)
    LLAVE_D         reduce using rule 309 (floatvalues -> FLOAT .)
    INT             reduce using rule 309 (floatvalues -> FLOAT .)
    LONG            reduce using rule 309 (floatvalues -> FLOAT .)
    FLOAT           reduce using rule 309 (floatvalues -> FLOAT .)
    DOUBLE          reduce using rule 309 (floatvalues -> FLOAT .)
    RETURN          reduce using rule 309 (floatvalues -> FLOAT .)
    CASE            reduce using rule 309 (floatvalues -> FLOAT .)


state 418

    (310) floatvalues -> longvalues .

    DEF             reduce using rule 310 (floatvalues -> longvalues .)
    VARIABLE        reduce using rule 310 (floatvalues -> longvalues .)
    PRINTLN         reduce using rule 310 (floatvalues -> longvalues .)
    PRINT           reduce using rule 310 (floatvalues -> longvalues .)
    READLINE        reduce using rule 310 (floatvalues -> longvalues .)
    VAR             reduce using rule 310 (floatvalues -> longvalues .)
    VAL             reduce using rule 310 (floatvalues -> longvalues .)
    WHILE           reduce using rule 310 (floatvalues -> longvalues .)
    FOR             reduce using rule 310 (floatvalues -> longvalues .)
    IF              reduce using rule 310 (floatvalues -> longvalues .)
    $end            reduce using rule 310 (floatvalues -> longvalues .)
    LLAVE_D         reduce using rule 310 (floatvalues -> longvalues .)
    INT             reduce using rule 310 (floatvalues -> longvalues .)
    LONG            reduce using rule 310 (floatvalues -> longvalues .)
    FLOAT           reduce using rule 310 (floatvalues -> longvalues .)
    DOUBLE          reduce using rule 310 (floatvalues -> longvalues .)
    RETURN          reduce using rule 310 (floatvalues -> longvalues .)
    CASE            reduce using rule 310 (floatvalues -> longvalues .)


state 419

    (321) stringCastFloat -> STRING . PUNTO TO_FLOAT
    (320) stringCastLong -> STRING . PUNTO TO_LONG
    (319) stringCastInt -> STRING . PUNTO TO_INT

    PUNTO           shift and go to state 496


state 420

    (64) asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .

    DEF             reduce using rule 64 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 64 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 64 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 64 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 64 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    VAR             reduce using rule 64 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    VAL             reduce using rule 64 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 64 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    FOR             reduce using rule 64 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    IF              reduce using rule 64 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    $end            reduce using rule 64 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 64 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    INT             reduce using rule 64 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    LONG            reduce using rule 64 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 64 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 64 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 64 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    CASE            reduce using rule 64 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)


state 421

    (313) asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .

    DEF             reduce using rule 313 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    VARIABLE        reduce using rule 313 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    PRINTLN         reduce using rule 313 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    PRINT           reduce using rule 313 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    READLINE        reduce using rule 313 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    VAR             reduce using rule 313 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    VAL             reduce using rule 313 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    WHILE           reduce using rule 313 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    FOR             reduce using rule 313 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    IF              reduce using rule 313 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    $end            reduce using rule 313 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    LLAVE_D         reduce using rule 313 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    INT             reduce using rule 313 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    LONG            reduce using rule 313 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    FLOAT           reduce using rule 313 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    DOUBLE          reduce using rule 313 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    RETURN          reduce using rule 313 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    CASE            reduce using rule 313 (asignacionDouble -> VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)


state 422

    (316) doublevalues -> DOUBLE .

    DEF             reduce using rule 316 (doublevalues -> DOUBLE .)
    VARIABLE        reduce using rule 316 (doublevalues -> DOUBLE .)
    PRINTLN         reduce using rule 316 (doublevalues -> DOUBLE .)
    PRINT           reduce using rule 316 (doublevalues -> DOUBLE .)
    READLINE        reduce using rule 316 (doublevalues -> DOUBLE .)
    VAR             reduce using rule 316 (doublevalues -> DOUBLE .)
    VAL             reduce using rule 316 (doublevalues -> DOUBLE .)
    WHILE           reduce using rule 316 (doublevalues -> DOUBLE .)
    FOR             reduce using rule 316 (doublevalues -> DOUBLE .)
    IF              reduce using rule 316 (doublevalues -> DOUBLE .)
    $end            reduce using rule 316 (doublevalues -> DOUBLE .)
    LLAVE_D         reduce using rule 316 (doublevalues -> DOUBLE .)
    INT             reduce using rule 316 (doublevalues -> DOUBLE .)
    LONG            reduce using rule 316 (doublevalues -> DOUBLE .)
    FLOAT           reduce using rule 316 (doublevalues -> DOUBLE .)
    DOUBLE          reduce using rule 316 (doublevalues -> DOUBLE .)
    RETURN          reduce using rule 316 (doublevalues -> DOUBLE .)
    CASE            reduce using rule 316 (doublevalues -> DOUBLE .)


state 423

    (317) doublevalues -> floatvalues .

    DEF             reduce using rule 317 (doublevalues -> floatvalues .)
    VARIABLE        reduce using rule 317 (doublevalues -> floatvalues .)
    PRINTLN         reduce using rule 317 (doublevalues -> floatvalues .)
    PRINT           reduce using rule 317 (doublevalues -> floatvalues .)
    READLINE        reduce using rule 317 (doublevalues -> floatvalues .)
    VAR             reduce using rule 317 (doublevalues -> floatvalues .)
    VAL             reduce using rule 317 (doublevalues -> floatvalues .)
    WHILE           reduce using rule 317 (doublevalues -> floatvalues .)
    FOR             reduce using rule 317 (doublevalues -> floatvalues .)
    IF              reduce using rule 317 (doublevalues -> floatvalues .)
    $end            reduce using rule 317 (doublevalues -> floatvalues .)
    LLAVE_D         reduce using rule 317 (doublevalues -> floatvalues .)
    INT             reduce using rule 317 (doublevalues -> floatvalues .)
    LONG            reduce using rule 317 (doublevalues -> floatvalues .)
    FLOAT           reduce using rule 317 (doublevalues -> floatvalues .)
    DOUBLE          reduce using rule 317 (doublevalues -> floatvalues .)
    RETURN          reduce using rule 317 (doublevalues -> floatvalues .)
    CASE            reduce using rule 317 (doublevalues -> floatvalues .)


state 424

    (322) stringCastDouble -> STRING . PUNTO TO_DOUBLE
    (321) stringCastFloat -> STRING . PUNTO TO_FLOAT
    (320) stringCastLong -> STRING . PUNTO TO_LONG
    (319) stringCastInt -> STRING . PUNTO TO_INT

    PUNTO           shift and go to state 497


state 425

    (70) asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .

    DEF             reduce using rule 70 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 70 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 70 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 70 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 70 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 70 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 70 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 70 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 70 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    IF              reduce using rule 70 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    $end            reduce using rule 70 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 70 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    INT             reduce using rule 70 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 70 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 70 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 70 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 70 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 70 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)


state 426

    (67) asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .

    DEF             reduce using rule 67 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    VARIABLE        reduce using rule 67 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    PRINTLN         reduce using rule 67 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    PRINT           reduce using rule 67 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    READLINE        reduce using rule 67 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    VAR             reduce using rule 67 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    VAL             reduce using rule 67 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    WHILE           reduce using rule 67 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    FOR             reduce using rule 67 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    IF              reduce using rule 67 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    $end            reduce using rule 67 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    LLAVE_D         reduce using rule 67 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    INT             reduce using rule 67 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    LONG            reduce using rule 67 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    FLOAT           reduce using rule 67 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    DOUBLE          reduce using rule 67 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    RETURN          reduce using rule 67 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    CASE            reduce using rule 67 (asignacionString -> VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)


state 427

    (76) asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .

    DEF             reduce using rule 76 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 76 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 76 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 76 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 76 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 76 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 76 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 76 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 76 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    IF              reduce using rule 76 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    $end            reduce using rule 76 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 76 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    INT             reduce using rule 76 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 76 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 76 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 76 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 76 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 76 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)


state 428

    (73) asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .

    DEF             reduce using rule 73 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    VARIABLE        reduce using rule 73 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    PRINTLN         reduce using rule 73 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    PRINT           reduce using rule 73 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    READLINE        reduce using rule 73 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    VAR             reduce using rule 73 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    VAL             reduce using rule 73 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    WHILE           reduce using rule 73 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    FOR             reduce using rule 73 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    IF              reduce using rule 73 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    $end            reduce using rule 73 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    LLAVE_D         reduce using rule 73 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    INT             reduce using rule 73 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    LONG            reduce using rule 73 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    FLOAT           reduce using rule 73 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    DOUBLE          reduce using rule 73 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    RETURN          reduce using rule 73 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    CASE            reduce using rule 73 (asignacionChar -> VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)


state 429

    (82) asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .

    DEF             reduce using rule 82 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 82 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 82 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 82 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 82 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 82 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 82 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 82 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 82 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    IF              reduce using rule 82 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    $end            reduce using rule 82 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 82 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    INT             reduce using rule 82 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 82 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 82 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 82 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 82 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 82 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)


state 430

    (79) asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .

    DEF             reduce using rule 79 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    VARIABLE        reduce using rule 79 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    PRINTLN         reduce using rule 79 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    PRINT           reduce using rule 79 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    READLINE        reduce using rule 79 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    VAR             reduce using rule 79 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    VAL             reduce using rule 79 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    WHILE           reduce using rule 79 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    FOR             reduce using rule 79 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    IF              reduce using rule 79 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    $end            reduce using rule 79 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    LLAVE_D         reduce using rule 79 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    INT             reduce using rule 79 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    LONG            reduce using rule 79 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    FLOAT           reduce using rule 79 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    DOUBLE          reduce using rule 79 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    RETURN          reduce using rule 79 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    CASE            reduce using rule 79 (asignacionBoolean -> VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)


state 431

    (156) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo . CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    CORCHETE_D      shift and go to state 498


state 432

    (264) arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS . CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (91) tipo -> INTCLASS .

  ! shift/reduce conflict for CORCHETE_D resolved as shift
    CORCHETE_D      shift and go to state 499

  ! CORCHETE_D      [ reduce using rule 91 (tipo -> INTCLASS .) ]


state 433

    (265) arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS . CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D
    (93) tipo -> DOUBLECLASS .

  ! shift/reduce conflict for CORCHETE_D resolved as shift
    CORCHETE_D      shift and go to state 500

  ! CORCHETE_D      [ reduce using rule 93 (tipo -> DOUBLECLASS .) ]


state 434

    (272) dectupla -> PAR_I STRINGCLASS COMA . INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D
    (273) dectupla -> PAR_I STRINGCLASS COMA . LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D
    (274) dectupla -> PAR_I STRINGCLASS COMA . DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D
    (275) dectupla -> PAR_I STRINGCLASS COMA . FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D

    INTCLASS        shift and go to state 501
    LONGCLASS       shift and go to state 502
    DOUBLECLASS     shift and go to state 503
    FLOATCLASS      shift and go to state 504


state 435

    (288) dectupla -> PAR_I INTCLASS COMA . STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D
    (289) dectupla -> PAR_I INTCLASS COMA . LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D
    (290) dectupla -> PAR_I INTCLASS COMA . DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D
    (291) dectupla -> PAR_I INTCLASS COMA . FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D

    STRINGCLASS     shift and go to state 505
    LONGCLASS       shift and go to state 506
    DOUBLECLASS     shift and go to state 507
    FLOATCLASS      shift and go to state 508


state 436

    (284) dectupla -> PAR_I LONGCLASS COMA . STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D
    (285) dectupla -> PAR_I LONGCLASS COMA . INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D
    (286) dectupla -> PAR_I LONGCLASS COMA . DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D
    (287) dectupla -> PAR_I LONGCLASS COMA . FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D

    STRINGCLASS     shift and go to state 509
    INTCLASS        shift and go to state 510
    DOUBLECLASS     shift and go to state 511
    FLOATCLASS      shift and go to state 512


state 437

    (280) dectupla -> PAR_I DOUBLECLASS COMA . STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D
    (281) dectupla -> PAR_I DOUBLECLASS COMA . LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D
    (282) dectupla -> PAR_I DOUBLECLASS COMA . FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D
    (283) dectupla -> PAR_I DOUBLECLASS COMA . INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D

    STRINGCLASS     shift and go to state 513
    LONGCLASS       shift and go to state 514
    FLOATCLASS      shift and go to state 515
    INTCLASS        shift and go to state 516


state 438

    (276) dectupla -> PAR_I FLOATCLASS COMA . STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D
    (277) dectupla -> PAR_I FLOATCLASS COMA . LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D
    (278) dectupla -> PAR_I FLOATCLASS COMA . DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D
    (279) dectupla -> PAR_I FLOATCLASS COMA . INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D

    STRINGCLASS     shift and go to state 517
    LONGCLASS       shift and go to state 518
    DOUBLECLASS     shift and go to state 519
    INTCLASS        shift and go to state 520


state 439

    (157) array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores . PAR_D

    PAR_D           shift and go to state 521


state 440

    (161) list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores . PAR_D

    PAR_D           shift and go to state 522


state 441

    (61) asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .

    DEF             reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    IF              reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    $end            reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    INT             reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 61 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE .)


state 442

    (301) asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .

    DEF             reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    VARIABLE        reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    PRINTLN         reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    PRINT           reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    READLINE        reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    VAR             reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    VAL             reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    WHILE           reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    FOR             reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    IF              reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    $end            reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    LLAVE_D         reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    INT             reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    LONG            reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    FLOAT           reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    DOUBLE          reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    RETURN          reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)
    CASE            reduce using rule 301 (asignacionLong -> VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues .)


state 443

    (295) asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .

    DEF             reduce using rule 295 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    VARIABLE        reduce using rule 295 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    PRINTLN         reduce using rule 295 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    PRINT           reduce using rule 295 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    READLINE        reduce using rule 295 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    VAR             reduce using rule 295 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    VAL             reduce using rule 295 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    WHILE           reduce using rule 295 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    FOR             reduce using rule 295 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    IF              reduce using rule 295 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    $end            reduce using rule 295 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    LLAVE_D         reduce using rule 295 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    INT             reduce using rule 295 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    LONG            reduce using rule 295 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    FLOAT           reduce using rule 295 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    DOUBLE          reduce using rule 295 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    RETURN          reduce using rule 295 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)
    CASE            reduce using rule 295 (asignacionInt -> VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues .)


state 444

    (63) asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .

    DEF             reduce using rule 63 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 63 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 63 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 63 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 63 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 63 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 63 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 63 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 63 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    IF              reduce using rule 63 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    $end            reduce using rule 63 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 63 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    INT             reduce using rule 63 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 63 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 63 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 63 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 63 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 63 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE .)


state 445

    (308) asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .

    DEF             reduce using rule 308 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    VARIABLE        reduce using rule 308 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    PRINTLN         reduce using rule 308 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    PRINT           reduce using rule 308 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    READLINE        reduce using rule 308 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    VAR             reduce using rule 308 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    VAL             reduce using rule 308 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    WHILE           reduce using rule 308 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    FOR             reduce using rule 308 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    IF              reduce using rule 308 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    $end            reduce using rule 308 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    LLAVE_D         reduce using rule 308 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    INT             reduce using rule 308 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    LONG            reduce using rule 308 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    FLOAT           reduce using rule 308 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    DOUBLE          reduce using rule 308 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    RETURN          reduce using rule 308 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)
    CASE            reduce using rule 308 (asignacionFloat -> VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues .)


state 446

    (65) asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .

    DEF             reduce using rule 65 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 65 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 65 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 65 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 65 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    VAR             reduce using rule 65 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    VAL             reduce using rule 65 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 65 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    FOR             reduce using rule 65 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    IF              reduce using rule 65 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    $end            reduce using rule 65 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 65 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    INT             reduce using rule 65 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    LONG            reduce using rule 65 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 65 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 65 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 65 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)
    CASE            reduce using rule 65 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE .)


state 447

    (315) asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .

    DEF             reduce using rule 315 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    VARIABLE        reduce using rule 315 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    PRINTLN         reduce using rule 315 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    PRINT           reduce using rule 315 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    READLINE        reduce using rule 315 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    VAR             reduce using rule 315 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    VAL             reduce using rule 315 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    WHILE           reduce using rule 315 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    FOR             reduce using rule 315 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    IF              reduce using rule 315 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    $end            reduce using rule 315 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    LLAVE_D         reduce using rule 315 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    INT             reduce using rule 315 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    LONG            reduce using rule 315 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    FLOAT           reduce using rule 315 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    DOUBLE          reduce using rule 315 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    RETURN          reduce using rule 315 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)
    CASE            reduce using rule 315 (asignacionDouble -> VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues .)


state 448

    (71) asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .

    DEF             reduce using rule 71 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 71 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 71 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 71 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 71 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 71 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 71 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 71 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 71 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    IF              reduce using rule 71 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    $end            reduce using rule 71 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 71 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    INT             reduce using rule 71 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 71 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 71 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 71 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 71 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 71 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE .)


state 449

    (69) asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .

    DEF             reduce using rule 69 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    VARIABLE        reduce using rule 69 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    PRINTLN         reduce using rule 69 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    PRINT           reduce using rule 69 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    READLINE        reduce using rule 69 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    VAR             reduce using rule 69 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    VAL             reduce using rule 69 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    WHILE           reduce using rule 69 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    FOR             reduce using rule 69 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    IF              reduce using rule 69 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    $end            reduce using rule 69 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    LLAVE_D         reduce using rule 69 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    INT             reduce using rule 69 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    LONG            reduce using rule 69 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    FLOAT           reduce using rule 69 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    DOUBLE          reduce using rule 69 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    RETURN          reduce using rule 69 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)
    CASE            reduce using rule 69 (asignacionString -> VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING .)


state 450

    (77) asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .

    DEF             reduce using rule 77 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 77 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 77 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 77 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 77 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 77 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 77 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 77 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 77 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    IF              reduce using rule 77 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    $end            reduce using rule 77 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 77 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    INT             reduce using rule 77 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 77 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 77 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 77 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 77 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 77 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE .)


state 451

    (75) asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .

    DEF             reduce using rule 75 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    VARIABLE        reduce using rule 75 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    PRINTLN         reduce using rule 75 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    PRINT           reduce using rule 75 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    READLINE        reduce using rule 75 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    VAR             reduce using rule 75 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    VAL             reduce using rule 75 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    WHILE           reduce using rule 75 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    FOR             reduce using rule 75 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    IF              reduce using rule 75 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    $end            reduce using rule 75 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    LLAVE_D         reduce using rule 75 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    INT             reduce using rule 75 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    LONG            reduce using rule 75 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    FLOAT           reduce using rule 75 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    DOUBLE          reduce using rule 75 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    RETURN          reduce using rule 75 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)
    CASE            reduce using rule 75 (asignacionChar -> VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR .)


state 452

    (83) asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .

    DEF             reduce using rule 83 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    VARIABLE        reduce using rule 83 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    PRINTLN         reduce using rule 83 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    PRINT           reduce using rule 83 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    READLINE        reduce using rule 83 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    VAR             reduce using rule 83 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    VAL             reduce using rule 83 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    WHILE           reduce using rule 83 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    FOR             reduce using rule 83 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    IF              reduce using rule 83 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    $end            reduce using rule 83 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    LLAVE_D         reduce using rule 83 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    INT             reduce using rule 83 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    LONG            reduce using rule 83 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    FLOAT           reduce using rule 83 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    DOUBLE          reduce using rule 83 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    RETURN          reduce using rule 83 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)
    CASE            reduce using rule 83 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE .)


state 453

    (81) asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .

    DEF             reduce using rule 81 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    VARIABLE        reduce using rule 81 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    PRINTLN         reduce using rule 81 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    PRINT           reduce using rule 81 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    READLINE        reduce using rule 81 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    VAR             reduce using rule 81 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    VAL             reduce using rule 81 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    WHILE           reduce using rule 81 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    FOR             reduce using rule 81 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    IF              reduce using rule 81 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    $end            reduce using rule 81 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    LLAVE_D         reduce using rule 81 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    INT             reduce using rule 81 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    LONG            reduce using rule 81 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    FLOAT           reduce using rule 81 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    DOUBLE          reduce using rule 81 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    RETURN          reduce using rule 81 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)
    CASE            reduce using rule 81 (asignacionBoolean -> VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos .)


state 454

    (158) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo . CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    CORCHETE_D      shift and go to state 523


state 455

    (162) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo . CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo . CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D

    CORCHETE_D      shift and go to state 524


state 456

    (169) while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 525


state 457

    (170) for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE . PAR_D LLAVE_I contenido LLAVE_D

    PAR_D           shift and go to state 526


state 458

    (174) for -> FOR PAR_I VAR VARIABLE ITERATOR INT . TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> FOR PAR_I VAR VARIABLE ITERATOR INT . UNTIL INT PAR_D LLAVE_I contenido LLAVE_D

    TO              shift and go to state 527
    UNTIL           shift and go to state 528


state 459

    (171) for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 529


state 460

    (172) for -> FOR PAR_I VARIABLE ITERATOR INT TO . INT PAR_D LLAVE_I contenido LLAVE_D

    INT             shift and go to state 530


state 461

    (173) for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL . INT PAR_D LLAVE_I contenido LLAVE_D

    INT             shift and go to state 531


state 462

    (215) if -> IF PAR_I condicional PAR_D LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 532


state 463

    (212) defcase -> CASE SUBGUION FUNCION_FLECHA . codeBlock
    (213) codeBlock -> . contenidoLine
    (214) codeBlock -> . LLAVE_I contenido LLAVE_D
    (40) contenidoLine -> . asignacion
    (41) contenidoLine -> . reasignacion
    (42) contenidoLine -> . funcall
    (43) contenidoLine -> . impresion
    (44) contenidoLine -> . entrada
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    LLAVE_I         shift and go to state 466
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 472
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18

    codeBlock                      shift and go to state 533
    contenidoLine                  shift and go to state 465
    asignacion                     shift and go to state 467
    reasignacion                   shift and go to state 468
    funcall                        shift and go to state 469
    impresion                      shift and go to state 470
    entrada                        shift and go to state 471
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 464

    (184) caseInt -> CASE INT FUNCION_FLECHA codeBlock .

    CASE            reduce using rule 184 (caseInt -> CASE INT FUNCION_FLECHA codeBlock .)
    LLAVE_D         reduce using rule 184 (caseInt -> CASE INT FUNCION_FLECHA codeBlock .)


state 465

    (213) codeBlock -> contenidoLine .

    CASE            reduce using rule 213 (codeBlock -> contenidoLine .)
    LLAVE_D         reduce using rule 213 (codeBlock -> contenidoLine .)


state 466

    (214) codeBlock -> LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 534
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 467

    (40) contenidoLine -> asignacion .

    CASE            reduce using rule 40 (contenidoLine -> asignacion .)
    LLAVE_D         reduce using rule 40 (contenidoLine -> asignacion .)


state 468

    (41) contenidoLine -> reasignacion .

    CASE            reduce using rule 41 (contenidoLine -> reasignacion .)
    LLAVE_D         reduce using rule 41 (contenidoLine -> reasignacion .)


state 469

    (42) contenidoLine -> funcall .

    CASE            reduce using rule 42 (contenidoLine -> funcall .)
    LLAVE_D         reduce using rule 42 (contenidoLine -> funcall .)


state 470

    (43) contenidoLine -> impresion .

    CASE            reduce using rule 43 (contenidoLine -> impresion .)
    LLAVE_D         reduce using rule 43 (contenidoLine -> impresion .)


state 471

    (44) contenidoLine -> entrada .

    CASE            reduce using rule 44 (contenidoLine -> entrada .)
    LLAVE_D         reduce using rule 44 (contenidoLine -> entrada .)


state 472

    (84) reasignacion -> VARIABLE . IGUAL valor
    (85) reasignacion -> VARIABLE . IGUAL returnfun
    (86) reasignacion -> VARIABLE . IGUAL aritmetica
    (87) reasignacion -> VARIABLE . PAR_I INT PAR_D IGUAL valor
    (140) funcall -> VARIABLE . varparen
    (141) varparen -> . PAR_I valores PAR_D
    (142) varparen -> . PAR_I PAR_D
    (143) varparen -> . varparen PAR_I valores PAR_D
    (144) varparen -> . varparen PAR_I PAR_D

    IGUAL           shift and go to state 288
    PAR_I           shift and go to state 289

    varparen                       shift and go to state 36

state 473

    (188) caseLgn -> CASE LONG FUNCION_FLECHA codeBlock .

    CASE            reduce using rule 188 (caseLgn -> CASE LONG FUNCION_FLECHA codeBlock .)
    LLAVE_D         reduce using rule 188 (caseLgn -> CASE LONG FUNCION_FLECHA codeBlock .)


state 474

    (192) caseFlt -> CASE FLOAT FUNCION_FLECHA codeBlock .

    CASE            reduce using rule 192 (caseFlt -> CASE FLOAT FUNCION_FLECHA codeBlock .)
    LLAVE_D         reduce using rule 192 (caseFlt -> CASE FLOAT FUNCION_FLECHA codeBlock .)


state 475

    (196) caseDob -> CASE DOUBLE FUNCION_FLECHA codeBlock .

    CASE            reduce using rule 196 (caseDob -> CASE DOUBLE FUNCION_FLECHA codeBlock .)
    LLAVE_D         reduce using rule 196 (caseDob -> CASE DOUBLE FUNCION_FLECHA codeBlock .)


state 476

    (200) caseStr -> CASE STRING FUNCION_FLECHA codeBlock .

    CASE            reduce using rule 200 (caseStr -> CASE STRING FUNCION_FLECHA codeBlock .)
    LLAVE_D         reduce using rule 200 (caseStr -> CASE STRING FUNCION_FLECHA codeBlock .)


state 477

    (204) caseChar -> CASE CHAR FUNCION_FLECHA codeBlock .

    CASE            reduce using rule 204 (caseChar -> CASE CHAR FUNCION_FLECHA codeBlock .)
    LLAVE_D         reduce using rule 204 (caseChar -> CASE CHAR FUNCION_FLECHA codeBlock .)


state 478

    (208) caseBool -> CASE booleanos FUNCION_FLECHA codeBlock .

    CASE            reduce using rule 208 (caseBool -> CASE booleanos FUNCION_FLECHA codeBlock .)
    LLAVE_D         reduce using rule 208 (caseBool -> CASE booleanos FUNCION_FLECHA codeBlock .)


state 479

    (4) io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO . READLINE

    READLINE        shift and go to state 535


state 480

    (218) elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I . contenido LLAVE_D
    (219) elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I . contenido LLAVE_D elseif
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 536
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 481

    (102) valor -> VARIABLE PAR_I . VARIABLE PAR_D
    (103) valor -> VARIABLE PAR_I . INT PAR_D
    (141) varparen -> PAR_I . valores PAR_D
    (142) varparen -> PAR_I . PAR_D
    (164) valores -> . valor
    (165) valores -> . valor COMA valores
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    VARIABLE        shift and go to state 537
    INT             shift and go to state 538
    PAR_D           shift and go to state 63
    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valores                        shift and go to state 62
    valor                          shift and go to state 64
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 482

    (87) reasignacion -> VARIABLE PAR_I INT PAR_D . IGUAL valor

    IGUAL           shift and go to state 539


state 483

    (110) funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .

    DEF             reduce using rule 110 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 110 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 110 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 110 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 110 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 110 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 110 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 110 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 110 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 110 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 110 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 110 (funcion -> DEF VARIABLE parametro IGUAL LLAVE_I contenido LLAVE_D .)


state 484

    (118) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido . RETURN valor LLAVE_D
    (119) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido . RETURN VARIABLE LLAVE_D
    (120) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido . RETURN returnfun LLAVE_D
    (121) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido . RETURN aritmetica LLAVE_D

    RETURN          shift and go to state 540


state 485

    (122) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN . valor LLAVE_D
    (123) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN . VARIABLE LLAVE_D
    (124) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN . returnfun LLAVE_D
    (125) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN . aritmetica LLAVE_D
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (145) returnfun -> . returnCastable
    (146) returnfun -> . castingcall
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE
    (147) returnCastable -> . entrada
    (148) returnCastable -> . funcall
    (149) castingcall -> . returnCastable PUNTO castingfun
    (150) castingcall -> . VARIABLE PUNTO castingfun
    (139) entrada -> . READLINE PAR_I PAR_D
    (140) funcall -> . VARIABLE varparen

    VARIABLE        shift and go to state 541
    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    READLINE        shift and go to state 18

    valor                          shift and go to state 542
    returnfun                      shift and go to state 543
    aritmetica                     shift and go to state 544
    numeros                        shift and go to state 382
    booleanos                      shift and go to state 69
    returnCastable                 shift and go to state 168
    castingcall                    shift and go to state 169
    entrada                        shift and go to state 177
    funcall                        shift and go to state 178

state 486

    (126) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido . RETURN tuple LLAVE_D
    (127) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido . RETURN VARIABLE LLAVE_D
    (128) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido . RETURN returnfun LLAVE_D

    RETURN          shift and go to state 545


state 487

    (130) dectipoTupla -> DOBLE_PUNTO PAR_I tipos PAR_D .

    IGUAL           reduce using rule 130 (dectipoTupla -> DOBLE_PUNTO PAR_I tipos PAR_D .)


state 488

    (132) tipos -> tipo tiposentry .

    PAR_D           reduce using rule 132 (tipos -> tipo tiposentry .)


state 489

    (133) tiposentry -> COMA . tipo
    (134) tiposentry -> COMA . tipo tiposentry
    (88) tipo -> . CHARCLASS
    (89) tipo -> . STRINGCLASS
    (90) tipo -> . BOOLCLASS
    (91) tipo -> . INTCLASS
    (92) tipo -> . LONGCLASS
    (93) tipo -> . DOUBLECLASS
    (94) tipo -> . FLOATCLASS
    (95) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (96) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    CHARCLASS       shift and go to state 296
    STRINGCLASS     shift and go to state 297
    BOOLCLASS       shift and go to state 298
    INTCLASS        shift and go to state 299
    LONGCLASS       shift and go to state 300
    DOUBLECLASS     shift and go to state 301
    FLOATCLASS      shift and go to state 302
    ARRAYCLASS      shift and go to state 303
    LISTCLASS       shift and go to state 304

    tipo                           shift and go to state 546

state 490

    (95) tipo -> ARRAYCLASS CORCHETE_I tipo . CORCHETE_D

    CORCHETE_D      shift and go to state 547


state 491

    (96) tipo -> LISTCLASS CORCHETE_I tipo . CORCHETE_D

    CORCHETE_D      shift and go to state 548


state 492

    (113) declaracion -> VARIABLE DOBLE_PUNTO tipo IGUAL . valor
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valor                          shift and go to state 549
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 493

    (155) array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .

    DEF             reduce using rule 155 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    VARIABLE        reduce using rule 155 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    PRINTLN         reduce using rule 155 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    PRINT           reduce using rule 155 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    READLINE        reduce using rule 155 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    VAR             reduce using rule 155 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    VAL             reduce using rule 155 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    WHILE           reduce using rule 155 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    FOR             reduce using rule 155 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    IF              reduce using rule 155 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    $end            reduce using rule 155 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    LLAVE_D         reduce using rule 155 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    INT             reduce using rule 155 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    LONG            reduce using rule 155 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    FLOAT           reduce using rule 155 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    DOUBLE          reduce using rule 155 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    RETURN          reduce using rule 155 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    CASE            reduce using rule 155 (array -> VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)


state 494

    (320) stringCastLong -> STRING PUNTO . TO_LONG
    (319) stringCastInt -> STRING PUNTO . TO_INT

    TO_LONG         shift and go to state 400
    TO_INT          shift and go to state 401


state 495

    (319) stringCastInt -> STRING PUNTO . TO_INT

    TO_INT          shift and go to state 401


state 496

    (321) stringCastFloat -> STRING PUNTO . TO_FLOAT
    (320) stringCastLong -> STRING PUNTO . TO_LONG
    (319) stringCastInt -> STRING PUNTO . TO_INT

    TO_FLOAT        shift and go to state 402
    TO_LONG         shift and go to state 400
    TO_INT          shift and go to state 401


state 497

    (322) stringCastDouble -> STRING PUNTO . TO_DOUBLE
    (321) stringCastFloat -> STRING PUNTO . TO_FLOAT
    (320) stringCastLong -> STRING PUNTO . TO_LONG
    (319) stringCastInt -> STRING PUNTO . TO_INT

    TO_DOUBLE       shift and go to state 403
    TO_FLOAT        shift and go to state 402
    TO_LONG         shift and go to state 400
    TO_INT          shift and go to state 401


state 498

    (156) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D . IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    IGUAL           shift and go to state 550


state 499

    (264) arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D . IGUAL ARRAYCLASS PAR_I valoresInt PAR_D

    IGUAL           shift and go to state 551


state 500

    (265) arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D . IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    IGUAL           shift and go to state 552


state 501

    (272) dectupla -> PAR_I STRINGCLASS COMA INTCLASS . PAR_D IGUAL PAR_I STRING COMA INT PAR_D

    PAR_D           shift and go to state 553


state 502

    (273) dectupla -> PAR_I STRINGCLASS COMA LONGCLASS . PAR_D IGUAL PAR_I STRING COMA LONG PAR_D

    PAR_D           shift and go to state 554


state 503

    (274) dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS . PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D

    PAR_D           shift and go to state 555


state 504

    (275) dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS . PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D

    PAR_D           shift and go to state 556


state 505

    (288) dectupla -> PAR_I INTCLASS COMA STRINGCLASS . PAR_D IGUAL PAR_I INT COMA STRING PAR_D

    PAR_D           shift and go to state 557


state 506

    (289) dectupla -> PAR_I INTCLASS COMA LONGCLASS . PAR_D IGUAL PAR_I INT COMA LONG PAR_D

    PAR_D           shift and go to state 558


state 507

    (290) dectupla -> PAR_I INTCLASS COMA DOUBLECLASS . PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D

    PAR_D           shift and go to state 559


state 508

    (291) dectupla -> PAR_I INTCLASS COMA FLOATCLASS . PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D

    PAR_D           shift and go to state 560


state 509

    (284) dectupla -> PAR_I LONGCLASS COMA STRINGCLASS . PAR_D IGUAL PAR_I LONG COMA STRING PAR_D

    PAR_D           shift and go to state 561


state 510

    (285) dectupla -> PAR_I LONGCLASS COMA INTCLASS . PAR_D IGUAL PAR_I LONG COMA INT PAR_D

    PAR_D           shift and go to state 562


state 511

    (286) dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS . PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D

    PAR_D           shift and go to state 563


state 512

    (287) dectupla -> PAR_I LONGCLASS COMA FLOATCLASS . PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D

    PAR_D           shift and go to state 564


state 513

    (280) dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS . PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D

    PAR_D           shift and go to state 565


state 514

    (281) dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS . PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D

    PAR_D           shift and go to state 566


state 515

    (282) dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS . PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D

    PAR_D           shift and go to state 567


state 516

    (283) dectupla -> PAR_I DOUBLECLASS COMA INTCLASS . PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D

    PAR_D           shift and go to state 568


state 517

    (276) dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS . PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D

    PAR_D           shift and go to state 569


state 518

    (277) dectupla -> PAR_I FLOATCLASS COMA LONGCLASS . PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D

    PAR_D           shift and go to state 570


state 519

    (278) dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS . PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D

    PAR_D           shift and go to state 571


state 520

    (279) dectupla -> PAR_I FLOATCLASS COMA INTCLASS . PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D

    PAR_D           shift and go to state 572


state 521

    (157) array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .

    DEF             reduce using rule 157 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    VARIABLE        reduce using rule 157 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    PRINTLN         reduce using rule 157 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    PRINT           reduce using rule 157 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    READLINE        reduce using rule 157 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    VAR             reduce using rule 157 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    VAL             reduce using rule 157 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    WHILE           reduce using rule 157 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    FOR             reduce using rule 157 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    IF              reduce using rule 157 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    $end            reduce using rule 157 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    LLAVE_D         reduce using rule 157 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    INT             reduce using rule 157 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    LONG            reduce using rule 157 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    FLOAT           reduce using rule 157 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    DOUBLE          reduce using rule 157 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    RETURN          reduce using rule 157 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)
    CASE            reduce using rule 157 (array -> VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D .)


state 522

    (161) list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .

    DEF             reduce using rule 161 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    VARIABLE        reduce using rule 161 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    PRINTLN         reduce using rule 161 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    PRINT           reduce using rule 161 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    READLINE        reduce using rule 161 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    VAR             reduce using rule 161 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    VAL             reduce using rule 161 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    WHILE           reduce using rule 161 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    FOR             reduce using rule 161 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    IF              reduce using rule 161 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    $end            reduce using rule 161 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    LLAVE_D         reduce using rule 161 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    INT             reduce using rule 161 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    LONG            reduce using rule 161 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    FLOAT           reduce using rule 161 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    DOUBLE          reduce using rule 161 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    RETURN          reduce using rule 161 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)
    CASE            reduce using rule 161 (list -> VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D .)


state 523

    (158) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D . IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    IGUAL           shift and go to state 573


state 524

    (162) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D . IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D . IGUAL LISTCLASS PAR_I valores PAR_D

    IGUAL           shift and go to state 574


state 525

    (169) while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .

    DEF             reduce using rule 169 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 169 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 169 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 169 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 169 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 169 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 169 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 169 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 169 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 169 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 169 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 169 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 169 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 169 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 169 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 169 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 169 (while -> WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)


state 526

    (170) for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 575


state 527

    (174) for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO . INT PAR_D LLAVE_I contenido LLAVE_D

    INT             shift and go to state 576


state 528

    (175) for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL . INT PAR_D LLAVE_I contenido LLAVE_D

    INT             shift and go to state 577


state 529

    (171) for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 578
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 530

    (172) for -> FOR PAR_I VARIABLE ITERATOR INT TO INT . PAR_D LLAVE_I contenido LLAVE_D

    PAR_D           shift and go to state 579


state 531

    (173) for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT . PAR_D LLAVE_I contenido LLAVE_D

    PAR_D           shift and go to state 580


state 532

    (215) if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .

    ELSE            reduce using rule 215 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    DEF             reduce using rule 215 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 215 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 215 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 215 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 215 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 215 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 215 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 215 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 215 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 215 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 215 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 215 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 215 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 215 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 215 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 215 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 215 (if -> IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)


state 533

    (212) defcase -> CASE SUBGUION FUNCION_FLECHA codeBlock .

    LLAVE_D         reduce using rule 212 (defcase -> CASE SUBGUION FUNCION_FLECHA codeBlock .)


state 534

    (214) codeBlock -> LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 581


state 535

    (4) io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .

    OBJECT          reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    IMPORT          reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    DEF             reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    VARIABLE        reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    PRINTLN         reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    PRINT           reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    READLINE        reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    VAR             reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    VAL             reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    WHILE           reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    FOR             reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)
    IF              reduce using rule 4 (io -> VARIABLE PUNTO VARIABLE PUNTO VARIABLE PUNTO READLINE .)


state 536

    (218) elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido . LLAVE_D
    (219) elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido . LLAVE_D elseif

    LLAVE_D         shift and go to state 582


state 537

    (102) valor -> VARIABLE PAR_I VARIABLE . PAR_D
    (99) valor -> VARIABLE .
    (102) valor -> VARIABLE . PAR_I VARIABLE PAR_D
    (103) valor -> VARIABLE . PAR_I INT PAR_D

  ! shift/reduce conflict for PAR_D resolved as shift
    PAR_D           shift and go to state 374
    COMA            reduce using rule 99 (valor -> VARIABLE .)
    PAR_I           shift and go to state 128

  ! PAR_D           [ reduce using rule 99 (valor -> VARIABLE .) ]


state 538

    (103) valor -> VARIABLE PAR_I INT . PAR_D
    (106) numeros -> INT .

  ! shift/reduce conflict for PAR_D resolved as shift
    PAR_D           shift and go to state 375
    COMA            reduce using rule 106 (numeros -> INT .)

  ! PAR_D           [ reduce using rule 106 (numeros -> INT .) ]


state 539

    (87) reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL . valor
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valor                          shift and go to state 583
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 540

    (118) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN . valor LLAVE_D
    (119) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN . VARIABLE LLAVE_D
    (120) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN . returnfun LLAVE_D
    (121) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN . aritmetica LLAVE_D
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (145) returnfun -> . returnCastable
    (146) returnfun -> . castingcall
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE
    (147) returnCastable -> . entrada
    (148) returnCastable -> . funcall
    (149) castingcall -> . returnCastable PUNTO castingfun
    (150) castingcall -> . VARIABLE PUNTO castingfun
    (139) entrada -> . READLINE PAR_I PAR_D
    (140) funcall -> . VARIABLE varparen

    VARIABLE        shift and go to state 584
    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75
    READLINE        shift and go to state 18

    valor                          shift and go to state 585
    returnfun                      shift and go to state 586
    aritmetica                     shift and go to state 587
    numeros                        shift and go to state 382
    booleanos                      shift and go to state 69
    returnCastable                 shift and go to state 168
    castingcall                    shift and go to state 169
    entrada                        shift and go to state 177
    funcall                        shift and go to state 178

state 541

    (123) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE . LLAVE_D
    (99) valor -> VARIABLE .
    (102) valor -> VARIABLE . PAR_I VARIABLE PAR_D
    (103) valor -> VARIABLE . PAR_I INT PAR_D
    (254) aritmetica -> VARIABLE . aritmeticos numeros
    (256) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (150) castingcall -> VARIABLE . PUNTO castingfun
    (140) funcall -> VARIABLE . varparen
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD
    (141) varparen -> . PAR_I valores PAR_D
    (142) varparen -> . PAR_I PAR_D
    (143) varparen -> . varparen PAR_I valores PAR_D
    (144) varparen -> . varparen PAR_I PAR_D

  ! shift/reduce conflict for LLAVE_D resolved as shift
    LLAVE_D         shift and go to state 588
    PAR_I           shift and go to state 481
    PUNTO           shift and go to state 308
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

  ! LLAVE_D         [ reduce using rule 99 (valor -> VARIABLE .) ]

    aritmeticos                    shift and go to state 218
    varparen                       shift and go to state 36

state 542

    (122) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor . LLAVE_D

    LLAVE_D         shift and go to state 589


state 543

    (124) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun . LLAVE_D

    LLAVE_D         shift and go to state 590


state 544

    (125) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica . LLAVE_D
    (257) aritmetica -> aritmetica . aritmeticos numeros
    (258) aritmetica -> aritmetica . aritmeticos VARIABLE
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD

    LLAVE_D         shift and go to state 591
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    aritmeticos                    shift and go to state 235

state 545

    (126) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN . tuple LLAVE_D
    (127) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN . VARIABLE LLAVE_D
    (128) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN . returnfun LLAVE_D
    (166) tuple -> . PAR_I valores PAR_D
    (145) returnfun -> . returnCastable
    (146) returnfun -> . castingcall
    (147) returnCastable -> . entrada
    (148) returnCastable -> . funcall
    (149) castingcall -> . returnCastable PUNTO castingfun
    (150) castingcall -> . VARIABLE PUNTO castingfun
    (139) entrada -> . READLINE PAR_I PAR_D
    (140) funcall -> . VARIABLE varparen

    VARIABLE        shift and go to state 592
    PAR_I           shift and go to state 167
    READLINE        shift and go to state 18

    tuple                          shift and go to state 593
    returnfun                      shift and go to state 594
    returnCastable                 shift and go to state 168
    castingcall                    shift and go to state 169
    entrada                        shift and go to state 177
    funcall                        shift and go to state 178

state 546

    (133) tiposentry -> COMA tipo .
    (134) tiposentry -> COMA tipo . tiposentry
    (133) tiposentry -> . COMA tipo
    (134) tiposentry -> . COMA tipo tiposentry

    PAR_D           reduce using rule 133 (tiposentry -> COMA tipo .)
    COMA            shift and go to state 489

    tiposentry                     shift and go to state 595

state 547

    (95) tipo -> ARRAYCLASS CORCHETE_I tipo CORCHETE_D .

    IGUAL           reduce using rule 95 (tipo -> ARRAYCLASS CORCHETE_I tipo CORCHETE_D .)
    COMA            reduce using rule 95 (tipo -> ARRAYCLASS CORCHETE_I tipo CORCHETE_D .)
    PAR_D           reduce using rule 95 (tipo -> ARRAYCLASS CORCHETE_I tipo CORCHETE_D .)
    CORCHETE_D      reduce using rule 95 (tipo -> ARRAYCLASS CORCHETE_I tipo CORCHETE_D .)


state 548

    (96) tipo -> LISTCLASS CORCHETE_I tipo CORCHETE_D .

    IGUAL           reduce using rule 96 (tipo -> LISTCLASS CORCHETE_I tipo CORCHETE_D .)
    COMA            reduce using rule 96 (tipo -> LISTCLASS CORCHETE_I tipo CORCHETE_D .)
    PAR_D           reduce using rule 96 (tipo -> LISTCLASS CORCHETE_I tipo CORCHETE_D .)
    CORCHETE_D      reduce using rule 96 (tipo -> LISTCLASS CORCHETE_I tipo CORCHETE_D .)


state 549

    (113) declaracion -> VARIABLE DOBLE_PUNTO tipo IGUAL valor .

    PAR_D           reduce using rule 113 (declaracion -> VARIABLE DOBLE_PUNTO tipo IGUAL valor .)


state 550

    (156) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL . NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    NEW             shift and go to state 596


state 551

    (264) arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL . ARRAYCLASS PAR_I valoresInt PAR_D

    ARRAYCLASS      shift and go to state 597


state 552

    (265) arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL . ARRAYCLASS PAR_I valoresDouble PAR_D

    ARRAYCLASS      shift and go to state 598


state 553

    (272) dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D . IGUAL PAR_I STRING COMA INT PAR_D

    IGUAL           shift and go to state 599


state 554

    (273) dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D . IGUAL PAR_I STRING COMA LONG PAR_D

    IGUAL           shift and go to state 600


state 555

    (274) dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D . IGUAL PAR_I STRING COMA DOUBLE PAR_D

    IGUAL           shift and go to state 601


state 556

    (275) dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D . IGUAL PAR_I STRING COMA FLOAT PAR_D

    IGUAL           shift and go to state 602


state 557

    (288) dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D . IGUAL PAR_I INT COMA STRING PAR_D

    IGUAL           shift and go to state 603


state 558

    (289) dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D . IGUAL PAR_I INT COMA LONG PAR_D

    IGUAL           shift and go to state 604


state 559

    (290) dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D . IGUAL PAR_I INT COMA DOUBLE PAR_D

    IGUAL           shift and go to state 605


state 560

    (291) dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D . IGUAL PAR_I INT COMA FLOAT PAR_D

    IGUAL           shift and go to state 606


state 561

    (284) dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D . IGUAL PAR_I LONG COMA STRING PAR_D

    IGUAL           shift and go to state 607


state 562

    (285) dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D . IGUAL PAR_I LONG COMA INT PAR_D

    IGUAL           shift and go to state 608


state 563

    (286) dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D . IGUAL PAR_I LONG COMA DOUBLE PAR_D

    IGUAL           shift and go to state 609


state 564

    (287) dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D . IGUAL PAR_I LONG COMA FLOAT PAR_D

    IGUAL           shift and go to state 610


state 565

    (280) dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D . IGUAL PAR_I DOUBLE COMA STRING PAR_D

    IGUAL           shift and go to state 611


state 566

    (281) dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D . IGUAL PAR_I DOUBLE COMA LONG PAR_D

    IGUAL           shift and go to state 612


state 567

    (282) dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D . IGUAL PAR_I DOUBLE COMA FLOAT PAR_D

    IGUAL           shift and go to state 613


state 568

    (283) dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D . IGUAL PAR_I DOUBLE COMA INT PAR_D

    IGUAL           shift and go to state 614


state 569

    (276) dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D . IGUAL PAR_I FLOAT COMA STRING PAR_D

    IGUAL           shift and go to state 615


state 570

    (277) dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D . IGUAL PAR_I FLOAT COMA LONG PAR_D

    IGUAL           shift and go to state 616


state 571

    (278) dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D . IGUAL PAR_I FLOAT COMA DOUBLE PAR_D

    IGUAL           shift and go to state 617


state 572

    (279) dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D . IGUAL PAR_I FLOAT COMA INT PAR_D

    IGUAL           shift and go to state 618


state 573

    (158) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL . NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    NEW             shift and go to state 619


state 574

    (162) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL . NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL . LISTCLASS PAR_I valores PAR_D

    NEW             shift and go to state 621
    LISTCLASS       shift and go to state 620


state 575

    (170) for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 622
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 576

    (174) for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT . PAR_D LLAVE_I contenido LLAVE_D

    PAR_D           shift and go to state 623


state 577

    (175) for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT . PAR_D LLAVE_I contenido LLAVE_D

    PAR_D           shift and go to state 624


state 578

    (171) for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 625


state 579

    (172) for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 626


state 580

    (173) for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 627


state 581

    (214) codeBlock -> LLAVE_I contenido LLAVE_D .

    CASE            reduce using rule 214 (codeBlock -> LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 214 (codeBlock -> LLAVE_I contenido LLAVE_D .)


state 582

    (218) elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .
    (219) elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D . elseif
    (218) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (219) elseif -> . ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif

  ! shift/reduce conflict for ELSE resolved as shift
    DEF             reduce using rule 218 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 218 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 218 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 218 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 218 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 218 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 218 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 218 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 218 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 218 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 218 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 218 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 218 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 218 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 218 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 218 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 218 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .)
    ELSE            shift and go to state 628

  ! ELSE            [ reduce using rule 218 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D .) ]

    elseif                         shift and go to state 629

state 583

    (87) reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .

    VAR             reduce using rule 87 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    VAL             reduce using rule 87 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    VARIABLE        reduce using rule 87 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    PRINTLN         reduce using rule 87 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    PRINT           reduce using rule 87 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    READLINE        reduce using rule 87 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    WHILE           reduce using rule 87 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    FOR             reduce using rule 87 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    IF              reduce using rule 87 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    INT             reduce using rule 87 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    LONG            reduce using rule 87 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    FLOAT           reduce using rule 87 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    DOUBLE          reduce using rule 87 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    LLAVE_D         reduce using rule 87 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    RETURN          reduce using rule 87 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)
    CASE            reduce using rule 87 (reasignacion -> VARIABLE PAR_I INT PAR_D IGUAL valor .)


state 584

    (119) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE . LLAVE_D
    (99) valor -> VARIABLE .
    (102) valor -> VARIABLE . PAR_I VARIABLE PAR_D
    (103) valor -> VARIABLE . PAR_I INT PAR_D
    (254) aritmetica -> VARIABLE . aritmeticos numeros
    (256) aritmetica -> VARIABLE . aritmeticos VARIABLE
    (150) castingcall -> VARIABLE . PUNTO castingfun
    (140) funcall -> VARIABLE . varparen
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD
    (141) varparen -> . PAR_I valores PAR_D
    (142) varparen -> . PAR_I PAR_D
    (143) varparen -> . varparen PAR_I valores PAR_D
    (144) varparen -> . varparen PAR_I PAR_D

  ! shift/reduce conflict for LLAVE_D resolved as shift
    LLAVE_D         shift and go to state 630
    PAR_I           shift and go to state 481
    PUNTO           shift and go to state 308
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

  ! LLAVE_D         [ reduce using rule 99 (valor -> VARIABLE .) ]

    aritmeticos                    shift and go to state 218
    varparen                       shift and go to state 36

state 585

    (118) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor . LLAVE_D

    LLAVE_D         shift and go to state 631


state 586

    (120) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun . LLAVE_D

    LLAVE_D         shift and go to state 632


state 587

    (121) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica . LLAVE_D
    (257) aritmetica -> aritmetica . aritmeticos numeros
    (258) aritmetica -> aritmetica . aritmeticos VARIABLE
    (259) aritmeticos -> . MENOS
    (260) aritmeticos -> . MAS
    (261) aritmeticos -> . MULTIPLICACION
    (262) aritmeticos -> . DIVISION
    (263) aritmeticos -> . MOD

    LLAVE_D         shift and go to state 633
    MENOS           shift and go to state 223
    MAS             shift and go to state 224
    MULTIPLICACION  shift and go to state 225
    DIVISION        shift and go to state 226
    MOD             shift and go to state 227

    aritmeticos                    shift and go to state 235

state 588

    (123) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .

    DEF             reduce using rule 123 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    VARIABLE        reduce using rule 123 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    PRINTLN         reduce using rule 123 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    PRINT           reduce using rule 123 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    READLINE        reduce using rule 123 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    VAR             reduce using rule 123 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    VAL             reduce using rule 123 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    WHILE           reduce using rule 123 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    FOR             reduce using rule 123 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    IF              reduce using rule 123 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    $end            reduce using rule 123 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)
    LLAVE_D         reduce using rule 123 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN VARIABLE LLAVE_D .)


state 589

    (122) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .

    DEF             reduce using rule 122 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    VARIABLE        reduce using rule 122 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    PRINTLN         reduce using rule 122 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    PRINT           reduce using rule 122 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    READLINE        reduce using rule 122 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    VAR             reduce using rule 122 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    VAL             reduce using rule 122 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    WHILE           reduce using rule 122 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    FOR             reduce using rule 122 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    IF              reduce using rule 122 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    $end            reduce using rule 122 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)
    LLAVE_D         reduce using rule 122 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN valor LLAVE_D .)


state 590

    (124) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .

    DEF             reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    VARIABLE        reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    PRINTLN         reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    PRINT           reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    READLINE        reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    VAR             reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    VAL             reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    WHILE           reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    FOR             reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    IF              reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    $end            reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)
    LLAVE_D         reduce using rule 124 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN returnfun LLAVE_D .)


state 591

    (125) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .

    DEF             reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    VARIABLE        reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    PRINTLN         reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    PRINT           reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    READLINE        reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    VAR             reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    VAL             reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    WHILE           reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    FOR             reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    IF              reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    $end            reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)
    LLAVE_D         reduce using rule 125 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I RETURN aritmetica LLAVE_D .)


state 592

    (127) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE . LLAVE_D
    (150) castingcall -> VARIABLE . PUNTO castingfun
    (140) funcall -> VARIABLE . varparen
    (141) varparen -> . PAR_I valores PAR_D
    (142) varparen -> . PAR_I PAR_D
    (143) varparen -> . varparen PAR_I valores PAR_D
    (144) varparen -> . varparen PAR_I PAR_D

    LLAVE_D         shift and go to state 634
    PUNTO           shift and go to state 308
    PAR_I           shift and go to state 38

    varparen                       shift and go to state 36

state 593

    (126) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple . LLAVE_D

    LLAVE_D         shift and go to state 635


state 594

    (128) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun . LLAVE_D

    LLAVE_D         shift and go to state 636


state 595

    (134) tiposentry -> COMA tipo tiposentry .

    PAR_D           reduce using rule 134 (tiposentry -> COMA tipo tiposentry .)


state 596

    (156) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW . ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    ARRAYCLASS      shift and go to state 637


state 597

    (264) arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS . PAR_I valoresInt PAR_D

    PAR_I           shift and go to state 638


state 598

    (265) arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS . PAR_I valoresDouble PAR_D

    PAR_I           shift and go to state 639


state 599

    (272) dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL . PAR_I STRING COMA INT PAR_D

    PAR_I           shift and go to state 640


state 600

    (273) dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL . PAR_I STRING COMA LONG PAR_D

    PAR_I           shift and go to state 641


state 601

    (274) dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL . PAR_I STRING COMA DOUBLE PAR_D

    PAR_I           shift and go to state 642


state 602

    (275) dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL . PAR_I STRING COMA FLOAT PAR_D

    PAR_I           shift and go to state 643


state 603

    (288) dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL . PAR_I INT COMA STRING PAR_D

    PAR_I           shift and go to state 644


state 604

    (289) dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL . PAR_I INT COMA LONG PAR_D

    PAR_I           shift and go to state 645


state 605

    (290) dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL . PAR_I INT COMA DOUBLE PAR_D

    PAR_I           shift and go to state 646


state 606

    (291) dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL . PAR_I INT COMA FLOAT PAR_D

    PAR_I           shift and go to state 647


state 607

    (284) dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL . PAR_I LONG COMA STRING PAR_D

    PAR_I           shift and go to state 648


state 608

    (285) dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL . PAR_I LONG COMA INT PAR_D

    PAR_I           shift and go to state 649


state 609

    (286) dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL . PAR_I LONG COMA DOUBLE PAR_D

    PAR_I           shift and go to state 650


state 610

    (287) dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL . PAR_I LONG COMA FLOAT PAR_D

    PAR_I           shift and go to state 651


state 611

    (280) dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL . PAR_I DOUBLE COMA STRING PAR_D

    PAR_I           shift and go to state 652


state 612

    (281) dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL . PAR_I DOUBLE COMA LONG PAR_D

    PAR_I           shift and go to state 653


state 613

    (282) dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL . PAR_I DOUBLE COMA FLOAT PAR_D

    PAR_I           shift and go to state 654


state 614

    (283) dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL . PAR_I DOUBLE COMA INT PAR_D

    PAR_I           shift and go to state 655


state 615

    (276) dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL . PAR_I FLOAT COMA STRING PAR_D

    PAR_I           shift and go to state 656


state 616

    (277) dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL . PAR_I FLOAT COMA LONG PAR_D

    PAR_I           shift and go to state 657


state 617

    (278) dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL . PAR_I FLOAT COMA DOUBLE PAR_D

    PAR_I           shift and go to state 658


state 618

    (279) dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL . PAR_I FLOAT COMA INT PAR_D

    PAR_I           shift and go to state 659


state 619

    (158) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW . ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    ARRAYCLASS      shift and go to state 660


state 620

    (163) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS . PAR_I valores PAR_D

    PAR_I           shift and go to state 661


state 621

    (162) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW . LISTCLASS PAR_I valores PAR_D

    LISTCLASS       shift and go to state 662


state 622

    (170) for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 663


state 623

    (174) for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 664


state 624

    (175) for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D . LLAVE_I contenido LLAVE_D

    LLAVE_I         shift and go to state 665


state 625

    (171) for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .

    DEF             reduce using rule 171 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 171 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 171 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 171 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 171 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 171 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 171 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 171 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 171 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 171 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 171 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 171 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 171 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 171 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 171 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 171 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 171 (for -> FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)


state 626

    (172) for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 666
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 627

    (173) for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 667
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 628

    (218) elseif -> ELSE . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (219) elseif -> ELSE . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif

    IF              shift and go to state 81


state 629

    (219) elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .

    ELSE            reduce using rule 219 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    DEF             reduce using rule 219 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    VARIABLE        reduce using rule 219 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    PRINTLN         reduce using rule 219 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    PRINT           reduce using rule 219 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    READLINE        reduce using rule 219 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    VAR             reduce using rule 219 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    VAL             reduce using rule 219 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    WHILE           reduce using rule 219 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    FOR             reduce using rule 219 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    IF              reduce using rule 219 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    $end            reduce using rule 219 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    LLAVE_D         reduce using rule 219 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    INT             reduce using rule 219 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    LONG            reduce using rule 219 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    FLOAT           reduce using rule 219 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    DOUBLE          reduce using rule 219 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)
    RETURN          reduce using rule 219 (elseif -> ELSE IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D elseif .)


state 630

    (119) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .

    DEF             reduce using rule 119 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    VARIABLE        reduce using rule 119 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    PRINTLN         reduce using rule 119 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    PRINT           reduce using rule 119 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    READLINE        reduce using rule 119 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    VAR             reduce using rule 119 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    VAL             reduce using rule 119 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    WHILE           reduce using rule 119 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    FOR             reduce using rule 119 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    IF              reduce using rule 119 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    $end            reduce using rule 119 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    LLAVE_D         reduce using rule 119 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)


state 631

    (118) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .

    DEF             reduce using rule 118 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    VARIABLE        reduce using rule 118 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    PRINTLN         reduce using rule 118 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    PRINT           reduce using rule 118 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    READLINE        reduce using rule 118 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    VAR             reduce using rule 118 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    VAL             reduce using rule 118 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    WHILE           reduce using rule 118 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    FOR             reduce using rule 118 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    IF              reduce using rule 118 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    $end            reduce using rule 118 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)
    LLAVE_D         reduce using rule 118 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN valor LLAVE_D .)


state 632

    (120) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .

    DEF             reduce using rule 120 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    VARIABLE        reduce using rule 120 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    PRINTLN         reduce using rule 120 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    PRINT           reduce using rule 120 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    READLINE        reduce using rule 120 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    VAR             reduce using rule 120 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    VAL             reduce using rule 120 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    WHILE           reduce using rule 120 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    FOR             reduce using rule 120 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    IF              reduce using rule 120 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    $end            reduce using rule 120 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    LLAVE_D         reduce using rule 120 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)


state 633

    (121) funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .

    DEF             reduce using rule 121 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    VARIABLE        reduce using rule 121 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    PRINTLN         reduce using rule 121 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    PRINT           reduce using rule 121 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    READLINE        reduce using rule 121 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    VAR             reduce using rule 121 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    VAL             reduce using rule 121 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    WHILE           reduce using rule 121 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    FOR             reduce using rule 121 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    IF              reduce using rule 121 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    $end            reduce using rule 121 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)
    LLAVE_D         reduce using rule 121 (funcion -> DEF VARIABLE parametro dectipo IGUAL LLAVE_I contenido RETURN aritmetica LLAVE_D .)


state 634

    (127) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .

    DEF             reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    VARIABLE        reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    PRINTLN         reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    PRINT           reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    READLINE        reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    VAR             reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    VAL             reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    WHILE           reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    FOR             reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    IF              reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    $end            reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)
    LLAVE_D         reduce using rule 127 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN VARIABLE LLAVE_D .)


state 635

    (126) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .

    DEF             reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    VARIABLE        reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    PRINTLN         reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    PRINT           reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    READLINE        reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    VAR             reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    VAL             reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    WHILE           reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    FOR             reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    IF              reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    $end            reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)
    LLAVE_D         reduce using rule 126 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN tuple LLAVE_D .)


state 636

    (128) funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .

    DEF             reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    VARIABLE        reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    PRINTLN         reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    PRINT           reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    READLINE        reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    VAR             reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    VAL             reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    WHILE           reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    FOR             reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    IF              reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    $end            reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)
    LLAVE_D         reduce using rule 128 (funcion -> DEF VARIABLE parametro dectipoTupla IGUAL LLAVE_I contenido RETURN returnfun LLAVE_D .)


state 637

    (156) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS . CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    CORCHETE_I      shift and go to state 668


state 638

    (264) arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I . valoresInt PAR_D
    (266) valoresInt -> . INT
    (267) valoresInt -> . valoresInt COMA INT

    INT             shift and go to state 670

    valoresInt                     shift and go to state 669

state 639

    (265) arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I . valoresDouble PAR_D
    (268) valoresDouble -> . DOUBLE
    (269) valoresDouble -> . valoresDouble COMA DOUBLE

    DOUBLE          shift and go to state 672

    valoresDouble                  shift and go to state 671

state 640

    (272) dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I . STRING COMA INT PAR_D

    STRING          shift and go to state 673


state 641

    (273) dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I . STRING COMA LONG PAR_D

    STRING          shift and go to state 674


state 642

    (274) dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I . STRING COMA DOUBLE PAR_D

    STRING          shift and go to state 675


state 643

    (275) dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I . STRING COMA FLOAT PAR_D

    STRING          shift and go to state 676


state 644

    (288) dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I . INT COMA STRING PAR_D

    INT             shift and go to state 677


state 645

    (289) dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I . INT COMA LONG PAR_D

    INT             shift and go to state 678


state 646

    (290) dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I . INT COMA DOUBLE PAR_D

    INT             shift and go to state 679


state 647

    (291) dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I . INT COMA FLOAT PAR_D

    INT             shift and go to state 680


state 648

    (284) dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I . LONG COMA STRING PAR_D

    LONG            shift and go to state 681


state 649

    (285) dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I . LONG COMA INT PAR_D

    LONG            shift and go to state 682


state 650

    (286) dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I . LONG COMA DOUBLE PAR_D

    LONG            shift and go to state 683


state 651

    (287) dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I . LONG COMA FLOAT PAR_D

    LONG            shift and go to state 684


state 652

    (280) dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I . DOUBLE COMA STRING PAR_D

    DOUBLE          shift and go to state 685


state 653

    (281) dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I . DOUBLE COMA LONG PAR_D

    DOUBLE          shift and go to state 686


state 654

    (282) dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I . DOUBLE COMA FLOAT PAR_D

    DOUBLE          shift and go to state 687


state 655

    (283) dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I . DOUBLE COMA INT PAR_D

    DOUBLE          shift and go to state 688


state 656

    (276) dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I . FLOAT COMA STRING PAR_D

    FLOAT           shift and go to state 689


state 657

    (277) dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I . FLOAT COMA LONG PAR_D

    FLOAT           shift and go to state 690


state 658

    (278) dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I . FLOAT COMA DOUBLE PAR_D

    FLOAT           shift and go to state 691


state 659

    (279) dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I . FLOAT COMA INT PAR_D

    FLOAT           shift and go to state 692


state 660

    (158) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS . CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D

    CORCHETE_I      shift and go to state 693


state 661

    (163) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I . valores PAR_D
    (164) valores -> . valor
    (165) valores -> . valor COMA valores
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valores                        shift and go to state 694
    valor                          shift and go to state 64
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 662

    (162) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS . PAR_I valores PAR_D

    PAR_I           shift and go to state 695


state 663

    (170) for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .

    DEF             reduce using rule 170 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 170 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 170 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 170 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 170 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 170 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 170 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 170 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 170 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 170 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 170 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 170 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 170 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 170 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 170 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 170 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 170 (for -> FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D .)


state 664

    (174) for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 696
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 665

    (175) for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I . contenido LLAVE_D
    (20) contenido -> . asignacion
    (21) contenido -> . reasignacion
    (22) contenido -> . funcall
    (23) contenido -> . impresion
    (24) contenido -> . entrada
    (25) contenido -> . while
    (26) contenido -> . for
    (27) contenido -> . match
    (28) contenido -> . if
    (29) contenido -> . aritmetica
    (30) contenido -> . asignacion contenido
    (31) contenido -> . reasignacion contenido
    (32) contenido -> . funcall contenido
    (33) contenido -> . impresion contenido
    (34) contenido -> . entrada contenido
    (35) contenido -> . while contenido
    (36) contenido -> . for contenido
    (37) contenido -> . if contenido
    (38) contenido -> . match contenido
    (39) contenido -> . aritmetica contenido
    (45) asignacion -> . VAR VARIABLE IGUAL VARIABLE
    (46) asignacion -> . VAL VARIABLE IGUAL VARIABLE
    (47) asignacion -> . VAR VARIABLE IGUAL aritmetica
    (48) asignacion -> . VAL VARIABLE IGUAL aritmetica
    (49) asignacion -> . VAR VARIABLE IGUAL returnfun
    (50) asignacion -> . VAL VARIABLE IGUAL returnfun
    (51) asignacion -> . asignacionLong
    (52) asignacion -> . asignacionInt
    (53) asignacion -> . asignacionFloat
    (54) asignacion -> . asignacionDouble
    (55) asignacion -> . asignacionString
    (56) asignacion -> . asignacionChar
    (57) asignacion -> . asignacionBoolean
    (58) asignacion -> . array
    (59) asignacion -> . list
    (167) asignacion -> . VAR VARIABLE IGUAL tuple
    (168) asignacion -> . VAL VARIABLE IGUAL tuple
    (270) asignacion -> . VAR VARIABLE DOBLE_PUNTO dectupla
    (271) asignacion -> . VAL VARIABLE DOBLE_PUNTO dectupla
    (84) reasignacion -> . VARIABLE IGUAL valor
    (85) reasignacion -> . VARIABLE IGUAL returnfun
    (86) reasignacion -> . VARIABLE IGUAL aritmetica
    (87) reasignacion -> . VARIABLE PAR_I INT PAR_D IGUAL valor
    (140) funcall -> . VARIABLE varparen
    (135) impresion -> . PRINTLN PAR_I valorI PAR_D
    (136) impresion -> . PRINT PAR_I valorI PAR_D
    (139) entrada -> . READLINE PAR_I PAR_D
    (169) while -> . WHILE PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (170) for -> . FOR PAR_I VAR VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (171) for -> . FOR PAR_I VARIABLE ITERATOR VARIABLE PAR_D LLAVE_I contenido LLAVE_D
    (172) for -> . FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (173) for -> . FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (174) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D
    (175) for -> . FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D
    (176) match -> . VARIABLE MATCH LLAVE_I cases LLAVE_D
    (215) if -> . IF PAR_I condicional PAR_D LLAVE_I contenido LLAVE_D
    (216) if -> . if elseif
    (217) if -> . if else
    (253) aritmetica -> . numeros aritmeticos numeros
    (254) aritmetica -> . VARIABLE aritmeticos numeros
    (255) aritmetica -> . numeros aritmeticos VARIABLE
    (256) aritmetica -> . VARIABLE aritmeticos VARIABLE
    (257) aritmetica -> . aritmetica aritmeticos numeros
    (258) aritmetica -> . aritmetica aritmeticos VARIABLE
    (60) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (61) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL VARIABLE
    (298) asignacionLong -> . VAR VARIABLE IGUAL longvalues
    (299) asignacionLong -> . VAR VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (300) asignacionLong -> . VAL VARIABLE IGUAL longvalues
    (301) asignacionLong -> . VAL VARIABLE DOBLE_PUNTO LONGCLASS IGUAL longvalues
    (292) asignacionInt -> . VAR VARIABLE IGUAL intvalues
    (293) asignacionInt -> . VAR VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (294) asignacionInt -> . VAL VARIABLE IGUAL intvalues
    (295) asignacionInt -> . VAL VARIABLE DOBLE_PUNTO INTCLASS IGUAL intvalues
    (62) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (63) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL VARIABLE
    (305) asignacionFloat -> . VAR VARIABLE IGUAL floatvalues
    (306) asignacionFloat -> . VAR VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (307) asignacionFloat -> . VAL VARIABLE IGUAL floatvalues
    (308) asignacionFloat -> . VAL VARIABLE DOBLE_PUNTO FLOATCLASS IGUAL floatvalues
    (64) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (65) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL VARIABLE
    (312) asignacionDouble -> . VAR VARIABLE IGUAL doublevalues
    (313) asignacionDouble -> . VAR VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (314) asignacionDouble -> . VAL VARIABLE IGUAL doublevalues
    (315) asignacionDouble -> . VAL VARIABLE DOBLE_PUNTO DOUBLECLASS IGUAL doublevalues
    (66) asignacionString -> . VAR VARIABLE IGUAL STRING
    (67) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (68) asignacionString -> . VAL VARIABLE IGUAL STRING
    (69) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL STRING
    (70) asignacionString -> . VAR VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (71) asignacionString -> . VAL VARIABLE DOBLE_PUNTO STRINGCLASS IGUAL VARIABLE
    (72) asignacionChar -> . VAR VARIABLE IGUAL CHAR
    (73) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (74) asignacionChar -> . VAL VARIABLE IGUAL CHAR
    (75) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL CHAR
    (76) asignacionChar -> . VAR VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (77) asignacionChar -> . VAL VARIABLE DOBLE_PUNTO CHARCLASS IGUAL VARIABLE
    (78) asignacionBoolean -> . VAR VARIABLE IGUAL booleanos
    (79) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (80) asignacionBoolean -> . VAL VARIABLE IGUAL booleanos
    (81) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL booleanos
    (82) asignacionBoolean -> . VAR VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (83) asignacionBoolean -> . VAL VARIABLE DOBLE_PUNTO BOOLCLASS IGUAL VARIABLE
    (155) array -> . VAR VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (156) array -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (157) array -> . VAL VARIABLE IGUAL ARRAYCLASS PAR_I valores PAR_D
    (158) array -> . VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D
    (159) array -> . arrayInt
    (160) array -> . arrayDouble
    (161) list -> . VAL VARIABLE IGUAL LISTCLASS PAR_I valores PAR_D
    (162) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D
    (163) list -> . VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (264) arrayInt -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D
    (265) arrayDouble -> . VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    VARIABLE        shift and go to state 142
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    READLINE        shift and go to state 18
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    IF              shift and go to state 32
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73

    contenido                      shift and go to state 697
    asignacion                     shift and go to state 132
    reasignacion                   shift and go to state 133
    funcall                        shift and go to state 134
    impresion                      shift and go to state 135
    entrada                        shift and go to state 136
    while                          shift and go to state 137
    for                            shift and go to state 138
    match                          shift and go to state 139
    if                             shift and go to state 140
    aritmetica                     shift and go to state 141
    asignacionLong                 shift and go to state 21
    asignacionInt                  shift and go to state 22
    asignacionFloat                shift and go to state 23
    asignacionDouble               shift and go to state 24
    asignacionString               shift and go to state 25
    asignacionChar                 shift and go to state 26
    asignacionBoolean              shift and go to state 27
    array                          shift and go to state 28
    list                           shift and go to state 29
    numeros                        shift and go to state 143
    arrayInt                       shift and go to state 33
    arrayDouble                    shift and go to state 34

state 666

    (172) for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 698


state 667

    (173) for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 699


state 668

    (156) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I . tipo CORCHETE_D PAR_I INT PAR_D
    (88) tipo -> . CHARCLASS
    (89) tipo -> . STRINGCLASS
    (90) tipo -> . BOOLCLASS
    (91) tipo -> . INTCLASS
    (92) tipo -> . LONGCLASS
    (93) tipo -> . DOUBLECLASS
    (94) tipo -> . FLOATCLASS
    (95) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (96) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    CHARCLASS       shift and go to state 296
    STRINGCLASS     shift and go to state 297
    BOOLCLASS       shift and go to state 298
    INTCLASS        shift and go to state 299
    LONGCLASS       shift and go to state 300
    DOUBLECLASS     shift and go to state 301
    FLOATCLASS      shift and go to state 302
    ARRAYCLASS      shift and go to state 303
    LISTCLASS       shift and go to state 304

    tipo                           shift and go to state 700

state 669

    (264) arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt . PAR_D
    (267) valoresInt -> valoresInt . COMA INT

    PAR_D           shift and go to state 701
    COMA            shift and go to state 702


state 670

    (266) valoresInt -> INT .

    PAR_D           reduce using rule 266 (valoresInt -> INT .)
    COMA            reduce using rule 266 (valoresInt -> INT .)


state 671

    (265) arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble . PAR_D
    (269) valoresDouble -> valoresDouble . COMA DOUBLE

    PAR_D           shift and go to state 703
    COMA            shift and go to state 704


state 672

    (268) valoresDouble -> DOUBLE .

    PAR_D           reduce using rule 268 (valoresDouble -> DOUBLE .)
    COMA            reduce using rule 268 (valoresDouble -> DOUBLE .)


state 673

    (272) dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING . COMA INT PAR_D

    COMA            shift and go to state 705


state 674

    (273) dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING . COMA LONG PAR_D

    COMA            shift and go to state 706


state 675

    (274) dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING . COMA DOUBLE PAR_D

    COMA            shift and go to state 707


state 676

    (275) dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING . COMA FLOAT PAR_D

    COMA            shift and go to state 708


state 677

    (288) dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT . COMA STRING PAR_D

    COMA            shift and go to state 709


state 678

    (289) dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT . COMA LONG PAR_D

    COMA            shift and go to state 710


state 679

    (290) dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT . COMA DOUBLE PAR_D

    COMA            shift and go to state 711


state 680

    (291) dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT . COMA FLOAT PAR_D

    COMA            shift and go to state 712


state 681

    (284) dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG . COMA STRING PAR_D

    COMA            shift and go to state 713


state 682

    (285) dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG . COMA INT PAR_D

    COMA            shift and go to state 714


state 683

    (286) dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG . COMA DOUBLE PAR_D

    COMA            shift and go to state 715


state 684

    (287) dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG . COMA FLOAT PAR_D

    COMA            shift and go to state 716


state 685

    (280) dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE . COMA STRING PAR_D

    COMA            shift and go to state 717


state 686

    (281) dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE . COMA LONG PAR_D

    COMA            shift and go to state 718


state 687

    (282) dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE . COMA FLOAT PAR_D

    COMA            shift and go to state 719


state 688

    (283) dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE . COMA INT PAR_D

    COMA            shift and go to state 720


state 689

    (276) dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT . COMA STRING PAR_D

    COMA            shift and go to state 721


state 690

    (277) dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT . COMA LONG PAR_D

    COMA            shift and go to state 722


state 691

    (278) dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT . COMA DOUBLE PAR_D

    COMA            shift and go to state 723


state 692

    (279) dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT . COMA INT PAR_D

    COMA            shift and go to state 724


state 693

    (158) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I . tipo CORCHETE_D PAR_I INT PAR_D
    (88) tipo -> . CHARCLASS
    (89) tipo -> . STRINGCLASS
    (90) tipo -> . BOOLCLASS
    (91) tipo -> . INTCLASS
    (92) tipo -> . LONGCLASS
    (93) tipo -> . DOUBLECLASS
    (94) tipo -> . FLOATCLASS
    (95) tipo -> . ARRAYCLASS CORCHETE_I tipo CORCHETE_D
    (96) tipo -> . LISTCLASS CORCHETE_I tipo CORCHETE_D

    CHARCLASS       shift and go to state 296
    STRINGCLASS     shift and go to state 297
    BOOLCLASS       shift and go to state 298
    INTCLASS        shift and go to state 299
    LONGCLASS       shift and go to state 300
    DOUBLECLASS     shift and go to state 301
    FLOATCLASS      shift and go to state 302
    ARRAYCLASS      shift and go to state 303
    LISTCLASS       shift and go to state 304

    tipo                           shift and go to state 725

state 694

    (163) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores . PAR_D

    PAR_D           shift and go to state 726


state 695

    (162) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I . valores PAR_D
    (164) valores -> . valor
    (165) valores -> . valor COMA valores
    (97) valor -> . STRING
    (98) valor -> . CHAR
    (99) valor -> . VARIABLE
    (100) valor -> . numeros
    (101) valor -> . booleanos
    (102) valor -> . VARIABLE PAR_I VARIABLE PAR_D
    (103) valor -> . VARIABLE PAR_I INT PAR_D
    (106) numeros -> . INT
    (107) numeros -> . LONG
    (108) numeros -> . FLOAT
    (109) numeros -> . DOUBLE
    (104) booleanos -> . TRUE
    (105) booleanos -> . FLASE

    STRING          shift and go to state 65
    CHAR            shift and go to state 66
    VARIABLE        shift and go to state 67
    INT             shift and go to state 70
    LONG            shift and go to state 71
    FLOAT           shift and go to state 72
    DOUBLE          shift and go to state 73
    TRUE            shift and go to state 74
    FLASE           shift and go to state 75

    valores                        shift and go to state 727
    valor                          shift and go to state 64
    numeros                        shift and go to state 68
    booleanos                      shift and go to state 69

state 696

    (174) for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 728


state 697

    (175) for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido . LLAVE_D

    LLAVE_D         shift and go to state 729


state 698

    (172) for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .

    DEF             reduce using rule 172 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 172 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 172 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 172 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 172 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 172 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 172 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 172 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 172 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 172 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 172 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 172 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 172 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 172 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 172 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 172 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 172 (for -> FOR PAR_I VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)


state 699

    (173) for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .

    DEF             reduce using rule 173 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 173 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 173 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 173 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 173 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 173 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 173 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 173 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 173 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 173 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 173 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 173 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 173 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 173 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 173 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 173 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 173 (for -> FOR PAR_I VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)


state 700

    (156) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo . CORCHETE_D PAR_I INT PAR_D

    CORCHETE_D      shift and go to state 730


state 701

    (264) arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .

    DEF             reduce using rule 264 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    VARIABLE        reduce using rule 264 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    PRINTLN         reduce using rule 264 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    PRINT           reduce using rule 264 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    READLINE        reduce using rule 264 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    VAR             reduce using rule 264 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    VAL             reduce using rule 264 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    WHILE           reduce using rule 264 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    FOR             reduce using rule 264 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    IF              reduce using rule 264 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    $end            reduce using rule 264 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    LLAVE_D         reduce using rule 264 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    INT             reduce using rule 264 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    LONG            reduce using rule 264 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    FLOAT           reduce using rule 264 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    DOUBLE          reduce using rule 264 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    RETURN          reduce using rule 264 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)
    CASE            reduce using rule 264 (arrayInt -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I INTCLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresInt PAR_D .)


state 702

    (267) valoresInt -> valoresInt COMA . INT

    INT             shift and go to state 731


state 703

    (265) arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .

    DEF             reduce using rule 265 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    VARIABLE        reduce using rule 265 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    PRINTLN         reduce using rule 265 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    PRINT           reduce using rule 265 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    READLINE        reduce using rule 265 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    VAR             reduce using rule 265 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    VAL             reduce using rule 265 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    WHILE           reduce using rule 265 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    FOR             reduce using rule 265 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    IF              reduce using rule 265 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    $end            reduce using rule 265 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    LLAVE_D         reduce using rule 265 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    INT             reduce using rule 265 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    LONG            reduce using rule 265 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    FLOAT           reduce using rule 265 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    DOUBLE          reduce using rule 265 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    RETURN          reduce using rule 265 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)
    CASE            reduce using rule 265 (arrayDouble -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I DOUBLECLASS CORCHETE_D IGUAL ARRAYCLASS PAR_I valoresDouble PAR_D .)


state 704

    (269) valoresDouble -> valoresDouble COMA . DOUBLE

    DOUBLE          shift and go to state 732


state 705

    (272) dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA . INT PAR_D

    INT             shift and go to state 733


state 706

    (273) dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA . LONG PAR_D

    LONG            shift and go to state 734


state 707

    (274) dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA . DOUBLE PAR_D

    DOUBLE          shift and go to state 735


state 708

    (275) dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA . FLOAT PAR_D

    FLOAT           shift and go to state 736


state 709

    (288) dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA . STRING PAR_D

    STRING          shift and go to state 737


state 710

    (289) dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA . LONG PAR_D

    LONG            shift and go to state 738


state 711

    (290) dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA . DOUBLE PAR_D

    DOUBLE          shift and go to state 739


state 712

    (291) dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA . FLOAT PAR_D

    FLOAT           shift and go to state 740


state 713

    (284) dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA . STRING PAR_D

    STRING          shift and go to state 741


state 714

    (285) dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA . INT PAR_D

    INT             shift and go to state 742


state 715

    (286) dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA . DOUBLE PAR_D

    DOUBLE          shift and go to state 743


state 716

    (287) dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA . FLOAT PAR_D

    FLOAT           shift and go to state 744


state 717

    (280) dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA . STRING PAR_D

    STRING          shift and go to state 745


state 718

    (281) dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA . LONG PAR_D

    LONG            shift and go to state 746


state 719

    (282) dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA . FLOAT PAR_D

    FLOAT           shift and go to state 747


state 720

    (283) dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA . INT PAR_D

    INT             shift and go to state 748


state 721

    (276) dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA . STRING PAR_D

    STRING          shift and go to state 749


state 722

    (277) dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA . LONG PAR_D

    LONG            shift and go to state 750


state 723

    (278) dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA . DOUBLE PAR_D

    DOUBLE          shift and go to state 751


state 724

    (279) dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA . INT PAR_D

    INT             shift and go to state 752


state 725

    (158) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo . CORCHETE_D PAR_I INT PAR_D

    CORCHETE_D      shift and go to state 753


state 726

    (163) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .

    DEF             reduce using rule 163 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    VARIABLE        reduce using rule 163 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    PRINTLN         reduce using rule 163 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    PRINT           reduce using rule 163 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    READLINE        reduce using rule 163 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    VAR             reduce using rule 163 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    VAL             reduce using rule 163 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    WHILE           reduce using rule 163 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    FOR             reduce using rule 163 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    IF              reduce using rule 163 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    $end            reduce using rule 163 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    LLAVE_D         reduce using rule 163 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    INT             reduce using rule 163 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    LONG            reduce using rule 163 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    FLOAT           reduce using rule 163 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    DOUBLE          reduce using rule 163 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    RETURN          reduce using rule 163 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)
    CASE            reduce using rule 163 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL LISTCLASS PAR_I valores PAR_D .)


state 727

    (162) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores . PAR_D

    PAR_D           shift and go to state 754


state 728

    (174) for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .

    DEF             reduce using rule 174 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 174 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 174 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 174 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 174 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 174 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 174 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 174 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 174 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 174 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 174 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 174 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 174 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 174 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 174 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 174 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 174 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT TO INT PAR_D LLAVE_I contenido LLAVE_D .)


state 729

    (175) for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .

    DEF             reduce using rule 175 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    VARIABLE        reduce using rule 175 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    PRINTLN         reduce using rule 175 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    PRINT           reduce using rule 175 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    READLINE        reduce using rule 175 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    VAR             reduce using rule 175 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    VAL             reduce using rule 175 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    WHILE           reduce using rule 175 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    FOR             reduce using rule 175 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    IF              reduce using rule 175 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    $end            reduce using rule 175 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    LLAVE_D         reduce using rule 175 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    INT             reduce using rule 175 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    LONG            reduce using rule 175 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    FLOAT           reduce using rule 175 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    DOUBLE          reduce using rule 175 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)
    RETURN          reduce using rule 175 (for -> FOR PAR_I VAR VARIABLE ITERATOR INT UNTIL INT PAR_D LLAVE_I contenido LLAVE_D .)


state 730

    (156) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D . PAR_I INT PAR_D

    PAR_I           shift and go to state 755


state 731

    (267) valoresInt -> valoresInt COMA INT .

    PAR_D           reduce using rule 267 (valoresInt -> valoresInt COMA INT .)
    COMA            reduce using rule 267 (valoresInt -> valoresInt COMA INT .)


state 732

    (269) valoresDouble -> valoresDouble COMA DOUBLE .

    PAR_D           reduce using rule 269 (valoresDouble -> valoresDouble COMA DOUBLE .)
    COMA            reduce using rule 269 (valoresDouble -> valoresDouble COMA DOUBLE .)


state 733

    (272) dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT . PAR_D

    PAR_D           shift and go to state 756


state 734

    (273) dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG . PAR_D

    PAR_D           shift and go to state 757


state 735

    (274) dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE . PAR_D

    PAR_D           shift and go to state 758


state 736

    (275) dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT . PAR_D

    PAR_D           shift and go to state 759


state 737

    (288) dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING . PAR_D

    PAR_D           shift and go to state 760


state 738

    (289) dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG . PAR_D

    PAR_D           shift and go to state 761


state 739

    (290) dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE . PAR_D

    PAR_D           shift and go to state 762


state 740

    (291) dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT . PAR_D

    PAR_D           shift and go to state 763


state 741

    (284) dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING . PAR_D

    PAR_D           shift and go to state 764


state 742

    (285) dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT . PAR_D

    PAR_D           shift and go to state 765


state 743

    (286) dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE . PAR_D

    PAR_D           shift and go to state 766


state 744

    (287) dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT . PAR_D

    PAR_D           shift and go to state 767


state 745

    (280) dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING . PAR_D

    PAR_D           shift and go to state 768


state 746

    (281) dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG . PAR_D

    PAR_D           shift and go to state 769


state 747

    (282) dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT . PAR_D

    PAR_D           shift and go to state 770


state 748

    (283) dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT . PAR_D

    PAR_D           shift and go to state 771


state 749

    (276) dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING . PAR_D

    PAR_D           shift and go to state 772


state 750

    (277) dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG . PAR_D

    PAR_D           shift and go to state 773


state 751

    (278) dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE . PAR_D

    PAR_D           shift and go to state 774


state 752

    (279) dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT . PAR_D

    PAR_D           shift and go to state 775


state 753

    (158) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D . PAR_I INT PAR_D

    PAR_I           shift and go to state 776


state 754

    (162) list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .

    DEF             reduce using rule 162 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    VARIABLE        reduce using rule 162 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    PRINTLN         reduce using rule 162 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    PRINT           reduce using rule 162 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    READLINE        reduce using rule 162 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    VAR             reduce using rule 162 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    VAL             reduce using rule 162 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    WHILE           reduce using rule 162 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    FOR             reduce using rule 162 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    IF              reduce using rule 162 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    $end            reduce using rule 162 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    LLAVE_D         reduce using rule 162 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    INT             reduce using rule 162 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    LONG            reduce using rule 162 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    FLOAT           reduce using rule 162 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    DOUBLE          reduce using rule 162 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    RETURN          reduce using rule 162 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)
    CASE            reduce using rule 162 (list -> VAL VARIABLE DOBLE_PUNTO LISTCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW LISTCLASS PAR_I valores PAR_D .)


state 755

    (156) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I . INT PAR_D

    INT             shift and go to state 777


state 756

    (272) dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .

    DEF             reduce using rule 272 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    VARIABLE        reduce using rule 272 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    PRINTLN         reduce using rule 272 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    PRINT           reduce using rule 272 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    READLINE        reduce using rule 272 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    VAR             reduce using rule 272 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    VAL             reduce using rule 272 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    WHILE           reduce using rule 272 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    FOR             reduce using rule 272 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    IF              reduce using rule 272 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    $end            reduce using rule 272 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    LLAVE_D         reduce using rule 272 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    INT             reduce using rule 272 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    LONG            reduce using rule 272 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    FLOAT           reduce using rule 272 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    DOUBLE          reduce using rule 272 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    RETURN          reduce using rule 272 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)
    CASE            reduce using rule 272 (dectupla -> PAR_I STRINGCLASS COMA INTCLASS PAR_D IGUAL PAR_I STRING COMA INT PAR_D .)


state 757

    (273) dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .

    DEF             reduce using rule 273 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    VARIABLE        reduce using rule 273 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    PRINTLN         reduce using rule 273 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    PRINT           reduce using rule 273 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    READLINE        reduce using rule 273 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    VAR             reduce using rule 273 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    VAL             reduce using rule 273 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    WHILE           reduce using rule 273 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    FOR             reduce using rule 273 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    IF              reduce using rule 273 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    $end            reduce using rule 273 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    LLAVE_D         reduce using rule 273 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    INT             reduce using rule 273 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    LONG            reduce using rule 273 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    FLOAT           reduce using rule 273 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    DOUBLE          reduce using rule 273 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    RETURN          reduce using rule 273 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)
    CASE            reduce using rule 273 (dectupla -> PAR_I STRINGCLASS COMA LONGCLASS PAR_D IGUAL PAR_I STRING COMA LONG PAR_D .)


state 758

    (274) dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .

    DEF             reduce using rule 274 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    VARIABLE        reduce using rule 274 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    PRINTLN         reduce using rule 274 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    PRINT           reduce using rule 274 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    READLINE        reduce using rule 274 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    VAR             reduce using rule 274 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    VAL             reduce using rule 274 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    WHILE           reduce using rule 274 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    FOR             reduce using rule 274 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    IF              reduce using rule 274 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    $end            reduce using rule 274 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    LLAVE_D         reduce using rule 274 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    INT             reduce using rule 274 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    LONG            reduce using rule 274 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    FLOAT           reduce using rule 274 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    DOUBLE          reduce using rule 274 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    RETURN          reduce using rule 274 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)
    CASE            reduce using rule 274 (dectupla -> PAR_I STRINGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I STRING COMA DOUBLE PAR_D .)


state 759

    (275) dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .

    DEF             reduce using rule 275 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    VARIABLE        reduce using rule 275 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    PRINTLN         reduce using rule 275 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    PRINT           reduce using rule 275 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    READLINE        reduce using rule 275 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    VAR             reduce using rule 275 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    VAL             reduce using rule 275 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    WHILE           reduce using rule 275 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    FOR             reduce using rule 275 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    IF              reduce using rule 275 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    $end            reduce using rule 275 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    LLAVE_D         reduce using rule 275 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    INT             reduce using rule 275 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    LONG            reduce using rule 275 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    FLOAT           reduce using rule 275 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    DOUBLE          reduce using rule 275 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    RETURN          reduce using rule 275 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)
    CASE            reduce using rule 275 (dectupla -> PAR_I STRINGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I STRING COMA FLOAT PAR_D .)


state 760

    (288) dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .

    DEF             reduce using rule 288 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    VARIABLE        reduce using rule 288 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    PRINTLN         reduce using rule 288 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    PRINT           reduce using rule 288 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    READLINE        reduce using rule 288 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    VAR             reduce using rule 288 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    VAL             reduce using rule 288 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    WHILE           reduce using rule 288 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    FOR             reduce using rule 288 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    IF              reduce using rule 288 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    $end            reduce using rule 288 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    LLAVE_D         reduce using rule 288 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    INT             reduce using rule 288 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    LONG            reduce using rule 288 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    FLOAT           reduce using rule 288 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    DOUBLE          reduce using rule 288 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    RETURN          reduce using rule 288 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)
    CASE            reduce using rule 288 (dectupla -> PAR_I INTCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I INT COMA STRING PAR_D .)


state 761

    (289) dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .

    DEF             reduce using rule 289 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    VARIABLE        reduce using rule 289 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    PRINTLN         reduce using rule 289 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    PRINT           reduce using rule 289 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    READLINE        reduce using rule 289 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    VAR             reduce using rule 289 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    VAL             reduce using rule 289 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    WHILE           reduce using rule 289 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    FOR             reduce using rule 289 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    IF              reduce using rule 289 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    $end            reduce using rule 289 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    LLAVE_D         reduce using rule 289 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    INT             reduce using rule 289 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    LONG            reduce using rule 289 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    FLOAT           reduce using rule 289 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    DOUBLE          reduce using rule 289 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    RETURN          reduce using rule 289 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)
    CASE            reduce using rule 289 (dectupla -> PAR_I INTCLASS COMA LONGCLASS PAR_D IGUAL PAR_I INT COMA LONG PAR_D .)


state 762

    (290) dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .

    DEF             reduce using rule 290 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    VARIABLE        reduce using rule 290 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    PRINTLN         reduce using rule 290 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    PRINT           reduce using rule 290 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    READLINE        reduce using rule 290 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    VAR             reduce using rule 290 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    VAL             reduce using rule 290 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    WHILE           reduce using rule 290 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    FOR             reduce using rule 290 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    IF              reduce using rule 290 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    $end            reduce using rule 290 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    LLAVE_D         reduce using rule 290 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    INT             reduce using rule 290 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    LONG            reduce using rule 290 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    FLOAT           reduce using rule 290 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    DOUBLE          reduce using rule 290 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    RETURN          reduce using rule 290 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)
    CASE            reduce using rule 290 (dectupla -> PAR_I INTCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I INT COMA DOUBLE PAR_D .)


state 763

    (291) dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .

    DEF             reduce using rule 291 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    VARIABLE        reduce using rule 291 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    PRINTLN         reduce using rule 291 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    PRINT           reduce using rule 291 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    READLINE        reduce using rule 291 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    VAR             reduce using rule 291 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    VAL             reduce using rule 291 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    WHILE           reduce using rule 291 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    FOR             reduce using rule 291 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    IF              reduce using rule 291 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    $end            reduce using rule 291 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    LLAVE_D         reduce using rule 291 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    INT             reduce using rule 291 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    LONG            reduce using rule 291 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    FLOAT           reduce using rule 291 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    DOUBLE          reduce using rule 291 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    RETURN          reduce using rule 291 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)
    CASE            reduce using rule 291 (dectupla -> PAR_I INTCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I INT COMA FLOAT PAR_D .)


state 764

    (284) dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .

    DEF             reduce using rule 284 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    VARIABLE        reduce using rule 284 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    PRINTLN         reduce using rule 284 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    PRINT           reduce using rule 284 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    READLINE        reduce using rule 284 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    VAR             reduce using rule 284 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    VAL             reduce using rule 284 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    WHILE           reduce using rule 284 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    FOR             reduce using rule 284 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    IF              reduce using rule 284 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    $end            reduce using rule 284 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    LLAVE_D         reduce using rule 284 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    INT             reduce using rule 284 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    LONG            reduce using rule 284 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    FLOAT           reduce using rule 284 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    DOUBLE          reduce using rule 284 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    RETURN          reduce using rule 284 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)
    CASE            reduce using rule 284 (dectupla -> PAR_I LONGCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I LONG COMA STRING PAR_D .)


state 765

    (285) dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .

    DEF             reduce using rule 285 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    VARIABLE        reduce using rule 285 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    PRINTLN         reduce using rule 285 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    PRINT           reduce using rule 285 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    READLINE        reduce using rule 285 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    VAR             reduce using rule 285 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    VAL             reduce using rule 285 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    WHILE           reduce using rule 285 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    FOR             reduce using rule 285 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    IF              reduce using rule 285 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    $end            reduce using rule 285 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    LLAVE_D         reduce using rule 285 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    INT             reduce using rule 285 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    LONG            reduce using rule 285 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    FLOAT           reduce using rule 285 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    DOUBLE          reduce using rule 285 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    RETURN          reduce using rule 285 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)
    CASE            reduce using rule 285 (dectupla -> PAR_I LONGCLASS COMA INTCLASS PAR_D IGUAL PAR_I LONG COMA INT PAR_D .)


state 766

    (286) dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .

    DEF             reduce using rule 286 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    VARIABLE        reduce using rule 286 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    PRINTLN         reduce using rule 286 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    PRINT           reduce using rule 286 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    READLINE        reduce using rule 286 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    VAR             reduce using rule 286 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    VAL             reduce using rule 286 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    WHILE           reduce using rule 286 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    FOR             reduce using rule 286 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    IF              reduce using rule 286 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    $end            reduce using rule 286 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    LLAVE_D         reduce using rule 286 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    INT             reduce using rule 286 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    LONG            reduce using rule 286 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    FLOAT           reduce using rule 286 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    DOUBLE          reduce using rule 286 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    RETURN          reduce using rule 286 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)
    CASE            reduce using rule 286 (dectupla -> PAR_I LONGCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I LONG COMA DOUBLE PAR_D .)


state 767

    (287) dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .

    DEF             reduce using rule 287 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    VARIABLE        reduce using rule 287 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    PRINTLN         reduce using rule 287 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    PRINT           reduce using rule 287 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    READLINE        reduce using rule 287 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    VAR             reduce using rule 287 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    VAL             reduce using rule 287 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    WHILE           reduce using rule 287 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    FOR             reduce using rule 287 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    IF              reduce using rule 287 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    $end            reduce using rule 287 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    LLAVE_D         reduce using rule 287 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    INT             reduce using rule 287 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    LONG            reduce using rule 287 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    FLOAT           reduce using rule 287 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    DOUBLE          reduce using rule 287 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    RETURN          reduce using rule 287 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)
    CASE            reduce using rule 287 (dectupla -> PAR_I LONGCLASS COMA FLOATCLASS PAR_D IGUAL PAR_I LONG COMA FLOAT PAR_D .)


state 768

    (280) dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .

    DEF             reduce using rule 280 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    VARIABLE        reduce using rule 280 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    PRINTLN         reduce using rule 280 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    PRINT           reduce using rule 280 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    READLINE        reduce using rule 280 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    VAR             reduce using rule 280 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    VAL             reduce using rule 280 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    WHILE           reduce using rule 280 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    FOR             reduce using rule 280 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    IF              reduce using rule 280 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    $end            reduce using rule 280 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    LLAVE_D         reduce using rule 280 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    INT             reduce using rule 280 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    LONG            reduce using rule 280 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    FLOAT           reduce using rule 280 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    DOUBLE          reduce using rule 280 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    RETURN          reduce using rule 280 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)
    CASE            reduce using rule 280 (dectupla -> PAR_I DOUBLECLASS COMA STRINGCLASS PAR_D IGUAL PAR_I DOUBLE COMA STRING PAR_D .)


state 769

    (281) dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .

    DEF             reduce using rule 281 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    VARIABLE        reduce using rule 281 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    PRINTLN         reduce using rule 281 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    PRINT           reduce using rule 281 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    READLINE        reduce using rule 281 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    VAR             reduce using rule 281 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    VAL             reduce using rule 281 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    WHILE           reduce using rule 281 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    FOR             reduce using rule 281 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    IF              reduce using rule 281 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    $end            reduce using rule 281 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    LLAVE_D         reduce using rule 281 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    INT             reduce using rule 281 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    LONG            reduce using rule 281 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    FLOAT           reduce using rule 281 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    DOUBLE          reduce using rule 281 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    RETURN          reduce using rule 281 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)
    CASE            reduce using rule 281 (dectupla -> PAR_I DOUBLECLASS COMA LONGCLASS PAR_D IGUAL PAR_I DOUBLE COMA LONG PAR_D .)


state 770

    (282) dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .

    DEF             reduce using rule 282 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    VARIABLE        reduce using rule 282 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    PRINTLN         reduce using rule 282 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    PRINT           reduce using rule 282 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    READLINE        reduce using rule 282 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    VAR             reduce using rule 282 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    VAL             reduce using rule 282 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    WHILE           reduce using rule 282 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    FOR             reduce using rule 282 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    IF              reduce using rule 282 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    $end            reduce using rule 282 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    LLAVE_D         reduce using rule 282 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    INT             reduce using rule 282 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    LONG            reduce using rule 282 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    FLOAT           reduce using rule 282 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    DOUBLE          reduce using rule 282 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    RETURN          reduce using rule 282 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)
    CASE            reduce using rule 282 (dectupla -> PAR_I DOUBLECLASS COMA FLOATCLASS PAR_D IGUAL PAR_I DOUBLE COMA FLOAT PAR_D .)


state 771

    (283) dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .

    DEF             reduce using rule 283 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    VARIABLE        reduce using rule 283 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    PRINTLN         reduce using rule 283 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    PRINT           reduce using rule 283 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    READLINE        reduce using rule 283 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    VAR             reduce using rule 283 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    VAL             reduce using rule 283 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    WHILE           reduce using rule 283 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    FOR             reduce using rule 283 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    IF              reduce using rule 283 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    $end            reduce using rule 283 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    LLAVE_D         reduce using rule 283 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    INT             reduce using rule 283 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    LONG            reduce using rule 283 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    FLOAT           reduce using rule 283 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    DOUBLE          reduce using rule 283 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    RETURN          reduce using rule 283 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)
    CASE            reduce using rule 283 (dectupla -> PAR_I DOUBLECLASS COMA INTCLASS PAR_D IGUAL PAR_I DOUBLE COMA INT PAR_D .)


state 772

    (276) dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .

    DEF             reduce using rule 276 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    VARIABLE        reduce using rule 276 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    PRINTLN         reduce using rule 276 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    PRINT           reduce using rule 276 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    READLINE        reduce using rule 276 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    VAR             reduce using rule 276 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    VAL             reduce using rule 276 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    WHILE           reduce using rule 276 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    FOR             reduce using rule 276 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    IF              reduce using rule 276 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    $end            reduce using rule 276 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    LLAVE_D         reduce using rule 276 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    INT             reduce using rule 276 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    LONG            reduce using rule 276 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    FLOAT           reduce using rule 276 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    DOUBLE          reduce using rule 276 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    RETURN          reduce using rule 276 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)
    CASE            reduce using rule 276 (dectupla -> PAR_I FLOATCLASS COMA STRINGCLASS PAR_D IGUAL PAR_I FLOAT COMA STRING PAR_D .)


state 773

    (277) dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .

    DEF             reduce using rule 277 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    VARIABLE        reduce using rule 277 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    PRINTLN         reduce using rule 277 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    PRINT           reduce using rule 277 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    READLINE        reduce using rule 277 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    VAR             reduce using rule 277 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    VAL             reduce using rule 277 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    WHILE           reduce using rule 277 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    FOR             reduce using rule 277 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    IF              reduce using rule 277 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    $end            reduce using rule 277 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    LLAVE_D         reduce using rule 277 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    INT             reduce using rule 277 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    LONG            reduce using rule 277 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    FLOAT           reduce using rule 277 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    DOUBLE          reduce using rule 277 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    RETURN          reduce using rule 277 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)
    CASE            reduce using rule 277 (dectupla -> PAR_I FLOATCLASS COMA LONGCLASS PAR_D IGUAL PAR_I FLOAT COMA LONG PAR_D .)


state 774

    (278) dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .

    DEF             reduce using rule 278 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    VARIABLE        reduce using rule 278 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    PRINTLN         reduce using rule 278 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    PRINT           reduce using rule 278 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    READLINE        reduce using rule 278 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    VAR             reduce using rule 278 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    VAL             reduce using rule 278 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    WHILE           reduce using rule 278 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    FOR             reduce using rule 278 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    IF              reduce using rule 278 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    $end            reduce using rule 278 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    LLAVE_D         reduce using rule 278 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    INT             reduce using rule 278 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    LONG            reduce using rule 278 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    FLOAT           reduce using rule 278 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    DOUBLE          reduce using rule 278 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    RETURN          reduce using rule 278 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)
    CASE            reduce using rule 278 (dectupla -> PAR_I FLOATCLASS COMA DOUBLECLASS PAR_D IGUAL PAR_I FLOAT COMA DOUBLE PAR_D .)


state 775

    (279) dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .

    DEF             reduce using rule 279 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    VARIABLE        reduce using rule 279 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    PRINTLN         reduce using rule 279 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    PRINT           reduce using rule 279 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    READLINE        reduce using rule 279 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    VAR             reduce using rule 279 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    VAL             reduce using rule 279 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    WHILE           reduce using rule 279 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    FOR             reduce using rule 279 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    IF              reduce using rule 279 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    $end            reduce using rule 279 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    LLAVE_D         reduce using rule 279 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    INT             reduce using rule 279 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    LONG            reduce using rule 279 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    FLOAT           reduce using rule 279 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    DOUBLE          reduce using rule 279 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    RETURN          reduce using rule 279 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)
    CASE            reduce using rule 279 (dectupla -> PAR_I FLOATCLASS COMA INTCLASS PAR_D IGUAL PAR_I FLOAT COMA INT PAR_D .)


state 776

    (158) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I . INT PAR_D

    INT             shift and go to state 778


state 777

    (156) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT . PAR_D

    PAR_D           shift and go to state 779


state 778

    (158) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT . PAR_D

    PAR_D           shift and go to state 780


state 779

    (156) array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .

    DEF             reduce using rule 156 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    VARIABLE        reduce using rule 156 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    PRINTLN         reduce using rule 156 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    PRINT           reduce using rule 156 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    READLINE        reduce using rule 156 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    VAR             reduce using rule 156 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    VAL             reduce using rule 156 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    WHILE           reduce using rule 156 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    FOR             reduce using rule 156 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    IF              reduce using rule 156 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    $end            reduce using rule 156 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    LLAVE_D         reduce using rule 156 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    INT             reduce using rule 156 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    LONG            reduce using rule 156 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    FLOAT           reduce using rule 156 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    DOUBLE          reduce using rule 156 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    RETURN          reduce using rule 156 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    CASE            reduce using rule 156 (array -> VAR VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)


state 780

    (158) array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .

    DEF             reduce using rule 158 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    VARIABLE        reduce using rule 158 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    PRINTLN         reduce using rule 158 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    PRINT           reduce using rule 158 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    READLINE        reduce using rule 158 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    VAR             reduce using rule 158 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    VAL             reduce using rule 158 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    WHILE           reduce using rule 158 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    FOR             reduce using rule 158 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    IF              reduce using rule 158 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    $end            reduce using rule 158 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    LLAVE_D         reduce using rule 158 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    INT             reduce using rule 158 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    LONG            reduce using rule 158 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    FLOAT           reduce using rule 158 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    DOUBLE          reduce using rule 158 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    RETURN          reduce using rule 158 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)
    CASE            reduce using rule 158 (array -> VAL VARIABLE DOBLE_PUNTO ARRAYCLASS CORCHETE_I tipo CORCHETE_D IGUAL NEW ARRAYCLASS CORCHETE_I tipo CORCHETE_D PAR_I INT PAR_D .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 47 resolved as shift
WARNING: shift/reduce conflict for PAR_D in state 383 resolved as shift
WARNING: shift/reduce conflict for CORCHETE_D in state 432 resolved as shift
WARNING: shift/reduce conflict for CORCHETE_D in state 433 resolved as shift
WARNING: shift/reduce conflict for PAR_D in state 537 resolved as shift
WARNING: shift/reduce conflict for PAR_D in state 538 resolved as shift
WARNING: shift/reduce conflict for LLAVE_D in state 541 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 582 resolved as shift
WARNING: shift/reduce conflict for LLAVE_D in state 584 resolved as shift
WARNING: reduce/reduce conflict in state 159 resolved using rule (asignacionLong -> VAR VARIABLE IGUAL longvalues)
WARNING: rejected rule (floatvalues -> longvalues) in state 159
WARNING: reduce/reduce conflict in state 160 resolved using rule (asignacionInt -> VAR VARIABLE IGUAL intvalues)
WARNING: rejected rule (longvalues -> intvalues) in state 160
WARNING: reduce/reduce conflict in state 161 resolved using rule (asignacionFloat -> VAR VARIABLE IGUAL floatvalues)
WARNING: rejected rule (doublevalues -> floatvalues) in state 161
WARNING: reduce/reduce conflict in state 170 resolved using rule (intvalues -> INT)
WARNING: rejected rule (longvalues -> INT) in state 170
WARNING: reduce/reduce conflict in state 193 resolved using rule (asignacionLong -> VAL VARIABLE IGUAL longvalues)
WARNING: rejected rule (floatvalues -> longvalues) in state 193
WARNING: reduce/reduce conflict in state 194 resolved using rule (asignacionInt -> VAL VARIABLE IGUAL intvalues)
WARNING: rejected rule (longvalues -> intvalues) in state 194
WARNING: reduce/reduce conflict in state 195 resolved using rule (asignacionFloat -> VAL VARIABLE IGUAL floatvalues)
WARNING: rejected rule (doublevalues -> floatvalues) in state 195
WARNING: reduce/reduce conflict in state 409 resolved using rule (intvalues -> INT)
WARNING: rejected rule (longvalues -> INT) in state 409
WARNING: Rule (longvalues -> INT) is never reduced
